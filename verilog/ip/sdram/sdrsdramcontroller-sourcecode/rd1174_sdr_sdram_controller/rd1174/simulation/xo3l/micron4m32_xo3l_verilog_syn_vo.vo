
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.1.0.96  Patch Version(s) 119989

// ldbanno -n Verilog -o xo3l_verilog_syn_xo3l_verilog_syn_vo.vo -w -neg -gui xo3l_verilog_syn_xo3l_verilog_syn.ncd 
// Netlist created on Thu Mar 13 16:40:19 2014
// Netlist written on Fri Mar 14 11:10:12 2014
// Design is for device LCMXO3L-4300C
// Design is for package CABGA256
// Design is for performance grade 5

`timescale 1 ns / 1 ps

module sdram_controller ( o_data_valid, o_data_req, o_busy, o_init_done, o_ack, 
                          o_sdram_addr, o_sdram_blkaddr, o_sdram_casn, 
                          o_sdram_cke, o_sdram_csn, o_sdram_dqm, o_sdram_rasn, 
                          o_sdram_wen, o_sdram_clk, o_write_done, o_read_done, 
                          i_data, o_data, io_sdram_dq, i_addr, i_adv, i_clk, 
                          i_rst, i_rwn, i_selfrefresh_req, i_loadmod_req, 
                          i_burststop_req, i_disable_active, 
                          i_disable_precharge, i_precharge_req, i_power_down, 
                          i_disable_autorefresh );
  input  [31:0] i_data;
  input  [26:0] i_addr;
  input  i_adv, i_clk, i_rst, i_rwn, i_selfrefresh_req, i_loadmod_req, 
         i_burststop_req, i_disable_active, i_disable_precharge, 
         i_precharge_req, i_power_down, i_disable_autorefresh;
  output o_data_valid, o_data_req, o_busy, o_init_done, o_ack;
  output [12:0] o_sdram_addr;
  output [1:0] o_sdram_blkaddr;
  output o_sdram_casn, o_sdram_cke, o_sdram_csn;
  output [3:0] o_sdram_dqm;
  output o_sdram_rasn, o_sdram_wen, o_sdram_clk, o_write_done, o_read_done;
  output [31:0] o_data;
  inout  [31:0] io_sdram_dq;
  wire   \U0/read_req_cnt_i[0] , \U0/read_req_cnt_i , \U0/read_req_cnt_i_s[0] , 
         \U0/N_170_i , i_clk_c, \U0/read_req_cnt_i_cry[0] , 
         \U0/read_req_cnt_i[9] , \U0/read_req_cnt_i_s[9] , 
         \U0/read_req_cnt_i_cry[8] , \U0/read_req_cnt_i[8] , 
         \U0/read_req_cnt_i[7] , \U0/read_req_cnt_i_s[8] , 
         \U0/read_req_cnt_i_s[7] , \U0/read_req_cnt_i_cry[6] , 
         \U0/read_req_cnt_i[6] , \U0/read_req_cnt_i[5] , 
         \U0/read_req_cnt_i_s[6] , \U0/read_req_cnt_i_s[5] , 
         \U0/read_req_cnt_i_cry[4] , \U0/read_req_cnt_i[4] , 
         \U0/read_req_cnt_i[3] , \U0/read_req_cnt_i_s[4] , 
         \U0/read_req_cnt_i_s[3] , \U0/read_req_cnt_i_cry[2] , 
         \U0/read_req_cnt_i[2] , \U0/read_req_cnt_i[1] , 
         \U0/read_req_cnt_i_s[2] , \U0/read_req_cnt_i_s[1] , \U0/N_31_1 , 
         \U0/N_176 , \U0/clk_count_i[1] , \U0/clk_count_i[0] , 
         \U0/clk_count_i_3_i_a2_0_0[0] , \U0/N_201 , \U0/N_31_i , \U0/N_29_i , 
         \U0/clk_count_i_3_i_0[3] , \U0/N_183 , \U0/N_134 , \U0/N_180 , 
         \U0/N_123_i_1 , \U0/N_127 , \U0/N_149 , \U0/init_fsm_states_i[9] , 
         \U0/N_124_i , \U0/N_123_i , \U0/clk_count_i[2] , \U0/clk_count_i[3] , 
         o_init_done_c, i_selfrefresh_req_c, \U0/cmd_fsm_states_i[0] , 
         \U0/cmd_fsm_states_i[1] , \U0/cmd_fsm_states_i_ns_0_2[0] , 
         \U0/cmd_fsm_states_i_ns_0_4[0] , \U0/N_188 , \U0/N_195 , \U0/N_17_i , 
         \U0/cmd_fsm_states_i_ns[0] , refresh_req_i, \U0/cmd_fsm_states_i[12] , 
         \U0/cmd_fsm_states_i31 , i_rwn_c, \U0/N_87_1 , 
         \U0/cmd_fsm_states_i_ns[3] , \U0/cmd_fsm_states_i_ns[2] , 
         \U0/cmd_fsm_states_i[2] , \U0/cmd_fsm_states_i[3] , \U0/N_147 , 
         \U0/N_133 , \U0/cmd_fsm_states_i_ns[5] , \U0/N_411_i , 
         \U0/cmd_fsm_states_i[4] , \U0/cmd_fsm_states_i[5] , 
         \U0/cmd_fsm_states_i[8] , \U0/cmd_fsm_states_i[7] , 
         \U0/cmd_fsm_states_i[20] , i_burststop_req_c, \U0/N_21 , \U0/N_766_1 , 
         \U0/cmd_fsm_states_i[6] , \U0/N_142 , 
         \U0/cmd_fsm_states_i_ns_i_a2_0_0[9] , i_power_down_c, 
         \U0/cmd_fsm_states_i[9] , i_loadmod_req_c, i_adv_c, \U0/N_16_i , 
         \U0/cmd_fsm_states_i_ns[8] , \U0/N_205 , \U0/N_161 , 
         i_disable_active_c, \U0/N_112 , \U0/N_111 , 
         \U0/cmd_fsm_states_i_ns[11] , \U0/cmd_fsm_states_i_ns[10] , 
         \U0/cmd_fsm_states_i[10] , \U0/cmd_fsm_states_i[11] , 
         \U0/cmd_fsm_states_i[14] , \U0/cmd_fsm_states_i[13] , \U0/N_423_i , 
         \U0/N_23 , \U0/cmd_fsm_states_i[15] , \U0/cmd_fsm_states_i[18] , 
         \U0/N_25 , \U0/cmd_fsm_states_i_ns[14] , \U0/N_91 , i_precharge_req_c, 
         \U0/cmd_fsm_states_i[16] , \U0/cmd_fsm_states_i_ns[17] , \U0/N_72_i , 
         \U0/cmd_fsm_states_i[17] , \U0/cmd_fsm_states_i[19] , \U0/N_148 , 
         \U0/N_202 , \U0/N_30 , \U0/N_431_i , \U0/N_125 , 
         \U0/cmd_fsm_states_i[21] , \U0/N_437_i , \U0/N_536_i , 
         delay_done150us_i, \U0/init_fsm_states_i[0] , 
         \U0/init_fsm_states_i_ns_i_i_a2[1] , \U0/init_fsm_states_i_0[0] , 
         \U0/init_fsm_states_i[1] , \U0/init_fsm_states_i[2] , \U0/N_35_i , 
         \U0/N_33 , \U0/init_fsm_states_i[3] , \U0/init_fsm_states_i[4] , 
         \U0/init_fsm_states_i_ns[5] , \U0/N_9 , \U0/init_fsm_states_i[5] , 
         \U0/init_fsm_states_i[6] , \U0/init_fsm_states_i_ns[7] , \U0/N_11 , 
         \U0/init_fsm_states_i[7] , \U0/init_fsm_states_i[8] , \U0/N_766_0 , 
         \U0/N_37 , \U0/N_491_i , \U0/un1_read_data_req_i_1_sqmuxa_0_0 , 
         \U0/read_data_req_i , \U0/N_185 , 
         \U0/un1_reset_clk_counter_i_0_sqmuxa_2_0_0 , \U0/read_done_i , 
         \U0/N_490_i , \U0/read_req_cnt_rst_i , \U0/clk_count_i_3_i_o2_1_2[0] , 
         \U0/read_done_reg_i , \U0/cmd_fsm_states_i_i[5] , 
         \U0/o_sdram_addr_2_sqmuxa_i_a2_i_o2 , \U0/sdram_dq_en_i , \U0/N_184 , 
         \U0/write_done_i , \U1/U1/lfsr_reg_i[0] , \U1/U1/lfsr_reg_i[1] , 
         \U1/U1/lfsr_reg_i[3] , \U1/U1/lfsr_reg_i[5] , \U1/U1/lfsr_reg_i[2] , 
         \U1/U1/lfsr_equal_3 , \U1/U1/lfsr_reg_i[4] , \U1/U1/lfsr_equal , 
         \U1/U1/lfsr_64_done_i , \U0/write_done_reg_i , 
         \U1/U1/un1_lfsr_reg_i_i , \U1/o_lfsr_64_done_RNI147F , 
         \U1/U5/lfsr_reg_i[5] , \U1/U5/lfsr_reg_i[4] , \U1/U5/lfsr_reg_i[7] , 
         \U1/U5/lfsr_reg_i[3] , \U1/U5/un1_lfsr_reg_i_i , 
         \U1/U5/lfsr_reg_i[0] , \U1/U5/lfsr_256_equal_i_3 , 
         \U1/U5/lfsr_reg_i[1] , \U2/lfsr_count_match_i , \U2/lfsr_reg_i[0] , 
         \U2/lfsr_reg_i[10] , \U2/lfsr_reg_i[8] , \U2/lfsr_reg_i_2[1] , 
         \U2/lfsr_reg_i_2[0] , autorefresh_enable_i, \U2/lfsr_reg_i[1] , 
         \U2/lfsr_reg_i[2] , \U2/lfsr_reg_i_2[3] , \U2/lfsr_reg_i_2[2] , 
         \U2/lfsr_reg_i[3] , \U2/lfsr_reg_i[4] , \U2/lfsr_reg_i_2[5] , 
         \U2/lfsr_reg_i[5] , \U2/lfsr_reg_i[6] , \U2/lfsr_reg_i[7] , GND, 
         \U2/lfsr_reg_i[9] , o_write_done_c, o_read_done_c, 
         autorefresh_enable_i8, \U0/o_sdram_rasn_3_0_a2_0_a2_0_2 , 
         \U1/U5/lfsr_reg_i[2] , \U1/U5/lfsr_256_equal_i_4 , 
         \U1/U5/lfsr_reg_i[6] , \U1/U5/lfsr_256_equal_i , refresh_count_done_i, 
         \U0/autoref_ack_i , latch_ref_req_i, N_61_i, \U0/o_data_reqlto9_4 , 
         \U0/N_492_i , \U0/N_493_i , o_busy_c, 
         \U0/cmd_fsm_states_i_ns_0_a2_3_2[0] , power_down_reg1_i, 
         o_sdram_clk_c, \U0.N_488_i , \U0/o_sdram_rasn_3_1 , \U0/N_45 , 
         \U0/o_sdram_rasn_3_i , i_rst_c, \o_sdram_dqm_c[1] , 
         \U2/lfsr_count_match_i_6 , \U2/lfsr_count_match_i_0 , 
         \U2/lfsr_count_match_i_7 , i_disable_autorefresh_c, refresh_req_i_3, 
         \i_addr_c[20] , \U0/o_sdram_addr_7_u_i_2[10] , 
         \U0/un1_reset_clk_counter_i_0_sqmuxa_2_0_0_0 , 
         \U0/cmd_fsm_states_i_ns_0_0[0] , \U0/N_187 , \U0/N_143 , 
         \cmd_fsm_states_i_RNIT1HF[5] , \U0/o_sdram_addr_7_iv_0_0[7] , 
         \U0.o_sdram_addr_7_iv_i[7] , \U0/N_69 , \U0/o_sdram_casn_6_sqmuxa , 
         \i_addr_c[11] , \i_addr_c[21] , \U0.o_sdram_addr_7_iv_i[11] , 
         \U0/N_64 , \i_addr_c[8] , N_96, \U0/N_186 , \i_addr_c[10] , 
         i_disable_precharge_c, \U0/N_66 , N_19_i, \U0/N_138 , \U0/N_141 , 
         \i_addr_c[15] , \U0/N_116 , \i_addr_c[5] , \U0/N_114 , 
         \U0.o_sdram_addr_7_iv_i[5] , \i_addr_c[1] , 
         \U0.o_sdram_addr_7_iv_i[1] , \i_addr_c[6] , \U0/N_75 , \i_addr_c[16] , 
         \U0.o_sdram_addr_7_iv_i[6] , \i_addr_c[4] , \U0/N_101 , 
         \i_addr_c[14] , \U0.o_sdram_addr_7_iv_i[4] , \i_addr_c[3] , \U0/N_82 , 
         \i_addr_c[13] , \U0.o_sdram_addr_7_iv_i[3] , \i_addr_c[2] , 
         \U0/N_105 , \i_addr_c[12] , \U0.o_sdram_addr_7_iv_i[2] , 
         \i_addr_c[0] , \U0/N_103 , \U0.o_sdram_addr_7_iv_i[0] , \U0/N_51 , 
         N_13_i, \i_addr_c[9] , \i_addr_c[19] , \U0/o_sdram_addr_7_iv_0_0[9] , 
         \U0.o_sdram_addr_7_iv_i[9] , \i_addr_c[18] , 
         \U0/o_sdram_addr_7_iv_0_0[8] , \U0.o_sdram_addr_7_iv_i[8] , 
         \U0.o_sdram_rasn_3 , \U0/N_120 , \U0.o_sdram_casn_3 , 
         \U0/sdram_dqm_i170_i , \U0/clk_count_i_3_i_o2_3_2[0] , 
         \U0/o_data_reqlto9_3 , o_data_req_c, 
         \U0/un1_cmd_fsm_states_i_1_i_a2_0_a2_1 , \U0.N_489_i , \i_addr_c[7] , 
         \i_addr_c[17] , N_97, \U0.N_494_i , \U0.o_sdram_cke_3 , 
         \io_sdram_dq_in[0] , \i_data_c[0] , \U0.o_sdram_addr_cl_i[0] , 
         \o_sdram_addr_1[11] , o_data_valid_c, \io_sdram_dq_in[15] , 
         \i_data_c[15] , \io_sdram_dq_in[14] , \i_data_c[14] , 
         \io_sdram_dq_in[13] , \i_data_c[13] , \io_sdram_dq_in[12] , 
         \i_data_c[12] , \io_sdram_dq_in[11] , \i_data_c[11] , 
         \io_sdram_dq_in[10] , \i_data_c[10] , \io_sdram_dq_in[9] , 
         \i_data_c[9] , \io_sdram_dq_in[8] , \i_data_c[8] , 
         \io_sdram_dq_in[7] , \i_data_c[7] , \io_sdram_dq_in[6] , 
         \i_data_c[6] , \io_sdram_dq_in[5] , \i_data_c[5] , 
         \io_sdram_dq_in[4] , \i_data_c[4] , \io_sdram_dq_in[3] , 
         \i_data_c[3] , \io_sdram_dq_in[2] , \i_data_c[2] , 
         \io_sdram_dq_in[1] , \i_data_c[1] , \o_data_c[15] , \o_data_c[14] , 
         \o_data_c[13] , \o_data_c[12] , \o_data_c[11] , \o_data_c[10] , 
         \o_data_c[9] , \o_data_c[8] , \o_data_c[7] , \o_data_c[6] , 
         \o_data_c[5] , \o_data_c[4] , \o_data_c[3] , \o_data_c[2] , 
         \o_data_c[1] , \o_data_c[0] , o_sdram_wen_c, o_sdram_rasn_c, 
         o_sdram_cke_c, o_sdram_casn_c, \o_sdram_blkaddr_c[1] , 
         \o_sdram_blkaddr_c[0] , \o_sdram_addr_c[10] , \o_sdram_addr_c[9] , 
         \o_sdram_addr_c[8] , \o_sdram_addr_c[7] , \o_sdram_addr_c[6] , 
         \o_sdram_addr_c[5] , \o_sdram_addr_c[4] , \o_sdram_addr_c[3] , 
         \o_sdram_addr_c[2] , \o_sdram_addr_c[1] , \o_sdram_addr_c[0] , 
         o_ack_c, VCCI;

  U0_SLICE_0 \U0/SLICE_0 ( .B1(\U0/read_req_cnt_i[0] ), 
    .A1(\U0/read_req_cnt_i ), .A0(\U0/read_req_cnt_i ), 
    .DI1(\U0/read_req_cnt_i_s[0] ), .CE(\U0/N_170_i ), .CLK(i_clk_c), 
    .F1(\U0/read_req_cnt_i_s[0] ), .Q1(\U0/read_req_cnt_i[0] ), 
    .FCO(\U0/read_req_cnt_i_cry[0] ));
  U0_SLICE_1 \U0/SLICE_1 ( .B0(\U0/read_req_cnt_i[9] ), 
    .A0(\U0/read_req_cnt_i ), .DI0(\U0/read_req_cnt_i_s[9] ), 
    .CE(\U0/N_170_i ), .CLK(i_clk_c), .FCI(\U0/read_req_cnt_i_cry[8] ), 
    .F0(\U0/read_req_cnt_i_s[9] ), .Q0(\U0/read_req_cnt_i[9] ));
  U0_SLICE_2 \U0/SLICE_2 ( .B1(\U0/read_req_cnt_i ), 
    .A1(\U0/read_req_cnt_i[8] ), .B0(\U0/read_req_cnt_i ), 
    .A0(\U0/read_req_cnt_i[7] ), .DI1(\U0/read_req_cnt_i_s[8] ), 
    .DI0(\U0/read_req_cnt_i_s[7] ), .CE(\U0/N_170_i ), .CLK(i_clk_c), 
    .FCI(\U0/read_req_cnt_i_cry[6] ), .F0(\U0/read_req_cnt_i_s[7] ), 
    .Q0(\U0/read_req_cnt_i[7] ), .F1(\U0/read_req_cnt_i_s[8] ), 
    .Q1(\U0/read_req_cnt_i[8] ), .FCO(\U0/read_req_cnt_i_cry[8] ));
  U0_SLICE_3 \U0/SLICE_3 ( .B1(\U0/read_req_cnt_i[6] ), 
    .A1(\U0/read_req_cnt_i ), .B0(\U0/read_req_cnt_i[5] ), 
    .A0(\U0/read_req_cnt_i ), .DI1(\U0/read_req_cnt_i_s[6] ), 
    .DI0(\U0/read_req_cnt_i_s[5] ), .CE(\U0/N_170_i ), .CLK(i_clk_c), 
    .FCI(\U0/read_req_cnt_i_cry[4] ), .F0(\U0/read_req_cnt_i_s[5] ), 
    .Q0(\U0/read_req_cnt_i[5] ), .F1(\U0/read_req_cnt_i_s[6] ), 
    .Q1(\U0/read_req_cnt_i[6] ), .FCO(\U0/read_req_cnt_i_cry[6] ));
  U0_SLICE_4 \U0/SLICE_4 ( .B1(\U0/read_req_cnt_i[4] ), 
    .A1(\U0/read_req_cnt_i ), .B0(\U0/read_req_cnt_i[3] ), 
    .A0(\U0/read_req_cnt_i ), .DI1(\U0/read_req_cnt_i_s[4] ), 
    .DI0(\U0/read_req_cnt_i_s[3] ), .CE(\U0/N_170_i ), .CLK(i_clk_c), 
    .FCI(\U0/read_req_cnt_i_cry[2] ), .F0(\U0/read_req_cnt_i_s[3] ), 
    .Q0(\U0/read_req_cnt_i[3] ), .F1(\U0/read_req_cnt_i_s[4] ), 
    .Q1(\U0/read_req_cnt_i[4] ), .FCO(\U0/read_req_cnt_i_cry[4] ));
  U0_SLICE_5 \U0/SLICE_5 ( .B1(\U0/read_req_cnt_i[2] ), 
    .A1(\U0/read_req_cnt_i ), .B0(\U0/read_req_cnt_i[1] ), 
    .A0(\U0/read_req_cnt_i ), .DI1(\U0/read_req_cnt_i_s[2] ), 
    .DI0(\U0/read_req_cnt_i_s[1] ), .CE(\U0/N_170_i ), .CLK(i_clk_c), 
    .FCI(\U0/read_req_cnt_i_cry[0] ), .F0(\U0/read_req_cnt_i_s[1] ), 
    .Q0(\U0/read_req_cnt_i[1] ), .F1(\U0/read_req_cnt_i_s[2] ), 
    .Q1(\U0/read_req_cnt_i[2] ), .FCO(\U0/read_req_cnt_i_cry[2] ));
  U0_SLICE_7 \U0/SLICE_7 ( .D1(\U0/N_31_1 ), .C1(\U0/N_176 ), 
    .B1(\U0/clk_count_i[1] ), .A1(\U0/clk_count_i[0] ), .D0(\U0/N_31_1 ), 
    .C0(\U0/clk_count_i_3_i_a2_0_0[0] ), .B0(\U0/N_201 ), 
    .A0(\U0/clk_count_i[0] ), .DI1(\U0/N_31_i ), .DI0(\U0/N_29_i ), 
    .CLK(i_clk_c), .F0(\U0/N_29_i ), .Q0(\U0/clk_count_i[0] ), 
    .F1(\U0/N_31_i ), .Q1(\U0/clk_count_i[1] ));
  U0_SLICE_8 \U0/SLICE_8 ( .D1(\U0/clk_count_i_3_i_0[3] ), .C1(\U0/N_183 ), 
    .B1(\U0/N_134 ), .A1(\U0/N_180 ), .D0(\U0/N_123_i_1 ), .C0(\U0/N_127 ), 
    .B0(\U0/N_149 ), .A0(\U0/init_fsm_states_i[9] ), .DI1(\U0/N_124_i ), 
    .DI0(\U0/N_123_i ), .CLK(i_clk_c), .F0(\U0/N_123_i ), 
    .Q0(\U0/clk_count_i[2] ), .F1(\U0/N_124_i ), .Q1(\U0/clk_count_i[3] ));
  U0_SLICE_9 \U0/SLICE_9 ( .D1(o_init_done_c), .C1(i_selfrefresh_req_c), 
    .B1(\U0/cmd_fsm_states_i[0] ), .A1(\U0/cmd_fsm_states_i[1] ), 
    .D0(\U0/cmd_fsm_states_i_ns_0_2[0] ), .C0(\U0/cmd_fsm_states_i_ns_0_4[0] ), 
    .B0(\U0/N_188 ), .A0(\U0/N_195 ), .DI1(\U0/N_17_i ), 
    .DI0(\U0/cmd_fsm_states_i_ns[0] ), .CLK(i_clk_c), 
    .F0(\U0/cmd_fsm_states_i_ns[0] ), .Q0(\U0/cmd_fsm_states_i[0] ), 
    .F1(\U0/N_17_i ), .Q1(\U0/cmd_fsm_states_i[1] ));
  U0_SLICE_10 \U0/SLICE_10 ( .D1(o_init_done_c), .C1(refresh_req_i), 
    .B1(i_selfrefresh_req_c), .A1(\U0/cmd_fsm_states_i[0] ), 
    .D0(\U0/cmd_fsm_states_i[12] ), .C0(\U0/cmd_fsm_states_i31 ), .B0(i_rwn_c), 
    .A0(\U0/N_87_1 ), .DI1(\U0/cmd_fsm_states_i_ns[3] ), 
    .DI0(\U0/cmd_fsm_states_i_ns[2] ), .CLK(i_clk_c), 
    .F0(\U0/cmd_fsm_states_i_ns[2] ), .Q0(\U0/cmd_fsm_states_i[2] ), 
    .F1(\U0/cmd_fsm_states_i_ns[3] ), .Q1(\U0/cmd_fsm_states_i[3] ));
  U0_SLICE_11 \U0/SLICE_11 ( .D1(\U0/cmd_fsm_states_i31 ), 
    .C1(\U0/cmd_fsm_states_i[12] ), .B1(\U0/N_87_1 ), .A1(i_rwn_c), 
    .D0(\U0/N_147 ), .C0(\U0/N_127 ), .B0(\U0/N_133 ), 
    .A0(\U0/cmd_fsm_states_i[1] ), .DI1(\U0/cmd_fsm_states_i_ns[5] ), 
    .DI0(\U0/N_411_i ), .CLK(i_clk_c), .F0(\U0/N_411_i ), 
    .Q0(\U0/cmd_fsm_states_i[4] ), .F1(\U0/cmd_fsm_states_i_ns[5] ), 
    .Q1(\U0/cmd_fsm_states_i[5] ));
  U0_SLICE_12 \U0/SLICE_12 ( .D1(\U0/cmd_fsm_states_i31 ), 
    .C1(\U0/cmd_fsm_states_i[8] ), .A1(\U0/cmd_fsm_states_i[7] ), 
    .D0(\U0/cmd_fsm_states_i[20] ), .A0(i_burststop_req_c), .DI1(\U0/N_21 ), 
    .DI0(\U0/N_766_1 ), .CLK(i_clk_c), .F0(\U0/N_766_1 ), 
    .Q0(\U0/cmd_fsm_states_i[6] ), .F1(\U0/N_21 ), 
    .Q1(\U0/cmd_fsm_states_i[7] ));
  U0_SLICE_13 \U0/SLICE_13 ( .D1(\U0/N_142 ), 
    .C1(\U0/cmd_fsm_states_i_ns_i_a2_0_0[9] ), .B1(i_power_down_c), 
    .A1(\U0/cmd_fsm_states_i[9] ), .D0(i_loadmod_req_c), .C0(i_adv_c), 
    .B0(\U0/N_142 ), .DI1(\U0/N_16_i ), .DI0(\U0/cmd_fsm_states_i_ns[8] ), 
    .CLK(i_clk_c), .F0(\U0/cmd_fsm_states_i_ns[8] ), 
    .Q0(\U0/cmd_fsm_states_i[8] ), .F1(\U0/N_16_i ), 
    .Q1(\U0/cmd_fsm_states_i[9] ));
  U0_SLICE_14 \U0/SLICE_14 ( .D1(\U0/cmd_fsm_states_i[20] ), .C1(\U0/N_205 ), 
    .B1(\U0/N_161 ), .A1(i_burststop_req_c), .D0(i_power_down_c), 
    .C0(i_disable_active_c), .B0(\U0/N_112 ), .A0(\U0/N_111 ), 
    .DI1(\U0/cmd_fsm_states_i_ns[11] ), .DI0(\U0/cmd_fsm_states_i_ns[10] ), 
    .CLK(i_clk_c), .F0(\U0/cmd_fsm_states_i_ns[10] ), 
    .Q0(\U0/cmd_fsm_states_i[10] ), .F1(\U0/cmd_fsm_states_i_ns[11] ), 
    .Q1(\U0/cmd_fsm_states_i[11] ));
  U0_SLICE_15 \U0/SLICE_15 ( .C1(\U0/cmd_fsm_states_i31 ), 
    .B1(\U0/cmd_fsm_states_i[14] ), .A1(\U0/cmd_fsm_states_i[13] ), 
    .C0(\U0/cmd_fsm_states_i31 ), .B0(\U0/cmd_fsm_states_i[10] ), 
    .A0(\U0/cmd_fsm_states_i[12] ), .DI1(\U0/N_423_i ), .DI0(\U0/N_23 ), 
    .CLK(i_clk_c), .F0(\U0/N_23 ), .Q0(\U0/cmd_fsm_states_i[12] ), 
    .F1(\U0/N_423_i ), .Q1(\U0/cmd_fsm_states_i[13] ));
  U0_SLICE_16 \U0/SLICE_16 ( .C1(\U0/cmd_fsm_states_i31 ), 
    .B1(\U0/cmd_fsm_states_i[6] ), .A1(\U0/cmd_fsm_states_i[15] ), 
    .D0(i_burststop_req_c), .B0(\U0/cmd_fsm_states_i[18] ), .DI1(\U0/N_25 ), 
    .DI0(\U0/cmd_fsm_states_i_ns[14] ), .CLK(i_clk_c), 
    .F0(\U0/cmd_fsm_states_i_ns[14] ), .Q0(\U0/cmd_fsm_states_i[14] ), 
    .F1(\U0/N_25 ), .Q1(\U0/cmd_fsm_states_i[15] ));
  U0_SLICE_17 \U0/SLICE_17 ( .D1(i_loadmod_req_c), .C1(\U0/N_91 ), 
    .B1(\U0/N_111 ), .A1(i_precharge_req_c), .D0(\U0/cmd_fsm_states_i31 ), 
    .B0(\U0/cmd_fsm_states_i[16] ), .A0(\U0/cmd_fsm_states_i[5] ), 
    .DI1(\U0/cmd_fsm_states_i_ns[17] ), .DI0(\U0/N_72_i ), .CLK(i_clk_c), 
    .F0(\U0/N_72_i ), .Q0(\U0/cmd_fsm_states_i[16] ), 
    .F1(\U0/cmd_fsm_states_i_ns[17] ), .Q1(\U0/cmd_fsm_states_i[17] ));
  U0_SLICE_18 \U0/SLICE_18 ( .C1(\U0/cmd_fsm_states_i31 ), 
    .B1(\U0/cmd_fsm_states_i[17] ), .A1(\U0/cmd_fsm_states_i[19] ), 
    .D0(\U0/clk_count_i[2] ), .C0(\U0/cmd_fsm_states_i[18] ), .B0(\U0/N_148 ), 
    .A0(\U0/N_202 ), .DI1(\U0/N_30 ), .DI0(\U0/N_431_i ), .CLK(i_clk_c), 
    .F0(\U0/N_431_i ), .Q0(\U0/cmd_fsm_states_i[18] ), .F1(\U0/N_30 ), 
    .Q1(\U0/cmd_fsm_states_i[19] ));
  U0_SLICE_19 \U0/SLICE_19 ( .D1(\U0/N_125 ), .C1(\U0/N_133 ), 
    .B1(\U0/cmd_fsm_states_i[21] ), .A1(\U0/cmd_fsm_states_i[3] ), 
    .D0(i_burststop_req_c), .C0(\U0/cmd_fsm_states_i[2] ), .B0(\U0/N_205 ), 
    .A0(\U0/cmd_fsm_states_i[20] ), .DI1(\U0/N_437_i ), .DI0(\U0/N_536_i ), 
    .CLK(i_clk_c), .F0(\U0/N_536_i ), .Q0(\U0/cmd_fsm_states_i[20] ), 
    .F1(\U0/N_437_i ), .Q1(\U0/cmd_fsm_states_i[21] ));
  U0_SLICE_20 \U0/SLICE_20 ( .C1(delay_done150us_i), 
    .B1(\U0/init_fsm_states_i[0] ), .B0(delay_done150us_i), 
    .A0(\U0/init_fsm_states_i[0] ), .DI1(\U0/init_fsm_states_i_ns_i_i_a2[1] ), 
    .DI0(\U0/init_fsm_states_i_0[0] ), .CLK(i_clk_c), 
    .F0(\U0/init_fsm_states_i_0[0] ), .Q0(\U0/init_fsm_states_i[0] ), 
    .F1(\U0/init_fsm_states_i_ns_i_i_a2[1] ), .Q1(\U0/init_fsm_states_i[1] ));
  U0_SLICE_21 \U0/SLICE_21 ( .D1(\U0/clk_count_i[2] ), 
    .C1(\U0/clk_count_i[0] ), .B1(\U0/N_125 ), .A1(\U0/init_fsm_states_i[2] ), 
    .D0(\U0/init_fsm_states_i[1] ), .C0(\U0/cmd_fsm_states_i31 ), 
    .A0(\U0/init_fsm_states_i[2] ), .DI1(\U0/N_35_i ), .DI0(\U0/N_33 ), 
    .CLK(i_clk_c), .F0(\U0/N_33 ), .Q0(\U0/init_fsm_states_i[2] ), 
    .F1(\U0/N_35_i ), .Q1(\U0/init_fsm_states_i[3] ));
  U0_SLICE_22 \U0/SLICE_22 ( .D1(\U0/clk_count_i[2] ), 
    .C1(\U0/init_fsm_states_i[4] ), .B1(\U0/N_125 ), .A1(\U0/clk_count_i[0] ), 
    .D0(\U0/N_125 ), .C0(\U0/N_133 ), .B0(\U0/init_fsm_states_i[4] ), 
    .A0(\U0/init_fsm_states_i[3] ), .DI1(\U0/init_fsm_states_i_ns[5] ), 
    .DI0(\U0/N_9 ), .CLK(i_clk_c), .F0(\U0/N_9 ), 
    .Q0(\U0/init_fsm_states_i[4] ), .F1(\U0/init_fsm_states_i_ns[5] ), 
    .Q1(\U0/init_fsm_states_i[5] ));
  U0_SLICE_23 \U0/SLICE_23 ( .D1(\U0/clk_count_i[2] ), 
    .C1(\U0/init_fsm_states_i[6] ), .B1(\U0/clk_count_i[0] ), .A1(\U0/N_125 ), 
    .D0(\U0/N_133 ), .C0(\U0/init_fsm_states_i[5] ), 
    .B0(\U0/init_fsm_states_i[6] ), .A0(\U0/N_125 ), 
    .DI1(\U0/init_fsm_states_i_ns[7] ), .DI0(\U0/N_11 ), .CLK(i_clk_c), 
    .F0(\U0/N_11 ), .Q0(\U0/init_fsm_states_i[6] ), 
    .F1(\U0/init_fsm_states_i_ns[7] ), .Q1(\U0/init_fsm_states_i[7] ));
  U0_SLICE_24 \U0/SLICE_24 ( .D1(\U0/init_fsm_states_i[8] ), 
    .B1(\U0/cmd_fsm_states_i31 ), .A1(\U0/init_fsm_states_i[9] ), 
    .D0(\U0/init_fsm_states_i[7] ), .B0(\U0/cmd_fsm_states_i31 ), 
    .A0(\U0/init_fsm_states_i[8] ), .DI1(\U0/N_766_0 ), .DI0(\U0/N_37 ), 
    .CLK(i_clk_c), .F0(\U0/N_37 ), .Q0(\U0/init_fsm_states_i[8] ), 
    .F1(\U0/N_766_0 ), .Q1(\U0/init_fsm_states_i[9] ));
  U0_SLICE_25 \U0/SLICE_25 ( .D1(i_rwn_c), .C1(\U0/cmd_fsm_states_i[12] ), 
    .B1(\U0/cmd_fsm_states_i[10] ), .D0(\U0/cmd_fsm_states_i[2] ), 
    .C0(\U0/cmd_fsm_states_i[20] ), .B0(\U0/cmd_fsm_states_i[10] ), 
    .A0(\U0/cmd_fsm_states_i[12] ), .DI0(\U0/N_491_i ), 
    .CE(\U0/un1_read_data_req_i_1_sqmuxa_0_0 ), .CLK(i_clk_c), 
    .F0(\U0/N_491_i ), .Q0(\U0/read_data_req_i ), 
    .F1(\U0/un1_read_data_req_i_1_sqmuxa_0_0 ));
  U0_SLICE_26 \U0/SLICE_26 ( .D1(\U0/cmd_fsm_states_i[18] ), 
    .C1(i_burststop_req_c), .B1(\U0/N_125 ), .A1(\U0/cmd_fsm_states_i[16] ), 
    .D0(\U0/cmd_fsm_states_i[18] ), .C0(\U0/clk_count_i[1] ), 
    .B0(i_burststop_req_c), .DI0(\U0/N_185 ), 
    .CE(\U0/un1_reset_clk_counter_i_0_sqmuxa_2_0_0 ), .CLK(i_clk_c), 
    .F0(\U0/N_185 ), .Q0(\U0/read_done_i ), .F1(\U0/N_148 ));
  U0_SLICE_28 \U0/SLICE_28 ( .D1(\U0/cmd_fsm_states_i[6] ), 
    .C1(\U0/cmd_fsm_states_i[14] ), .B1(\U0/cmd_fsm_states_i[0] ), 
    .A1(\U0/cmd_fsm_states_i[1] ), .D0(\U0/cmd_fsm_states_i[6] ), 
    .B0(\U0/cmd_fsm_states_i[0] ), .A0(\U0/cmd_fsm_states_i[11] ), 
    .DI0(\U0/N_490_i ), .M1(\U0/read_done_i ), .CLK(i_clk_c), 
    .F0(\U0/N_490_i ), .Q0(\U0/read_req_cnt_rst_i ), 
    .F1(\U0/clk_count_i_3_i_o2_1_2[0] ), .Q1(\U0/read_done_reg_i ));
  U0_SLICE_29 \U0/SLICE_29 ( .D1(\U0/cmd_fsm_states_i[5] ), 
    .C1(\U0/cmd_fsm_states_i[2] ), .D0(\U0/cmd_fsm_states_i[5] ), 
    .DI0(\U0/cmd_fsm_states_i_i[5] ), 
    .CE(\U0/o_sdram_addr_2_sqmuxa_i_a2_i_o2 ), .CLK(i_clk_c), 
    .F0(\U0/cmd_fsm_states_i_i[5] ), .Q0(\U0/sdram_dq_en_i ), 
    .F1(\U0/o_sdram_addr_2_sqmuxa_i_a2_i_o2 ));
  U0_SLICE_30 \U0/SLICE_30 ( .D1(\U0/clk_count_i[3] ), 
    .C1(\U0/cmd_fsm_states_i[21] ), .B1(\U0/init_fsm_states_i[9] ), 
    .A1(\U0/clk_count_i[1] ), .D0(i_burststop_req_c), 
    .C0(\U0/cmd_fsm_states_i[20] ), .A0(\U0/clk_count_i[1] ), .DI0(\U0/N_184 ), 
    .CE(\U0/un1_reset_clk_counter_i_0_sqmuxa_2_0_0 ), .CLK(i_clk_c), 
    .F0(\U0/N_184 ), .Q0(\U0/write_done_i ), .F1(\U0/clk_count_i_3_i_0[3] ));
  SLICE_32 SLICE_32( .D1(\U1/U1/lfsr_reg_i[0] ), .C1(\U1/U1/lfsr_reg_i[1] ), 
    .B1(\U1/U1/lfsr_reg_i[3] ), .A1(\U1/U1/lfsr_reg_i[5] ), 
    .D0(\U1/U1/lfsr_reg_i[2] ), .C0(\U1/U1/lfsr_equal_3 ), 
    .B0(\U1/U1/lfsr_reg_i[4] ), .DI0(\U1/U1/lfsr_equal ), 
    .M1(\U0/write_done_i ), .CLK(i_clk_c), .F0(\U1/U1/lfsr_equal ), 
    .Q0(\U1/U1/lfsr_64_done_i ), .F1(\U1/U1/lfsr_equal_3 ), 
    .Q1(\U0/write_done_reg_i ));
  U1_U1_SLICE_33 \U1/U1/SLICE_33 ( .D1(\U1/U1/lfsr_reg_i[4] ), 
    .C1(\U1/U1/lfsr_equal_3 ), .B1(\U1/U1/lfsr_reg_i[2] ), 
    .A1(\U1/U1/lfsr_64_done_i ), .D0(\U1/U1/lfsr_reg_i[4] ), 
    .C0(\U1/U1/lfsr_reg_i[5] ), .DI0(\U1/U1/un1_lfsr_reg_i_i ), 
    .M1(\U1/U1/lfsr_reg_i[0] ), .CLK(i_clk_c), .F0(\U1/U1/un1_lfsr_reg_i_i ), 
    .Q0(\U1/U1/lfsr_reg_i[0] ), .F1(\U1/o_lfsr_64_done_RNI147F ), 
    .Q1(\U1/U1/lfsr_reg_i[1] ));
  U1_U5_SLICE_36 \U1/U5/SLICE_36 ( .D1(\U1/U5/lfsr_reg_i[5] ), 
    .A1(\U1/U5/lfsr_reg_i[4] ), .D0(\U1/U5/lfsr_reg_i[5] ), 
    .C0(\U1/U5/lfsr_reg_i[7] ), .B0(\U1/U5/lfsr_reg_i[3] ), 
    .A0(\U1/U5/lfsr_reg_i[4] ), .DI0(\U1/U5/un1_lfsr_reg_i_i ), 
    .M1(\U1/U5/lfsr_reg_i[0] ), .CE(\U1/o_lfsr_64_done_RNI147F ), 
    .CLK(i_clk_c), .F0(\U1/U5/un1_lfsr_reg_i_i ), .Q0(\U1/U5/lfsr_reg_i[0] ), 
    .F1(\U1/U5/lfsr_256_equal_i_3 ), .Q1(\U1/U5/lfsr_reg_i[1] ));
  U2_SLICE_40 \U2/SLICE_40 ( .D1(\U2/lfsr_count_match_i ), 
    .B1(\U2/lfsr_reg_i[0] ), .D0(\U2/lfsr_count_match_i ), 
    .B0(\U2/lfsr_reg_i[10] ), .A0(\U2/lfsr_reg_i[8] ), 
    .DI1(\U2/lfsr_reg_i_2[1] ), .DI0(\U2/lfsr_reg_i_2[0] ), 
    .CE(autorefresh_enable_i), .CLK(i_clk_c), .F0(\U2/lfsr_reg_i_2[0] ), 
    .Q0(\U2/lfsr_reg_i[0] ), .F1(\U2/lfsr_reg_i_2[1] ), 
    .Q1(\U2/lfsr_reg_i[1] ));
  U2_SLICE_41 \U2/SLICE_41 ( .D1(\U2/lfsr_reg_i[2] ), 
    .B1(\U2/lfsr_count_match_i ), .D0(\U2/lfsr_count_match_i ), 
    .A0(\U2/lfsr_reg_i[1] ), .DI1(\U2/lfsr_reg_i_2[3] ), 
    .DI0(\U2/lfsr_reg_i_2[2] ), .CE(autorefresh_enable_i), .CLK(i_clk_c), 
    .F0(\U2/lfsr_reg_i_2[2] ), .Q0(\U2/lfsr_reg_i[2] ), 
    .F1(\U2/lfsr_reg_i_2[3] ), .Q1(\U2/lfsr_reg_i[3] ));
  U2_SLICE_43 \U2/SLICE_43 ( .C0(\U2/lfsr_count_match_i ), 
    .A0(\U2/lfsr_reg_i[4] ), .DI0(\U2/lfsr_reg_i_2[5] ), 
    .M1(\U2/lfsr_reg_i[5] ), .CE(autorefresh_enable_i), .CLK(i_clk_c), 
    .F0(\U2/lfsr_reg_i_2[5] ), .Q0(\U2/lfsr_reg_i[5] ), 
    .Q1(\U2/lfsr_reg_i[6] ));
  SLICE_44 SLICE_44( .M1(\U2/lfsr_reg_i[7] ), .M0(\U2/lfsr_reg_i[6] ), 
    .CE(autorefresh_enable_i), .CLK(i_clk_c), .F0(GND), 
    .Q0(\U2/lfsr_reg_i[7] ), .Q1(\U2/lfsr_reg_i[8] ));
  SLICE_45 SLICE_45( .C1(\U0/read_done_reg_i ), .A1(\U0/read_done_i ), 
    .C0(\U0/write_done_i ), .B0(\U0/write_done_reg_i ), 
    .M1(\U2/lfsr_reg_i[9] ), .M0(\U2/lfsr_reg_i[8] ), 
    .CE(autorefresh_enable_i), .CLK(i_clk_c), .F0(o_write_done_c), 
    .Q0(\U2/lfsr_reg_i[9] ), .F1(o_read_done_c), .Q1(\U2/lfsr_reg_i[10] ));
  SLICE_46 SLICE_46( .C1(\U0/cmd_fsm_states_i[10] ), 
    .B1(\U0/cmd_fsm_states_i[17] ), .A1(\U0/cmd_fsm_states_i[8] ), 
    .B0(i_selfrefresh_req_c), .A0(o_init_done_c), .DI0(autorefresh_enable_i8), 
    .M1(\U1/U1/lfsr_reg_i[2] ), .CLK(i_clk_c), .F0(autorefresh_enable_i8), 
    .Q0(autorefresh_enable_i), .F1(\U0/o_sdram_rasn_3_0_a2_0_a2_0_2 ), 
    .Q1(\U1/U1/lfsr_reg_i[3] ));
  U1_U5_SLICE_47 \U1/U5/SLICE_47 ( .D1(\U1/U5/lfsr_reg_i[0] ), 
    .C1(\U1/U5/lfsr_reg_i[1] ), .B1(\U1/U5/lfsr_reg_i[7] ), 
    .A1(\U1/U5/lfsr_reg_i[2] ), .D0(\U1/U5/lfsr_reg_i[3] ), 
    .C0(\U1/U5/lfsr_256_equal_i_4 ), .B0(\U1/U5/lfsr_reg_i[6] ), 
    .A0(\U1/U5/lfsr_256_equal_i_3 ), .DI0(\U1/U5/lfsr_256_equal_i ), 
    .M1(\U1/U5/lfsr_reg_i[1] ), .CE(\U1/o_lfsr_64_done_RNI147F ), 
    .CLK(i_clk_c), .F0(\U1/U5/lfsr_256_equal_i ), .Q0(delay_done150us_i), 
    .F1(\U1/U5/lfsr_256_equal_i_4 ), .Q1(\U1/U5/lfsr_reg_i[2] ));
  SLICE_48 SLICE_48( .D1(\U0/read_req_cnt_i[5] ), .C1(\U0/read_req_cnt_i[2] ), 
    .B1(\U0/read_req_cnt_i[3] ), .A1(\U0/read_req_cnt_i[4] ), 
    .D0(refresh_count_done_i), .C0(\U0/autoref_ack_i ), .A0(latch_ref_req_i), 
    .DI0(N_61_i), .M1(\U1/U1/lfsr_reg_i[3] ), .CLK(i_clk_c), .F0(N_61_i), 
    .Q0(latch_ref_req_i), .F1(\U0/o_data_reqlto9_4 ), 
    .Q1(\U1/U1/lfsr_reg_i[4] ));
  U0_SLICE_49 \U0/SLICE_49 ( .D1(i_power_down_c), .C1(refresh_req_i), 
    .B1(i_selfrefresh_req_c), .A1(i_adv_c), .D0(refresh_req_i), 
    .C0(\U0/N_112 ), .B0(\U0/cmd_fsm_states_i[0] ), .A0(i_adv_c), 
    .DI0(\U0/N_492_i ), .CE(\U0/N_493_i ), .CLK(i_clk_c), .F0(\U0/N_492_i ), 
    .Q0(o_busy_c), .F1(\U0/cmd_fsm_states_i_ns_0_a2_3_2[0] ));
  SLICE_50 SLICE_50( .D1(\U0/cmd_fsm_states_i[18] ), 
    .B1(\U0/cmd_fsm_states_i[14] ), .A1(\U0/cmd_fsm_states_i[13] ), 
    .C0(i_clk_c), .A0(power_down_reg1_i), .M0(\U0/init_fsm_states_i[9] ), 
    .CLK(i_clk_c), .F0(o_sdram_clk_c), .Q0(o_init_done_c), .F1(\U0.N_488_i ));
  U0_SLICE_51 \U0/SLICE_51 ( .D1(\U0/o_sdram_rasn_3_0_a2_0_a2_0_2 ), 
    .C1(\U0/init_fsm_states_i[9] ), .B1(\U0/cmd_fsm_states_i[1] ), 
    .A1(\U0/cmd_fsm_states_i[3] ), .D0(\U0/init_fsm_states_i[1] ), 
    .C0(\U0/o_sdram_rasn_3_1 ), .B0(\U0/N_45 ), .A0(\U0/init_fsm_states_i[3] ), 
    .DI0(\U0/o_sdram_rasn_3_i ), .CE(i_rst_c), .CLK(i_clk_c), 
    .F0(\U0/o_sdram_rasn_3_i ), .Q0(\o_sdram_dqm_c[1] ), .F1(\U0/N_45 ));
  SLICE_52 SLICE_52( .D1(\U2/lfsr_reg_i[4] ), .C1(\U2/lfsr_reg_i[2] ), 
    .B1(\U2/lfsr_reg_i[0] ), .A1(\U2/lfsr_reg_i[1] ), 
    .D0(\U2/lfsr_count_match_i_6 ), .C0(\U2/lfsr_reg_i[8] ), 
    .B0(\U2/lfsr_count_match_i_0 ), .A0(\U2/lfsr_count_match_i_7 ), 
    .DI0(\U2/lfsr_count_match_i ), .M1(\U1/U1/lfsr_reg_i[1] ), .CLK(i_clk_c), 
    .F0(\U2/lfsr_count_match_i ), .Q0(refresh_count_done_i), 
    .F1(\U2/lfsr_count_match_i_6 ), .Q1(\U1/U1/lfsr_reg_i[2] ));
  SLICE_53 SLICE_53( .D1(o_init_done_c), .B1(\U0/cmd_fsm_states_i[0] ), 
    .D0(o_init_done_c), .C0(latch_ref_req_i), .B0(o_busy_c), 
    .A0(i_disable_autorefresh_c), .DI0(refresh_req_i_3), 
    .M1(\U1/U1/lfsr_reg_i[4] ), .CLK(i_clk_c), .F0(refresh_req_i_3), 
    .Q0(refresh_req_i), .F1(\U0/N_493_i ), .Q1(\U1/U1/lfsr_reg_i[5] ));
  U0_o_sdram_addr_7_u_i_2_10__SLICE_54 \U0/o_sdram_addr_7_u_i_2[10]/SLICE_54 
    ( .D1(\U0/init_fsm_states_i[7] ), 
    .C1(\U0/o_sdram_addr_2_sqmuxa_i_a2_i_o2 ), .B1(\U0/init_fsm_states_i[9] ), 
    .A1(\i_addr_c[20] ), .D0(\U0/cmd_fsm_states_i[8] ), 
    .C0(\U0/o_sdram_addr_2_sqmuxa_i_a2_i_o2 ), .B0(\U0/init_fsm_states_i[9] ), 
    .A0(\U0/init_fsm_states_i[7] ), .M0(\U0/cmd_fsm_states_i[10] ), 
    .OFX0(\U0/o_sdram_addr_7_u_i_2[10] ));
  U0_SLICE_55 \U0/SLICE_55 ( .D1(\U0/cmd_fsm_states_i[20] ), 
    .C1(i_burststop_req_c), .B1(\U0/cmd_fsm_states_i[18] ), .A1(\U0/N_202 ), 
    .D0(\U0/cmd_fsm_states_i[20] ), 
    .C0(\U0/un1_reset_clk_counter_i_0_sqmuxa_2_0_0_0 ), .B0(i_burststop_req_c), 
    .A0(\U0/N_205 ), .F0(\U0/un1_reset_clk_counter_i_0_sqmuxa_2_0_0 ), 
    .F1(\U0/un1_reset_clk_counter_i_0_sqmuxa_2_0_0_0 ));
  U0_SLICE_56 \U0/SLICE_56 ( .D1(\U0/cmd_fsm_states_i[0] ), 
    .C1(\U0/cmd_fsm_states_i[9] ), .B1(i_power_down_c), .A1(o_init_done_c), 
    .D0(\U0/cmd_fsm_states_i[0] ), .C0(\U0/cmd_fsm_states_i_ns_0_a2_3_2[0] ), 
    .B0(\U0/cmd_fsm_states_i_ns_0_0[0] ), .A0(\U0/N_187 ), 
    .F0(\U0/cmd_fsm_states_i_ns_0_2[0] ), .F1(\U0/cmd_fsm_states_i_ns_0_0[0] ));
  U0_SLICE_57 \U0/SLICE_57 ( .D1(\U0/cmd_fsm_states_i[4] ), .C1(\U0/N_143 ), 
    .B1(\U0/cmd_fsm_states_i[11] ), .A1(\U0/clk_count_i[2] ), 
    .D0(\U0/clk_count_i[3] ), .C0(\U0/clk_count_i[1] ), 
    .A0(\U0/clk_count_i[0] ), .F0(\U0/N_143 ), .F1(\U0/N_187 ));
  U0_SLICE_58 \U0/SLICE_58 ( .D1(\U0/init_fsm_states_i[7] ), 
    .C1(\cmd_fsm_states_i_RNIT1HF[5] ), .A1(\U0/o_sdram_addr_7_iv_0_0[7] ), 
    .D0(\U0/cmd_fsm_states_i[2] ), .C0(\U0/init_fsm_states_i[9] ), 
    .B0(\U0/cmd_fsm_states_i[5] ), .F0(\cmd_fsm_states_i_RNIT1HF[5] ), 
    .F1(\U0.o_sdram_addr_7_iv_i[7] ));
  U0_SLICE_59 \U0/SLICE_59 ( .D1(\U0/init_fsm_states_i[7] ), .C1(\U0/N_69 ), 
    .B1(\U0/o_sdram_casn_6_sqmuxa ), .A1(\i_addr_c[11] ), 
    .C0(\U0/cmd_fsm_states_i[10] ), .B0(\U0/init_fsm_states_i[9] ), 
    .A0(\i_addr_c[21] ), .F0(\U0/N_69 ), .F1(\U0.o_sdram_addr_7_iv_i[11] ));
  U0_SLICE_60 \U0/SLICE_60 ( .D1(\U0/N_64 ), .C1(\U0/o_sdram_casn_6_sqmuxa ), 
    .B1(\i_addr_c[8] ), .A1(\U0/init_fsm_states_i[7] ), 
    .D0(\U0/cmd_fsm_states_i[2] ), .C0(\U0/init_fsm_states_i[9] ), 
    .B0(\U0/cmd_fsm_states_i[10] ), .A0(\U0/cmd_fsm_states_i[5] ), 
    .F0(\U0/N_64 ), .F1(N_96));
  U0_SLICE_61 \U0/SLICE_61 ( .D1(\U0/clk_count_i[3] ), 
    .C1(\U0/clk_count_i[1] ), .D0(\U0/clk_count_i[2] ), .C0(\U0/N_125 ), 
    .B0(\U0/cmd_fsm_states_i[21] ), .A0(\U0/clk_count_i[0] ), .F0(\U0/N_195 ), 
    .F1(\U0/N_125 ));
  U0_SLICE_62 \U0/SLICE_62 ( .D1(\U0/cmd_fsm_states_i[18] ), .C1(\U0/N_186 ), 
    .B1(i_burststop_req_c), .A1(\U0/N_202 ), .D0(\U0/clk_count_i[1] ), 
    .C0(\U0/clk_count_i[2] ), .B0(\U0/clk_count_i[3] ), 
    .A0(\U0/clk_count_i[0] ), .F0(\U0/N_202 ), 
    .F1(\U0/cmd_fsm_states_i_ns_0_4[0] ));
  U0_SLICE_63 \U0/SLICE_63 ( .D1(\U0/cmd_fsm_states_i[19] ), 
    .C1(\U0/cmd_fsm_states_i31 ), .B1(\U0/cmd_fsm_states_i[7] ), 
    .D0(\U0/clk_count_i[1] ), .C0(\U0/clk_count_i[2] ), 
    .B0(\U0/clk_count_i[3] ), .A0(\U0/clk_count_i[0] ), 
    .F0(\U0/cmd_fsm_states_i31 ), .F1(\U0/N_186 ));
  U0_SLICE_64 \U0/SLICE_64 ( .D1(\U0/clk_count_i[3] ), 
    .C1(\U0/clk_count_i[1] ), .D0(\U0/cmd_fsm_states_i[11] ), 
    .C0(\U0/clk_count_i[2] ), .B0(\U0/N_127 ), .A0(\U0/clk_count_i[0] ), 
    .F0(\U0/N_161 ), .F1(\U0/N_127 ));
  U0_SLICE_65 \U0/SLICE_65 ( .D1(\U0/o_sdram_casn_6_sqmuxa ), 
    .C1(\U0/cmd_fsm_states_i[10] ), .B1(\i_addr_c[10] ), 
    .A1(\U0/o_sdram_addr_2_sqmuxa_i_a2_i_o2 ), .D0(i_disable_precharge_c), 
    .C0(\cmd_fsm_states_i_RNIT1HF[5] ), .B0(\U0/N_66 ), 
    .A0(\U0/o_sdram_addr_7_u_i_2[10] ), .F0(N_19_i), .F1(\U0/N_66 ));
  SLICE_66 SLICE_66( .D1(\U0/init_fsm_states_i[2] ), .C1(\U0/N_138 ), 
    .B1(\U0/init_fsm_states_i[8] ), .A1(\U0/init_fsm_states_i[9] ), 
    .D0(\U0/N_125 ), .C0(\U0/N_141 ), .B0(\U0/clk_count_i[2] ), 
    .A0(\U0/N_134 ), .M1(\U1/U5/lfsr_reg_i[3] ), .M0(\U1/U5/lfsr_reg_i[2] ), 
    .CE(\U1/o_lfsr_64_done_RNI147F ), .CLK(i_clk_c), .F0(\U0/N_31_1 ), 
    .Q0(\U1/U5/lfsr_reg_i[3] ), .F1(\U0/N_141 ), .Q1(\U1/U5/lfsr_reg_i[4] ));
  U0_SLICE_67 \U0/SLICE_67 ( .D1(\U0/cmd_fsm_states_i[5] ), 
    .C1(\U0/cmd_fsm_states_i[2] ), .B1(\U0/cmd_fsm_states_i[8] ), 
    .A1(\U0/init_fsm_states_i[9] ), .D0(\i_addr_c[15] ), .C0(\U0/N_116 ), 
    .B0(\i_addr_c[5] ), .A0(\U0/N_114 ), .F0(\U0.o_sdram_addr_7_iv_i[5] ), 
    .F1(\U0/N_116 ));
  U0_SLICE_68 \U0/SLICE_68 ( .D1(\U0/cmd_fsm_states_i[10] ), 
    .C1(\U0/init_fsm_states_i[9] ), .D0(\i_addr_c[1] ), .C0(\U0/N_114 ), 
    .B0(\U0/N_116 ), .A0(\i_addr_c[11] ), .F0(\U0.o_sdram_addr_7_iv_i[1] ), 
    .F1(\U0/N_114 ));
  U0_SLICE_69 \U0/SLICE_69 ( .D1(\U0/N_116 ), .B1(\i_addr_c[6] ), 
    .D0(\U0/N_75 ), .C0(\U0/N_114 ), .B0(\i_addr_c[16] ), 
    .A0(\U0/init_fsm_states_i[7] ), .F0(\U0.o_sdram_addr_7_iv_i[6] ), 
    .F1(\U0/N_75 ));
  U0_SLICE_70 \U0/SLICE_70 ( .D1(\U0/N_116 ), .B1(\i_addr_c[4] ), 
    .D0(\U0/N_114 ), .C0(\U0/N_101 ), .B0(\i_addr_c[14] ), 
    .A0(\U0/init_fsm_states_i[7] ), .F0(\U0.o_sdram_addr_7_iv_i[4] ), 
    .F1(\U0/N_101 ));
  U0_SLICE_71 \U0/SLICE_71 ( .D1(\U0/N_116 ), .C1(\i_addr_c[3] ), 
    .D0(\U0/N_114 ), .C0(\U0/N_82 ), .B0(\i_addr_c[13] ), 
    .A0(\U0/init_fsm_states_i[7] ), .F0(\U0.o_sdram_addr_7_iv_i[3] ), 
    .F1(\U0/N_82 ));
  U0_SLICE_72 \U0/SLICE_72 ( .D1(\U0/N_116 ), .A1(\i_addr_c[2] ), 
    .D0(\U0/init_fsm_states_i[7] ), .C0(\U0/N_105 ), .B0(\U0/N_114 ), 
    .A0(\i_addr_c[12] ), .F0(\U0.o_sdram_addr_7_iv_i[2] ), .F1(\U0/N_105 ));
  U0_SLICE_73 \U0/SLICE_73 ( .D1(\i_addr_c[0] ), .B1(\U0/N_116 ), 
    .D0(\U0/init_fsm_states_i[7] ), .C0(\U0/N_103 ), .B0(\U0/N_114 ), 
    .A0(\i_addr_c[10] ), .F0(\U0.o_sdram_addr_7_iv_i[0] ), .F1(\U0/N_103 ));
  U0_SLICE_74 \U0/SLICE_74 ( .C1(i_loadmod_req_c), .B1(i_precharge_req_c), 
    .D0(i_power_down_c), .C0(i_disable_active_c), .B0(\U0/N_112 ), 
    .A0(\U0/N_111 ), .F0(\U0/N_87_1 ), .F1(\U0/N_112 ));
  U0_SLICE_75 \U0/SLICE_75 ( .D1(\U0/init_fsm_states_i[9] ), 
    .A1(\U0/cmd_fsm_states_i[8] ), .D0(\U0/N_51 ), 
    .C0(\U0/init_fsm_states_i[1] ), .B0(\U0/o_sdram_casn_6_sqmuxa ), 
    .A0(\U0/init_fsm_states_i[7] ), .F0(N_13_i), 
    .F1(\U0/o_sdram_casn_6_sqmuxa ));
  U0_SLICE_76 \U0/SLICE_76 ( .D1(\U0/N_114 ), .C1(\U0/o_sdram_casn_6_sqmuxa ), 
    .B1(\i_addr_c[9] ), .A1(\i_addr_c[19] ), .D0(\U0/init_fsm_states_i[7] ), 
    .C0(\U0/o_sdram_addr_7_iv_0_0[9] ), .B0(\cmd_fsm_states_i_RNIT1HF[5] ), 
    .F0(\U0.o_sdram_addr_7_iv_i[9] ), .F1(\U0/o_sdram_addr_7_iv_0_0[9] ));
  U0_SLICE_77 \U0/SLICE_77 ( .D1(\i_addr_c[8] ), .C1(\U0/N_114 ), 
    .B1(\U0/o_sdram_casn_6_sqmuxa ), .A1(\i_addr_c[18] ), 
    .D0(\U0/init_fsm_states_i[7] ), .C0(\U0/o_sdram_addr_7_iv_0_0[8] ), 
    .B0(\cmd_fsm_states_i_RNIT1HF[5] ), .F0(\U0.o_sdram_addr_7_iv_i[8] ), 
    .F1(\U0/o_sdram_addr_7_iv_0_0[8] ));
  U0_SLICE_78 \U0/SLICE_78 ( .D1(\U0/N_134 ), .C1(\U0/clk_count_i[2] ), 
    .B1(\U0/clk_count_i[0] ), .A1(\U0/clk_count_i[1] ), 
    .D0(\U0/init_fsm_states_i[0] ), .C0(\U0/N_766_1 ), 
    .B0(\U0/init_fsm_states_i[9] ), .A0(\U0/clk_count_i_3_i_o2_1_2[0] ), 
    .F0(\U0/N_134 ), .F1(\U0/N_123_i_1 ));
  U0_SLICE_79 \U0/SLICE_79 ( .D1(\U0/init_fsm_states_i[7] ), 
    .A1(\U0/init_fsm_states_i[5] ), .D0(\U0/init_fsm_states_i[1] ), 
    .C0(\U0/o_sdram_rasn_3_1 ), .B0(\U0/N_45 ), .A0(\U0/init_fsm_states_i[3] ), 
    .F0(\U0.o_sdram_rasn_3 ), .F1(\U0/o_sdram_rasn_3_1 ));
  U0_SLICE_80 \U0/SLICE_80 ( .D1(\U0/o_sdram_addr_2_sqmuxa_i_a2_i_o2 ), 
    .C1(\U0/cmd_fsm_states_i[3] ), .B1(\U0/cmd_fsm_states_i[1] ), 
    .A1(\U0/cmd_fsm_states_i[8] ), .D0(\U0/o_sdram_rasn_3_1 ), .C0(\U0/N_120 ), 
    .B0(\U0/init_fsm_states_i[9] ), .A0(\U0/init_fsm_states_i[3] ), 
    .F0(\U0.o_sdram_casn_3 ), .F1(\U0/N_120 ));
  U0_SLICE_81 \U0/SLICE_81 ( .D1(i_selfrefresh_req_c), .C1(refresh_req_i), 
    .B1(o_init_done_c), .A1(\U0/cmd_fsm_states_i[0] ), .C0(\U0/N_142 ), 
    .B0(i_adv_c), .F0(\U0/N_111 ), .F1(\U0/N_142 ));
  SLICE_82 SLICE_82( .B1(\U0/clk_count_i[0] ), .A1(\U0/clk_count_i[2] ), 
    .D0(\U0/init_fsm_states_i[6] ), .C0(\U0/N_133 ), 
    .B0(\U0/init_fsm_states_i[4] ), .A0(\U0/clk_count_i[3] ), 
    .M1(\U1/U5/lfsr_reg_i[5] ), .M0(\U1/U5/lfsr_reg_i[4] ), 
    .CE(\U1/o_lfsr_64_done_RNI147F ), .CLK(i_clk_c), .F0(\U0/N_180 ), 
    .Q0(\U1/U5/lfsr_reg_i[5] ), .F1(\U0/N_133 ), .Q1(\U1/U5/lfsr_reg_i[6] ));
  U0_SLICE_83 \U0/SLICE_83 ( .B1(\U0/cmd_fsm_states_i[6] ), 
    .A1(\U0/cmd_fsm_states_i[14] ), .D0(\U0/cmd_fsm_states_i[17] ), 
    .C0(\U0/cmd_fsm_states_i[2] ), .B0(\U0/init_fsm_states_i[9] ), 
    .A0(\U0/sdram_dqm_i170_i ), .F0(\U0/N_51 ), .F1(\U0/sdram_dqm_i170_i ));
  SLICE_84 SLICE_84( .D1(\U0/clk_count_i[2] ), .C1(\U0/clk_count_i[1] ), 
    .B1(\U0/clk_count_i[3] ), .D0(\U0/N_201 ), .C0(\U0/init_fsm_states_i[9] ), 
    .A0(\U0/cmd_fsm_states_i[4] ), .M0(\U1/U5/lfsr_reg_i[6] ), 
    .CE(\U1/o_lfsr_64_done_RNI147F ), .CLK(i_clk_c), .F0(\U0/N_176 ), 
    .Q0(\U1/U5/lfsr_reg_i[7] ), .F1(\U0/N_201 ));
  U0_SLICE_85 \U0/SLICE_85 ( .D1(\U0/cmd_fsm_states_i[12] ), 
    .C1(\U0/cmd_fsm_states_i[7] ), .B1(\U0/cmd_fsm_states_i[17] ), 
    .A1(\U0/cmd_fsm_states_i[16] ), .C0(\U0/clk_count_i_3_i_o2_3_2[0] ), 
    .B0(\U0/cmd_fsm_states_i[15] ), .A0(\U0/cmd_fsm_states_i[13] ), 
    .F0(\U0/N_138 ), .F1(\U0/clk_count_i_3_i_o2_3_2[0] ));
  U0_SLICE_86 \U0/SLICE_86 ( .D1(\U0/read_req_cnt_i[9] ), 
    .A1(\U0/read_req_cnt_i[8] ), .D0(\U0/read_req_cnt_i[6] ), 
    .C0(\U0/read_req_cnt_i[7] ), .B0(\U0/o_data_reqlto9_3 ), 
    .A0(\U0/o_data_reqlto9_4 ), .M0(\U0/cmd_fsm_states_i[3] ), .CLK(i_clk_c), 
    .F0(o_data_req_c), .Q0(\U0/autoref_ack_i ), .F1(\U0/o_data_reqlto9_3 ));
  U0_SLICE_87 \U0/SLICE_87 ( .D1(\U0/cmd_fsm_states_i[2] ), 
    .C1(\U0/un1_cmd_fsm_states_i_1_i_a2_0_a2_1 ), 
    .B1(\U0/cmd_fsm_states_i[8] ), .A1(\U0/cmd_fsm_states_i[5] ), 
    .D0(\U0/sdram_dqm_i170_i ), .C0(\U0/cmd_fsm_states_i[9] ), 
    .B0(\U0/cmd_fsm_states_i[0] ), .A0(\U0/cmd_fsm_states_i[1] ), 
    .F0(\U0/un1_cmd_fsm_states_i_1_i_a2_0_a2_1 ), .F1(\U0.N_489_i ));
  U0_SLICE_88 \U0/SLICE_88 ( .D1(\U0/clk_count_i[2] ), 
    .C1(\U0/clk_count_i[0] ), .B1(\U0/clk_count_i[3] ), 
    .A1(\U0/clk_count_i[1] ), .D0(\U0/clk_count_i[2] ), 
    .C0(\U0/clk_count_i[1] ), .B0(\U0/clk_count_i[3] ), 
    .A0(\U0/clk_count_i[0] ), .F0(\U0/N_183 ), .F1(\U0/N_205 ));
  U0_SLICE_89 \U0/SLICE_89 ( .D1(\U0/cmd_fsm_states_i[13] ), 
    .C1(i_disable_precharge_c), .B1(\U0/cmd_fsm_states_i31 ), 
    .A1(\U0/cmd_fsm_states_i[15] ), .D0(\U0/cmd_fsm_states_i[13] ), 
    .C0(i_disable_precharge_c), .B0(\U0/cmd_fsm_states_i31 ), 
    .A0(\U0/cmd_fsm_states_i[15] ), .F0(\U0/N_91 ), .F1(\U0/N_188 ));
  U0_SLICE_90 \U0/SLICE_90 ( .D1(\U0/read_req_cnt_rst_i ), 
    .B1(i_burststop_req_c), .D0(\U0/read_req_cnt_rst_i ), 
    .B0(i_burststop_req_c), .A0(\U0/read_data_req_i ), .F0(\U0/N_170_i ), 
    .F1(\U0/read_req_cnt_i ));
  U0_SLICE_91 \U0/SLICE_91 ( .D1(\U0/cmd_fsm_states_i[18] ), 
    .C1(\U0/init_fsm_states_i[9] ), .A1(\U0/cmd_fsm_states_i[20] ), 
    .D0(\U0/cmd_fsm_states_i[18] ), .C0(\U0/clk_count_i[0] ), 
    .B0(\U0/cmd_fsm_states_i[20] ), .A0(\U0/cmd_fsm_states_i[4] ), 
    .F0(\U0/N_149 ), .F1(\U0/clk_count_i_3_i_a2_0_0[0] ));
  U0_SLICE_92 \U0/SLICE_92 ( .D1(\U0/N_114 ), .C1(\i_addr_c[7] ), 
    .B1(\i_addr_c[17] ), .A1(\U0/o_sdram_casn_6_sqmuxa ), 
    .D0(\U0/init_fsm_states_i[7] ), .C0(\U0/N_64 ), .B0(\i_addr_c[9] ), 
    .A0(\U0/o_sdram_casn_6_sqmuxa ), .F0(N_97), 
    .F1(\U0/o_sdram_addr_7_iv_0_0[7] ));
  U0_SLICE_93 \U0/SLICE_93 ( .D1(i_loadmod_req_c), .C1(i_adv_c), 
    .B1(i_precharge_req_c), .B0(i_precharge_req_c), 
    .A0(\U0/cmd_fsm_states_i[0] ), .F0(\U0.N_494_i ), 
    .F1(\U0/cmd_fsm_states_i_ns_i_a2_0_0[9] ));
  U0_SLICE_94 \U0/SLICE_94 ( .D1(\U0/cmd_fsm_states_i[4] ), 
    .C1(\U0/cmd_fsm_states_i[1] ), .B1(i_selfrefresh_req_c), 
    .D0(\U0/init_fsm_states_i[9] ), .C0(\U0/cmd_fsm_states_i[1] ), 
    .A0(\U0/cmd_fsm_states_i[9] ), .F0(\U0.o_sdram_cke_3 ), .F1(\U0/N_147 ));
  U2_SLICE_95 \U2/SLICE_95 ( .D1(\U2/lfsr_reg_i[7] ), .C1(\U2/lfsr_reg_i[6] ), 
    .B1(\U2/lfsr_reg_i[3] ), .A1(\U2/lfsr_reg_i[5] ), .D0(\U2/lfsr_reg_i[10] ), 
    .A0(\U2/lfsr_reg_i[9] ), .M0(\U2/lfsr_reg_i[3] ), 
    .CE(autorefresh_enable_i), .CLK(i_clk_c), .F0(\U2/lfsr_count_match_i_0 ), 
    .Q0(\U2/lfsr_reg_i[4] ), .F1(\U2/lfsr_count_match_i_7 ));
  io_sdram_dq_0_ \io_sdram_dq[0]_I ( .PADDI(\io_sdram_dq_in[0] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[0] ), 
    .iosdramdq0(io_sdram_dq[0]));
  o_sdram_addr_11_ \o_sdram_addr[11]_I ( .IOLTO(\U0.o_sdram_addr_cl_i[0] ), 
    .IOLDO(\o_sdram_addr_1[11] ), .osdramaddr11(o_sdram_addr[11]));
  o_sdram_addr_11__MGIOL \o_sdram_addr[11]_MGIOL ( 
    .IOLDO(\o_sdram_addr_1[11] ), .IOLTO(\U0.o_sdram_addr_cl_i[0] ), 
    .OPOS(\U0.o_sdram_addr_7_iv_i[11] ), .TS(\cmd_fsm_states_i_RNIT1HF[5] ), 
    .CE(i_rst_c), .CLK(i_clk_c));
  o_data_valid o_data_valid_I( .IOLDO(o_data_valid_c), 
    .o_data_valid(o_data_valid));
  o_data_valid_MGIOL o_data_valid_MGIOL( .IOLDO(o_data_valid_c), 
    .OPOS(\U0.N_488_i ), .CLK(i_clk_c));
  i_data_0_ \i_data[0]_I ( .PADDI(\i_data_c[0] ), .idata0(i_data[0]));
  i_disable_autorefresh i_disable_autorefresh_I( 
    .PADDI(i_disable_autorefresh_c), 
    .i_disable_autorefresh(i_disable_autorefresh));
  i_power_down i_power_down_I( .PADDI(i_power_down_c), 
    .i_power_down(i_power_down));
  i_power_down_MGIOL i_power_down_MGIOL( .DI(i_power_down_c), .CLK(i_clk_c), 
    .IN(power_down_reg1_i));
  i_precharge_req i_precharge_req_I( .PADDI(i_precharge_req_c), 
    .i_precharge_req(i_precharge_req));
  i_disable_precharge i_disable_precharge_I( .PADDI(i_disable_precharge_c), 
    .i_disable_precharge(i_disable_precharge));
  i_disable_active i_disable_active_I( .PADDI(i_disable_active_c), 
    .i_disable_active(i_disable_active));
  i_burststop_req i_burststop_req_I( .PADDI(i_burststop_req_c), 
    .i_burststop_req(i_burststop_req));
  i_loadmod_req i_loadmod_req_I( .PADDI(i_loadmod_req_c), 
    .i_loadmod_req(i_loadmod_req));
  i_selfrefresh_req i_selfrefresh_req_I( .PADDI(i_selfrefresh_req_c), 
    .i_selfrefresh_req(i_selfrefresh_req));
  i_rwn i_rwn_I( .PADDI(i_rwn_c), .i_rwn(i_rwn));
  i_rst i_rst_I( .PADDI(i_rst_c), .i_rst(i_rst));
  i_clk i_clk_I( .PADDI(i_clk_c), .i_clk(i_clk));
  i_adv i_adv_I( .PADDI(i_adv_c), .i_adv(i_adv));
  i_addr_21_ \i_addr[21]_I ( .PADDI(\i_addr_c[21] ), .iaddr21(i_addr[21]));
  i_addr_20_ \i_addr[20]_I ( .PADDI(\i_addr_c[20] ), .iaddr20(i_addr[20]));
  i_addr_19_ \i_addr[19]_I ( .PADDI(\i_addr_c[19] ), .iaddr19(i_addr[19]));
  i_addr_18_ \i_addr[18]_I ( .PADDI(\i_addr_c[18] ), .iaddr18(i_addr[18]));
  i_addr_17_ \i_addr[17]_I ( .PADDI(\i_addr_c[17] ), .iaddr17(i_addr[17]));
  i_addr_16_ \i_addr[16]_I ( .PADDI(\i_addr_c[16] ), .iaddr16(i_addr[16]));
  i_addr_15_ \i_addr[15]_I ( .PADDI(\i_addr_c[15] ), .iaddr15(i_addr[15]));
  i_addr_14_ \i_addr[14]_I ( .PADDI(\i_addr_c[14] ), .iaddr14(i_addr[14]));
  i_addr_13_ \i_addr[13]_I ( .PADDI(\i_addr_c[13] ), .iaddr13(i_addr[13]));
  i_addr_12_ \i_addr[12]_I ( .PADDI(\i_addr_c[12] ), .iaddr12(i_addr[12]));
  i_addr_11_ \i_addr[11]_I ( .PADDI(\i_addr_c[11] ), .iaddr11(i_addr[11]));
  i_addr_10_ \i_addr[10]_I ( .PADDI(\i_addr_c[10] ), .iaddr10(i_addr[10]));
  i_addr_9_ \i_addr[9]_I ( .PADDI(\i_addr_c[9] ), .iaddr9(i_addr[9]));
  i_addr_8_ \i_addr[8]_I ( .PADDI(\i_addr_c[8] ), .iaddr8(i_addr[8]));
  i_addr_7_ \i_addr[7]_I ( .PADDI(\i_addr_c[7] ), .iaddr7(i_addr[7]));
  i_addr_6_ \i_addr[6]_I ( .PADDI(\i_addr_c[6] ), .iaddr6(i_addr[6]));
  i_addr_5_ \i_addr[5]_I ( .PADDI(\i_addr_c[5] ), .iaddr5(i_addr[5]));
  i_addr_4_ \i_addr[4]_I ( .PADDI(\i_addr_c[4] ), .iaddr4(i_addr[4]));
  i_addr_3_ \i_addr[3]_I ( .PADDI(\i_addr_c[3] ), .iaddr3(i_addr[3]));
  i_addr_2_ \i_addr[2]_I ( .PADDI(\i_addr_c[2] ), .iaddr2(i_addr[2]));
  i_addr_1_ \i_addr[1]_I ( .PADDI(\i_addr_c[1] ), .iaddr1(i_addr[1]));
  i_addr_0_ \i_addr[0]_I ( .PADDI(\i_addr_c[0] ), .iaddr0(i_addr[0]));
  io_sdram_dq_15_ \io_sdram_dq[15]_I ( .PADDI(\io_sdram_dq_in[15] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[15] ), 
    .iosdramdq15(io_sdram_dq[15]));
  io_sdram_dq_14_ \io_sdram_dq[14]_I ( .PADDI(\io_sdram_dq_in[14] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[14] ), 
    .iosdramdq14(io_sdram_dq[14]));
  io_sdram_dq_13_ \io_sdram_dq[13]_I ( .PADDI(\io_sdram_dq_in[13] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[13] ), 
    .iosdramdq13(io_sdram_dq[13]));
  io_sdram_dq_12_ \io_sdram_dq[12]_I ( .PADDI(\io_sdram_dq_in[12] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[12] ), 
    .iosdramdq12(io_sdram_dq[12]));
  io_sdram_dq_11_ \io_sdram_dq[11]_I ( .PADDI(\io_sdram_dq_in[11] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[11] ), 
    .iosdramdq11(io_sdram_dq[11]));
  io_sdram_dq_10_ \io_sdram_dq[10]_I ( .PADDI(\io_sdram_dq_in[10] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[10] ), 
    .iosdramdq10(io_sdram_dq[10]));
  io_sdram_dq_9_ \io_sdram_dq[9]_I ( .PADDI(\io_sdram_dq_in[9] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[9] ), 
    .iosdramdq9(io_sdram_dq[9]));
  io_sdram_dq_8_ \io_sdram_dq[8]_I ( .PADDI(\io_sdram_dq_in[8] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[8] ), 
    .iosdramdq8(io_sdram_dq[8]));
  io_sdram_dq_7_ \io_sdram_dq[7]_I ( .PADDI(\io_sdram_dq_in[7] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[7] ), 
    .iosdramdq7(io_sdram_dq[7]));
  io_sdram_dq_6_ \io_sdram_dq[6]_I ( .PADDI(\io_sdram_dq_in[6] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[6] ), 
    .iosdramdq6(io_sdram_dq[6]));
  io_sdram_dq_5_ \io_sdram_dq[5]_I ( .PADDI(\io_sdram_dq_in[5] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[5] ), 
    .iosdramdq5(io_sdram_dq[5]));
  io_sdram_dq_4_ \io_sdram_dq[4]_I ( .PADDI(\io_sdram_dq_in[4] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[4] ), 
    .iosdramdq4(io_sdram_dq[4]));
  io_sdram_dq_3_ \io_sdram_dq[3]_I ( .PADDI(\io_sdram_dq_in[3] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[3] ), 
    .iosdramdq3(io_sdram_dq[3]));
  io_sdram_dq_2_ \io_sdram_dq[2]_I ( .PADDI(\io_sdram_dq_in[2] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[2] ), 
    .iosdramdq2(io_sdram_dq[2]));
  io_sdram_dq_1_ \io_sdram_dq[1]_I ( .PADDI(\io_sdram_dq_in[1] ), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(\i_data_c[1] ), 
    .iosdramdq1(io_sdram_dq[1]));
  o_data_31_ \o_data[31]_I ( .PADDO(GND), .odata31(o_data[31]));
  o_data_30_ \o_data[30]_I ( .PADDO(GND), .odata30(o_data[30]));
  o_data_29_ \o_data[29]_I ( .PADDO(GND), .odata29(o_data[29]));
  o_data_28_ \o_data[28]_I ( .PADDO(GND), .odata28(o_data[28]));
  o_data_27_ \o_data[27]_I ( .PADDO(GND), .odata27(o_data[27]));
  o_data_26_ \o_data[26]_I ( .PADDO(GND), .odata26(o_data[26]));
  o_data_25_ \o_data[25]_I ( .PADDO(GND), .odata25(o_data[25]));
  o_data_24_ \o_data[24]_I ( .PADDO(GND), .odata24(o_data[24]));
  o_data_23_ \o_data[23]_I ( .PADDO(GND), .odata23(o_data[23]));
  o_data_22_ \o_data[22]_I ( .PADDO(GND), .odata22(o_data[22]));
  o_data_21_ \o_data[21]_I ( .PADDO(GND), .odata21(o_data[21]));
  o_data_20_ \o_data[20]_I ( .PADDO(GND), .odata20(o_data[20]));
  o_data_19_ \o_data[19]_I ( .PADDO(GND), .odata19(o_data[19]));
  o_data_18_ \o_data[18]_I ( .PADDO(GND), .odata18(o_data[18]));
  o_data_17_ \o_data[17]_I ( .PADDO(GND), .odata17(o_data[17]));
  o_data_16_ \o_data[16]_I ( .PADDO(GND), .odata16(o_data[16]));
  o_data_15_ \o_data[15]_I ( .IOLDO(\o_data_c[15] ), .odata15(o_data[15]));
  o_data_15__MGIOL \o_data[15]_MGIOL ( .IOLDO(\o_data_c[15] ), 
    .OPOS(\io_sdram_dq_in[15] ), .CLK(i_clk_c));
  o_data_14_ \o_data[14]_I ( .IOLDO(\o_data_c[14] ), .odata14(o_data[14]));
  o_data_14__MGIOL \o_data[14]_MGIOL ( .IOLDO(\o_data_c[14] ), 
    .OPOS(\io_sdram_dq_in[14] ), .CLK(i_clk_c));
  o_data_13_ \o_data[13]_I ( .IOLDO(\o_data_c[13] ), .odata13(o_data[13]));
  o_data_13__MGIOL \o_data[13]_MGIOL ( .IOLDO(\o_data_c[13] ), 
    .OPOS(\io_sdram_dq_in[13] ), .CLK(i_clk_c));
  o_data_12_ \o_data[12]_I ( .IOLDO(\o_data_c[12] ), .odata12(o_data[12]));
  o_data_12__MGIOL \o_data[12]_MGIOL ( .IOLDO(\o_data_c[12] ), 
    .OPOS(\io_sdram_dq_in[12] ), .CLK(i_clk_c));
  o_data_11_ \o_data[11]_I ( .IOLDO(\o_data_c[11] ), .odata11(o_data[11]));
  o_data_11__MGIOL \o_data[11]_MGIOL ( .IOLDO(\o_data_c[11] ), 
    .OPOS(\io_sdram_dq_in[11] ), .CLK(i_clk_c));
  o_data_10_ \o_data[10]_I ( .IOLDO(\o_data_c[10] ), .odata10(o_data[10]));
  o_data_10__MGIOL \o_data[10]_MGIOL ( .IOLDO(\o_data_c[10] ), 
    .OPOS(\io_sdram_dq_in[10] ), .CLK(i_clk_c));
  o_data_9_ \o_data[9]_I ( .IOLDO(\o_data_c[9] ), .odata9(o_data[9]));
  o_data_9__MGIOL \o_data[9]_MGIOL ( .IOLDO(\o_data_c[9] ), 
    .OPOS(\io_sdram_dq_in[9] ), .CLK(i_clk_c));
  o_data_8_ \o_data[8]_I ( .IOLDO(\o_data_c[8] ), .odata8(o_data[8]));
  o_data_8__MGIOL \o_data[8]_MGIOL ( .IOLDO(\o_data_c[8] ), 
    .OPOS(\io_sdram_dq_in[8] ), .CLK(i_clk_c));
  o_data_7_ \o_data[7]_I ( .IOLDO(\o_data_c[7] ), .odata7(o_data[7]));
  o_data_7__MGIOL \o_data[7]_MGIOL ( .IOLDO(\o_data_c[7] ), 
    .OPOS(\io_sdram_dq_in[7] ), .CLK(i_clk_c));
  o_data_6_ \o_data[6]_I ( .IOLDO(\o_data_c[6] ), .odata6(o_data[6]));
  o_data_6__MGIOL \o_data[6]_MGIOL ( .IOLDO(\o_data_c[6] ), 
    .OPOS(\io_sdram_dq_in[6] ), .CLK(i_clk_c));
  o_data_5_ \o_data[5]_I ( .IOLDO(\o_data_c[5] ), .odata5(o_data[5]));
  o_data_5__MGIOL \o_data[5]_MGIOL ( .IOLDO(\o_data_c[5] ), 
    .OPOS(\io_sdram_dq_in[5] ), .CLK(i_clk_c));
  o_data_4_ \o_data[4]_I ( .IOLDO(\o_data_c[4] ), .odata4(o_data[4]));
  o_data_4__MGIOL \o_data[4]_MGIOL ( .IOLDO(\o_data_c[4] ), 
    .OPOS(\io_sdram_dq_in[4] ), .CLK(i_clk_c));
  o_data_3_ \o_data[3]_I ( .IOLDO(\o_data_c[3] ), .odata3(o_data[3]));
  o_data_3__MGIOL \o_data[3]_MGIOL ( .IOLDO(\o_data_c[3] ), 
    .OPOS(\io_sdram_dq_in[3] ), .CLK(i_clk_c));
  o_data_2_ \o_data[2]_I ( .IOLDO(\o_data_c[2] ), .odata2(o_data[2]));
  o_data_2__MGIOL \o_data[2]_MGIOL ( .IOLDO(\o_data_c[2] ), 
    .OPOS(\io_sdram_dq_in[2] ), .CLK(i_clk_c));
  o_data_1_ \o_data[1]_I ( .IOLDO(\o_data_c[1] ), .odata1(o_data[1]));
  o_data_1__MGIOL \o_data[1]_MGIOL ( .IOLDO(\o_data_c[1] ), 
    .OPOS(\io_sdram_dq_in[1] ), .CLK(i_clk_c));
  o_data_0_ \o_data[0]_I ( .IOLDO(\o_data_c[0] ), .odata0(o_data[0]));
  o_data_0__MGIOL \o_data[0]_MGIOL ( .IOLDO(\o_data_c[0] ), 
    .OPOS(\io_sdram_dq_in[0] ), .CLK(i_clk_c));
  i_data_15_ \i_data[15]_I ( .PADDI(\i_data_c[15] ), .idata15(i_data[15]));
  i_data_14_ \i_data[14]_I ( .PADDI(\i_data_c[14] ), .idata14(i_data[14]));
  i_data_13_ \i_data[13]_I ( .PADDI(\i_data_c[13] ), .idata13(i_data[13]));
  i_data_12_ \i_data[12]_I ( .PADDI(\i_data_c[12] ), .idata12(i_data[12]));
  i_data_11_ \i_data[11]_I ( .PADDI(\i_data_c[11] ), .idata11(i_data[11]));
  i_data_10_ \i_data[10]_I ( .PADDI(\i_data_c[10] ), .idata10(i_data[10]));
  i_data_9_ \i_data[9]_I ( .PADDI(\i_data_c[9] ), .idata9(i_data[9]));
  i_data_8_ \i_data[8]_I ( .PADDI(\i_data_c[8] ), .idata8(i_data[8]));
  i_data_7_ \i_data[7]_I ( .PADDI(\i_data_c[7] ), .idata7(i_data[7]));
  i_data_6_ \i_data[6]_I ( .PADDI(\i_data_c[6] ), .idata6(i_data[6]));
  i_data_5_ \i_data[5]_I ( .PADDI(\i_data_c[5] ), .idata5(i_data[5]));
  i_data_4_ \i_data[4]_I ( .PADDI(\i_data_c[4] ), .idata4(i_data[4]));
  i_data_3_ \i_data[3]_I ( .PADDI(\i_data_c[3] ), .idata3(i_data[3]));
  i_data_2_ \i_data[2]_I ( .PADDI(\i_data_c[2] ), .idata2(i_data[2]));
  i_data_1_ \i_data[1]_I ( .PADDI(\i_data_c[1] ), .idata1(i_data[1]));
  o_read_done o_read_done_I( .PADDO(o_read_done_c), .o_read_done(o_read_done));
  o_write_done o_write_done_I( .PADDO(o_write_done_c), 
    .o_write_done(o_write_done));
  o_sdram_clk o_sdram_clk_I( .PADDO(o_sdram_clk_c), .o_sdram_clk(o_sdram_clk));
  o_sdram_wen o_sdram_wen_I( .IOLDO(o_sdram_wen_c), .o_sdram_wen(o_sdram_wen));
  o_sdram_wen_MGIOL o_sdram_wen_MGIOL( .IOLDO(o_sdram_wen_c), .OPOS(N_13_i), 
    .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_rasn o_sdram_rasn_I( .IOLDO(o_sdram_rasn_c), 
    .o_sdram_rasn(o_sdram_rasn));
  o_sdram_rasn_MGIOL o_sdram_rasn_MGIOL( .IOLDO(o_sdram_rasn_c), 
    .OPOS(\U0.o_sdram_rasn_3 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_dqm_3_ \o_sdram_dqm[3]_I ( .PADDO(GND), .osdramdqm3(o_sdram_dqm[3]));
  o_sdram_dqm_2_ \o_sdram_dqm[2]_I ( .PADDO(GND), .osdramdqm2(o_sdram_dqm[2]));
  o_sdram_dqm_1_ \o_sdram_dqm[1]_I ( .PADDO(\o_sdram_dqm_c[1] ), 
    .osdramdqm1(o_sdram_dqm[1]));
  o_sdram_dqm_0_ \o_sdram_dqm[0]_I ( .PADDO(\o_sdram_dqm_c[1] ), 
    .osdramdqm0(o_sdram_dqm[0]));
  o_sdram_csn o_sdram_csn_I( .PADDO(GND), .o_sdram_csn(o_sdram_csn));
  o_sdram_cke o_sdram_cke_I( .IOLDO(o_sdram_cke_c), .o_sdram_cke(o_sdram_cke));
  o_sdram_cke_MGIOL o_sdram_cke_MGIOL( .IOLDO(o_sdram_cke_c), 
    .OPOS(\U0.o_sdram_cke_3 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_casn o_sdram_casn_I( .IOLDO(o_sdram_casn_c), 
    .o_sdram_casn(o_sdram_casn));
  o_sdram_casn_MGIOL o_sdram_casn_MGIOL( .IOLDO(o_sdram_casn_c), 
    .OPOS(\U0.o_sdram_casn_3 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_blkaddr_1_ \o_sdram_blkaddr[1]_I ( .IOLDO(\o_sdram_blkaddr_c[1] ), 
    .osdramblkaddr1(o_sdram_blkaddr[1]));
  o_sdram_blkaddr_1__MGIOL \o_sdram_blkaddr[1]_MGIOL ( 
    .IOLDO(\o_sdram_blkaddr_c[1] ), .OPOS(N_97), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_blkaddr_0_ \o_sdram_blkaddr[0]_I ( .IOLDO(\o_sdram_blkaddr_c[0] ), 
    .osdramblkaddr0(o_sdram_blkaddr[0]));
  o_sdram_blkaddr_0__MGIOL \o_sdram_blkaddr[0]_MGIOL ( 
    .IOLDO(\o_sdram_blkaddr_c[0] ), .OPOS(N_96), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_12_ \o_sdram_addr[12]_I ( .PADDO(GND), 
    .osdramaddr12(o_sdram_addr[12]));
  o_sdram_addr_10_ \o_sdram_addr[10]_I ( .IOLDO(\o_sdram_addr_c[10] ), 
    .osdramaddr10(o_sdram_addr[10]));
  o_sdram_addr_10__MGIOL \o_sdram_addr[10]_MGIOL ( 
    .IOLDO(\o_sdram_addr_c[10] ), .OPOS(N_19_i), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_9_ \o_sdram_addr[9]_I ( .IOLDO(\o_sdram_addr_c[9] ), 
    .osdramaddr9(o_sdram_addr[9]));
  o_sdram_addr_9__MGIOL \o_sdram_addr[9]_MGIOL ( .IOLDO(\o_sdram_addr_c[9] ), 
    .OPOS(\U0.o_sdram_addr_7_iv_i[9] ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_8_ \o_sdram_addr[8]_I ( .IOLDO(\o_sdram_addr_c[8] ), 
    .osdramaddr8(o_sdram_addr[8]));
  o_sdram_addr_8__MGIOL \o_sdram_addr[8]_MGIOL ( .IOLDO(\o_sdram_addr_c[8] ), 
    .OPOS(\U0.o_sdram_addr_7_iv_i[8] ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_7_ \o_sdram_addr[7]_I ( .IOLDO(\o_sdram_addr_c[7] ), 
    .osdramaddr7(o_sdram_addr[7]));
  o_sdram_addr_7__MGIOL \o_sdram_addr[7]_MGIOL ( .IOLDO(\o_sdram_addr_c[7] ), 
    .OPOS(\U0.o_sdram_addr_7_iv_i[7] ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_6_ \o_sdram_addr[6]_I ( .IOLDO(\o_sdram_addr_c[6] ), 
    .osdramaddr6(o_sdram_addr[6]));
  o_sdram_addr_6__MGIOL \o_sdram_addr[6]_MGIOL ( .IOLDO(\o_sdram_addr_c[6] ), 
    .OPOS(\U0.o_sdram_addr_7_iv_i[6] ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_5_ \o_sdram_addr[5]_I ( .IOLDO(\o_sdram_addr_c[5] ), 
    .osdramaddr5(o_sdram_addr[5]));
  o_sdram_addr_5__MGIOL \o_sdram_addr[5]_MGIOL ( .IOLDO(\o_sdram_addr_c[5] ), 
    .OPOS(\U0.o_sdram_addr_7_iv_i[5] ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_4_ \o_sdram_addr[4]_I ( .IOLDO(\o_sdram_addr_c[4] ), 
    .osdramaddr4(o_sdram_addr[4]));
  o_sdram_addr_4__MGIOL \o_sdram_addr[4]_MGIOL ( .IOLDO(\o_sdram_addr_c[4] ), 
    .OPOS(\U0.o_sdram_addr_7_iv_i[4] ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_3_ \o_sdram_addr[3]_I ( .IOLDO(\o_sdram_addr_c[3] ), 
    .osdramaddr3(o_sdram_addr[3]));
  o_sdram_addr_3__MGIOL \o_sdram_addr[3]_MGIOL ( .IOLDO(\o_sdram_addr_c[3] ), 
    .OPOS(\U0.o_sdram_addr_7_iv_i[3] ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_2_ \o_sdram_addr[2]_I ( .IOLDO(\o_sdram_addr_c[2] ), 
    .osdramaddr2(o_sdram_addr[2]));
  o_sdram_addr_2__MGIOL \o_sdram_addr[2]_MGIOL ( .IOLDO(\o_sdram_addr_c[2] ), 
    .OPOS(\U0.o_sdram_addr_7_iv_i[2] ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_1_ \o_sdram_addr[1]_I ( .IOLDO(\o_sdram_addr_c[1] ), 
    .osdramaddr1(o_sdram_addr[1]));
  o_sdram_addr_1__MGIOL \o_sdram_addr[1]_MGIOL ( .IOLDO(\o_sdram_addr_c[1] ), 
    .OPOS(\U0.o_sdram_addr_7_iv_i[1] ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_0_ \o_sdram_addr[0]_I ( .IOLDO(\o_sdram_addr_c[0] ), 
    .osdramaddr0(o_sdram_addr[0]));
  o_sdram_addr_0__MGIOL \o_sdram_addr[0]_MGIOL ( .IOLDO(\o_sdram_addr_c[0] ), 
    .OPOS(\U0.o_sdram_addr_7_iv_i[0] ), .CE(i_rst_c), .CLK(i_clk_c));
  o_ack o_ack_I( .IOLDO(o_ack_c), .o_ack(o_ack));
  o_ack_MGIOL o_ack_MGIOL( .IOLDO(o_ack_c), .OPOS(\U0.N_489_i ), 
    .CE(\U0.N_494_i ), .CLK(i_clk_c));
  o_init_done o_init_done_I( .PADDO(o_init_done_c), .o_init_done(o_init_done));
  o_busy o_busy_I( .PADDO(o_busy_c), .o_busy(o_busy));
  o_data_req o_data_req_I( .PADDO(o_data_req_c), .o_data_req(o_data_req));
  GSR_INST GSR_INST( .GSRNET(~i_rst_c));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
endmodule

module U0_SLICE_0 ( input B1, A1, A0, DI1, CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \U0/read_req_cnt_i[0] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu2 \U0/read_req_cnt_i_cry_0[0] ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h500C;
  defparam inst1.INIT1 = 16'hF00D;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module U0_SLICE_1 ( input B0, A0, DI0, CE, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \U0/read_req_cnt_i[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20001 \U0/read_req_cnt_i_s_0[9] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(), 
    .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h500D;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module U0_SLICE_2 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \U0/read_req_cnt_i[8] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \U0/read_req_cnt_i[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \U0/read_req_cnt_i_cry_0[7] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF00B;
  defparam inst1.INIT1 = 16'hF00B;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module U0_SLICE_3 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \U0/read_req_cnt_i[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \U0/read_req_cnt_i[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \U0/read_req_cnt_i_cry_0[5] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20003 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF00D;
  defparam inst1.INIT1 = 16'hF00D;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module U0_SLICE_4 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \U0/read_req_cnt_i[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \U0/read_req_cnt_i[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \U0/read_req_cnt_i_cry_0[3] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module U0_SLICE_5 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \U0/read_req_cnt_i[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \U0/read_req_cnt_i[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \U0/read_req_cnt_i_cry_0[1] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module U0_SLICE_7 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut4 \U0/clk_count_i_RNO[1] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40004 \U0/clk_count_i_RNO[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0005 \U0/clk_count_i[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0005 \U0/clk_count_i[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0006) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40004 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0015) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0005 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module U0_SLICE_8 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40006 \U0/clk_count_i_RNO[3] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40007 \U0/clk_count_i_RNO[2] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0005 \U0/clk_count_i[3] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0005 \U0/clk_count_i[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40006 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40007 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF700) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_9 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40008 \U0/cmd_fsm_states_i_RNO[1] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40009 \U0/cmd_fsm_states_i_ns_0[0] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0010 \U0/cmd_fsm_states_i[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \U0/cmd_fsm_states_i[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40008 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE0A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40009 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0010 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module U0_SLICE_10 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40011 \U0/cmd_fsm_states_i_ns_a2_2_a2[3] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40012 \U0/cmd_fsm_states_i_ns_0[2] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0010 \U0/cmd_fsm_states_i[3] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U0/cmd_fsm_states_i[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40011 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40012 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_11 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40013 \U0/cmd_fsm_states_i_ns_0[5] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40014 \U0/cmd_fsm_states_i_RNO[4] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0010 \U0/cmd_fsm_states_i[5] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U0/cmd_fsm_states_i[4] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40013 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40014 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00FE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_12 ( input D1, C1, A1, D0, A0, DI1, DI0, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40015 \U0/cmd_fsm_states_i_ns_i_i[7] ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \U0/cmd_fsm_states_i_ns_a2_0_a2[6] ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(D0), .Z(F0));
  vmuxregsre0010 \U0/cmd_fsm_states_i[7] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U0/cmd_fsm_states_i[6] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40015 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0FA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40016 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_13 ( input D1, C1, B1, A1, D0, C0, B0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40017 \U0/cmd_fsm_states_i_RNO[9] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40018 \U0/cmd_fsm_states_i_ns_a2_1_a2[8] ( .A(GNDI), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U0/cmd_fsm_states_i[9] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U0/cmd_fsm_states_i[8] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40017 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h888C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40018 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_14 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 \U0/cmd_fsm_states_i_ns_0[11] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40020 \U0/cmd_fsm_states_i_ns_a2_0_a2[10] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0010 \U0/cmd_fsm_states_i[11] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U0/cmd_fsm_states_i[10] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40019 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDCCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40020 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_15 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40021 \U0/cmd_fsm_states_i_RNO[13] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 \U0/cmd_fsm_states_i_ns_i_i[12] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0010 \U0/cmd_fsm_states_i[13] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U0/cmd_fsm_states_i[12] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40021 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCECE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40022 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCECE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_16 ( input C1, B1, A1, D0, B0, DI1, DI0, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40022 \U0/cmd_fsm_states_i_ns_i_i[15] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 \U0/cmd_fsm_states_i_ns_a2_0_a2[14] ( .A(GNDI), .B(B0), .C(GNDI), 
    .D(D0), .Z(F0));
  vmuxregsre0010 \U0/cmd_fsm_states_i[15] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U0/cmd_fsm_states_i[14] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40023 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_17 ( input D1, C1, B1, A1, D0, B0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40024 \U0/cmd_fsm_states_i_ns_0[17] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40025 \U0/cmd_fsm_states_i_RNO[16] ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U0/cmd_fsm_states_i[17] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U0/cmd_fsm_states_i[16] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0F8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h22EE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_18 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40022 \U0/cmd_fsm_states_i_ns_i_i[19] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40026 \U0/cmd_fsm_states_i_RNO[18] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0010 \U0/cmd_fsm_states_i[19] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U0/cmd_fsm_states_i[18] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1011) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_19 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40027 \U0/cmd_fsm_states_i_RNO[21] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40028 \U0/cmd_fsm_states_i_RNO[20] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0010 \U0/cmd_fsm_states_i[21] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U0/cmd_fsm_states_i[20] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40027 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0F2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_20 ( input C1, B1, B0, A0, DI1, DI0, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40029 \U0/init_fsm_states_i_ns_i_i_a2[1] ( .A(GNDI), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40030 \U0/init_fsm_states_i_0[0] ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0010 \U0/init_fsm_states_i[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \U0/init_fsm_states_i[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40030 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_21 ( input D1, C1, B1, A1, D0, C0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40031 \U0/init_fsm_states_i_RNO[3] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40032 \U0/init_fsm_states_i_ns_i_a2_i[2] ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U0/init_fsm_states_i[3] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U0/init_fsm_states_i[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40031 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_22 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40033 \U0/init_fsm_states_i_RNO[5] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40027 \U0/init_fsm_states_i_ns_i_i[4] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0010 \U0/init_fsm_states_i[5] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U0/init_fsm_states_i[4] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40033 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_23 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40034 \U0/init_fsm_states_i_RNO[7] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40035 \U0/init_fsm_states_i_ns_i_i[6] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0010 \U0/init_fsm_states_i[7] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U0/init_fsm_states_i[6] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40034 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40035 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCF8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_24 ( input D1, B1, A1, D0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40036 \U0/init_fsm_states_i_RNO[9] ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40037 \U0/init_fsm_states_i_ns_i_a2_i[8] ( .A(A0), .B(B0), .C(GNDI), 
    .D(D0), .Z(F0));
  vmuxregsre0010 \U0/init_fsm_states_i[9] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U0/init_fsm_states_i[8] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40037 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF22) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_25 ( input D1, C1, B1, D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40038 \U0/un1_read_data_req_i_1_sqmuxa_0_0 ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40039 \U0/read_data_req_i_RNO ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0010 \U0/read_data_req_i ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40038 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h03FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40039 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_26 ( input D1, C1, B1, A1, D0, C0, B0, DI0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40040 \U0/cmd_fsm_states_i_ns_i_0_m2[18] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40041 \U0/read_done_i_RNO ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U0/read_done_i ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40040 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD8DD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40041 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_28 ( input D1, C1, B1, A1, D0, B0, A0, DI0, M1, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40009 \U0/clk_count_i_3_i_o2_1_2[0] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40042 \U0/read_req_cnt_rst_i_RNO ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U0/read_done_reg_i ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U0/read_req_cnt_rst_i ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40042 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_29 ( input D1, C1, D0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40043 \U0/o_sdram_addr_2_sqmuxa_i_a2_i_o2 ( .A(GNDI), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40044 \U0/cmd_fsm_states_i_i[5] ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0010 \U0/sdram_dq_en_i ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40043 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40044 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_30 ( input D1, C1, B1, A1, D0, C0, A0, DI0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40045 \U0/clk_count_i_RNO_1[3] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40046 \U0/write_done_i_RNO ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U0/write_done_i ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40045 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00D5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_32 ( input D1, C1, B1, A1, D0, C0, B0, DI0, M1, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40047 \U1/U1/lfsr_equal_3 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40048 \U1/U1/lfsr_equal ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U0/write_done_reg_i ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U1/U1/o_lfsr_64_done ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40047 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0030) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U1_U1_SLICE_33 ( input D1, C1, B1, A1, D0, C0, DI0, M1, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40049 \U1/U1/o_lfsr_64_done_RNI147F ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40050 \U1/U1/lfsr_reg_i_RNO[0] ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U1/U1/lfsr_reg_i[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U1/U1/lfsr_reg_i[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40049 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40050 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF00F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U1_U5_SLICE_36 ( input D1, A1, D0, C0, B0, A0, DI0, M1, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40051 \U1/U5/lfsr_256_equal_i_3 ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40052 \U1/U5/lfsr_reg_i_RNO[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0010 \U1/U5/lfsr_reg_i[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U1/U5/lfsr_reg_i[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40051 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0055) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40052 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9669) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U2_SLICE_40 ( input D1, B1, D0, B0, A0, DI1, DI0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40053 \U2/lfsr_reg_i_2[1] ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40054 \U2/lfsr_reg_i_2[0] ( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0010 \U2/genblk1.lfsr_reg_i[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U2/genblk1.lfsr_reg_i[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40053 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0099) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U2_SLICE_41 ( input D1, B1, D0, A0, DI1, DI0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40055 \U2/lfsr_reg_i_2[3] ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40056 \U2/lfsr_reg_i_2[2] ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0010 \U2/genblk1.lfsr_reg_i[3] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U2/genblk1.lfsr_reg_i[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3300) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U2_SLICE_43 ( input C0, A0, DI0, M1, CE, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40057 \U2/lfsr_reg_i_2[5] ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U2/genblk1.lfsr_reg_i[6] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U2/genblk1.lfsr_reg_i[5] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_44 ( input M1, M0, CE, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40058 GND( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U2/genblk1.lfsr_reg_i[8] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U2/genblk1.lfsr_reg_i[7] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40058 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_45 ( input C1, A1, C0, B0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40057 \U0/o_read_done ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40059 \U0/o_write_done ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0010 \U2/genblk1.lfsr_reg_i[10] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U2/genblk1.lfsr_reg_i[9] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3030) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_46 ( input C1, B1, A1, B0, A0, DI0, M1, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40060 \U0/o_sdram_rasn_3_0_a2_0_a2_0_2 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40061 \U0/cmd_fsm_states_i_ns_a2_0_0_a2[3] ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0010 \U1/U1/lfsr_reg_i[3] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 autorefresh_enable_i( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40060 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40061 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U1_U5_SLICE_47 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, M1, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40062 \U1/U5/lfsr_256_equal_i_4 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40063 \U1/U5/lfsr_256_equal_i ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0010 \U1/U5/lfsr_reg_i[2] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U1/U5/o_lfsr_256_done ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40062 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40063 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_48 ( input D1, C1, B1, A1, D0, C0, A0, DI0, M1, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40064 \U0/o_data_reqlto9_4 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40065 \U0/o_autoref_ack_RNIDR1O ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U1/U1/lfsr_reg_i[4] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 latch_ref_req_i( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40064 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40065 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5F00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_49 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40066 \U0/cmd_fsm_states_i_ns_0_a2_3_2[0] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40067 \U0/o_busy_RNO ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0010 \U0/o_busy ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40066 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40067 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFBF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_50 ( input D1, B1, A1, C0, A0, M0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40068 \U0/cmd_fsm_states_i_RNIFDKD[14] ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40069 o_sdram_clk( .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0010 \U0/o_init_done ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40068 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40069 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_51 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, CE_NOTIN, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40070 \U0/o_sdram_rasn_3_0_a2_0_o2 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40071 \U0/sdram_dqm_i_RNO ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0005 \U0/sdram_dqm_i ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40070 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1F0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40071 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFBF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module SLICE_52 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, M1, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, M1_dly;

  lut40072 \U2/lfsr_count_match_i_6 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40073 \U2/lfsr_count_match_i ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0010 \U1/U1/lfsr_reg_i[2] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U2/genblk1.o_refresh_count_done ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40072 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40073 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_53 ( input D1, B1, D0, C0, B0, A0, DI0, M1, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40074 \U0/o_busy_RNO_0 ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40075 \U0/refresh_req_i_3_0_a2 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0010 \U1/U1/lfsr_reg_i[5] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 refresh_req_i( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40074 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF33) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40075 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_o_sdram_addr_7_u_i_2_10__SLICE_54 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, output OFX0 );
  wire   
         \U0/o_sdram_addr_7_u_i_2[10]/SLICE_54/U0/o_sdram_addr_7_u_i_2[10]/SLICE_54_K1_H1 
         , 
         \U0/o_sdram_addr_7_u_i_2[10]/SLICE_54/U0/o_sdram_addr_7_u_i_2[10]/GATE_H0 
         ;

  lut40076 \U0/o_sdram_addr_7_u_i_2[10]/SLICE_54_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\U0/o_sdram_addr_7_u_i_2[10]/SLICE_54/U0/o_sdram_addr_7_u_i_2[10]/SLICE_54_K1_H1 )
    );
  lut40077 \U0/o_sdram_addr_7_u_i_2[10]/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\U0/o_sdram_addr_7_u_i_2[10]/SLICE_54/U0/o_sdram_addr_7_u_i_2[10]/GATE_H0 )
    );
  selmux2 \U0/o_sdram_addr_7_u_i_2[10]/SLICE_54_K0K1MUX ( 
    .D0(\U0/o_sdram_addr_7_u_i_2[10]/SLICE_54/U0/o_sdram_addr_7_u_i_2[10]/GATE_H0 )
    , 
    .D1(\U0/o_sdram_addr_7_u_i_2[10]/SLICE_54/U0/o_sdram_addr_7_u_i_2[10]/SLICE_54_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40076 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3704) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40077 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h222A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module selmux2 ( input D0, D1, SD, output Z );

  MUX21 INST1( .D0(D0), .D1(D1), .SD(SD), .Z(Z));
endmodule

module U0_SLICE_55 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40078 \U0/un1_reset_clk_counter_i_0_sqmuxa_2_0_0_0 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40079 \U0/un1_reset_clk_counter_i_0_sqmuxa_2_0_0 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40078 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF8C8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40079 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF2F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_56 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40080 \U0/cmd_fsm_states_i_ns_0_0[0] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40081 \U0/cmd_fsm_states_i_ns_0_2[0] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40080 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7530) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40081 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_57 ( input D1, C1, B1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40082 \U0/cmd_fsm_states_i_ns_0_a2_0[0] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40083 \U0/cmd_fsm_states_i_ns_0_o2_1[0] ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40082 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0E04) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40083 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_58 ( input D1, C1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40084 \U0/o_sdram_addr_7_iv_i[7] ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40085 \U0/cmd_fsm_states_i_RNIT1HF[5] ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40084 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0005) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40085 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_59 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40086 \U0/o_sdram_addr_7_iv_i[11] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40087 \U0/o_sdram_addr_7_iv_i_RNO[11] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40086 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h000B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40087 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_60 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40088 \U0/o_sdram_blkaddr_6_iv_i_a2[0] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40089 \U0/cmd_fsm_states_i_RNITB2K[5] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40088 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0504) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40089 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F1F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_61 ( input D1, C1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40090 \U0/cmd_fsm_states_i_ns_i_0_o2[18] ( .A(GNDI), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40091 \U0/cmd_fsm_states_i_ns_0_a2_4[0] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40090 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40091 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_62 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40092 \U0/cmd_fsm_states_i_ns_0_4[0] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40093 \U0/cmd_fsm_states_i_ns_i_0_a2_0[18] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40092 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF2F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40093 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_63 ( input D1, C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40085 \U0/cmd_fsm_states_i_ns_0_a2[0] ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40094 \U0/cmd_fsm_states_i31_0_a2_1_a3_0_a2 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40094 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_64 ( input D1, C1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40043 \U0/clk_count_i_3_i_o2[3] ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40095 \U0/cmd_fsm_states_i_ns_0_a2[11] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40095 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFD00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_65 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40096 \U0/o_sdram_addr_7_u_i_a2_3[10] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40097 \U0/o_sdram_addr_7_u_i_a2_3_RNICM221[10] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40096 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40097 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_66 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40098 \U0/clk_count_i_3_i_o2_0[0] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40099 \U0/clk_count_i_3_i_1[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0010 \U1/U5/lfsr_reg_i[4] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U1/U5/lfsr_reg_i[3] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40098 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40099 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAABA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_67 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40100 \U0/o_sdram_addr_7_iv_0_a2_2[1] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40101 \U0/o_sdram_addr_7_iv_i[5] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40100 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAA8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40101 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCF45) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_68 ( input D1, C1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40102 \U0/o_sdram_addr_7_iv_0_a2_1[1] ( .A(GNDI), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40103 \U0/o_sdram_addr_7_iv_i[1] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40102 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40103 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAF23) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_69 ( input D1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40055 \U0/o_sdram_addr_7_iv_0_a2[6] ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40104 \U0/o_sdram_addr_7_iv_i[6] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40104 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0045) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_70 ( input D1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40055 \U0/o_sdram_addr_7_iv_0_a2[4] ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40105 \U0/o_sdram_addr_7_iv_i[4] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40105 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0405) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_71 ( input D1, C1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40106 \U0/o_sdram_addr_7_iv_0_a2[3] ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40105 \U0/o_sdram_addr_7_iv_i[3] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40106 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_72 ( input D1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40107 \U0/o_sdram_addr_7_iv_0_a2[2] ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40108 \U0/o_sdram_addr_7_iv_i[2] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40107 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5500) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40108 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h000B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_73 ( input D1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40053 \U0/o_sdram_addr_7_iv_0_a2[0] ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40108 \U0/o_sdram_addr_7_iv_i[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module U0_SLICE_74 ( input C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40109 \U0/un1_o_busy20_i_a2_2_a2_0 ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40110 \U0/cmd_fsm_states_i_ns_0_a2_0_1[5] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40109 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0303) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40110 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_75 ( input D1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40111 \U0/o_sdram_casn_6_sqmuxa_0_a2 ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40112 \U0/o_sdram_wen_3_0_i_a2_RNII32J ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40111 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40112 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_76 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40080 \U0/o_sdram_addr_7_iv_0_0[9] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40113 \U0/o_sdram_addr_7_iv_i[9] ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40113 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0003) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_77 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40114 \U0/o_sdram_addr_7_iv_0_0[8] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40113 \U0/o_sdram_addr_7_iv_i[8] ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40114 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h50DC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_78 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40115 \U0/clk_count_i_RNO_0[2] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40116 \U0/clk_count_i_3_i_o2[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40115 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0078) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40116 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFC8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_79 ( input D1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40051 \U0/o_sdram_casn_3_0_0_a2_1 ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40117 \U0/o_sdram_rasn_3_0_a2_0_a2 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40117 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_80 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40118 \U0/o_sdram_casn_3_0_0_a2_0 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40119 \U0/o_sdram_casn_3_0_0_a2 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40118 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40119 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_81 ( input D1, C1, B1, A1, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40120 \U0/cmd_fsm_states_i_ns_i_o2[9] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40121 \U0/cmd_fsm_states_i_ns_a2_1_a2_0[8] ( .A(GNDI), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40120 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF7) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40121 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_82 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40122 \U0/cmd_fsm_states_i_ns_i_0_o2[4] ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40123 \U0/clk_count_i_3_i_a2[3] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0010 \U1/U5/lfsr_reg_i[6] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0010 \U1/U5/lfsr_reg_i[5] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40122 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7777) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40123 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5554) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_83 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40124 \U0/sdram_dqm_i170_i_0_a2 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40125 \U0/o_sdram_wen_3_0_i_a2 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40124 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40125 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCC4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_84 ( input D1, C1, B1, D0, C0, A0, M0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40126 \U0/clk_count_i_3_i_a2_4[0] ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40127 \U0/clk_count_i_3_i_a2_0[1] ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0010 \U1/U5/lfsr_reg_i[7] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40126 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0300) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40127 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_85 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40128 \U0/clk_count_i_3_i_o2_3_2[0] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40129 \U0/clk_count_i_3_i_o2_3[0] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40128 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40129 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_86 ( input D1, A1, D0, C0, B0, A0, M0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40051 \U0/o_data_reqlto9_3 ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40130 \U0/o_data_reqlto9 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0010 \U0/o_autoref_ack ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40130 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_87 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40131 \U0/un1_cmd_fsm_states_i_1_i_a2_0_a2_1_RNIF5QL ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40132 \U0/un1_cmd_fsm_states_i_1_i_a2_0_a2_1 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40131 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40132 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_88 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40094 \U0/cmd_fsm_states_i_ns_i_a2_0_a2_1[20] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40133 \U0/clk_count_i_RNO_0[3] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40133 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_89 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40134 \U0/cmd_fsm_states_i_ns_0_a2_1[0] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40135 \U0/cmd_fsm_states_i_ns_0_a2[17] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40134 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40135 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C08) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_90 ( input D1, B1, D0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40136 \U0/read_req_cnt_i12_i_a2 ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40068 \U0/read_data_req_i_RNIA9VS ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40136 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0033) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_91 ( input D1, C1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40137 \U0/clk_count_i_3_i_a2_0_0[0] ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40138 \U0/clk_count_i_3_i_m2[2] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40137 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40138 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAFAC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_92 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40139 \U0/o_sdram_addr_7_iv_0_0[7] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40140 \U0/o_sdram_blkaddr_6_iv_i_a2[1] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40139 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3B0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40140 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0054) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_93 ( input D1, C1, B1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40085 \U0/cmd_fsm_states_i_ns_i_a2_0_0[9] ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40141 \U0/cmd_fsm_states_i_RNI3KUA[0] ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40141 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDDDD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_94 ( input D1, C1, B1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40142 \U0/cmd_fsm_states_i_ns_i_0_m2[4] ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40143 \U0/o_sdram_cke_3_0_0_0 ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40142 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0CF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40143 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h05FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U2_SLICE_95 ( input D1, C1, B1, A1, D0, A0, M0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40006 \U2/lfsr_count_match_i_7 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40051 \U2/lfsr_count_match_i_0 ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0010 \U2/genblk1.lfsr_reg_i[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_0_ ( output PADDI, input PADDT, PADDO, inout iosdramdq0 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[0] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq0), .PADI(iosdramdq0));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq0) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq0) = (0:0:0,0:0:0);
    (iosdramdq0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq0, 0:0:0);
    $width (negedge iosdramdq0, 0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, T, output Z, PAD, input PADI );

  IBPD INST1( .I(PADI), .O(Z));
  OBZPD INST2( .I(I), .T(T), .O(PAD));
endmodule

module o_sdram_addr_11_ ( input IOLTO, IOLDO, output osdramaddr11 );

  xo2iobuf0144 \o_sdram_addr_pad[11] ( .I(IOLDO), .T(IOLTO), 
    .PAD(osdramaddr11));

  specify
    (IOLTO => osdramaddr11) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (IOLDO => osdramaddr11) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0144 ( input I, T, output PAD );

  OBZ INST5( .I(I), .T(T), .O(PAD));
endmodule

module o_sdram_addr_11__MGIOL ( output IOLDO, IOLTO, input OPOS, TS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, TS_dly, CE_dly;

  mfflsre \U0_o_sdram_addr_1io[11] ( .D0(OPOS_dly), .SP(CE_NOTIN), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));
  mfflsre \U0_o_sdram_addr_cl_iio[0] ( .D0(TS_dly), .SP(CE_NOTIN), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IOLTO));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    (CLK => IOLTO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, TS, 0:0:0, 0:0:0,,,, CLK_dly, TS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre ( input D0, SP, CK, LSR, output Q );

  FD1P3DX INST01( .D(D0), .SP(SP), .CK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module o_data_valid ( input IOLDO, output o_data_valid );
  wire   GNDI;

  xo2iobuf0145 o_data_valid_pad( .I(IOLDO), .T(GNDI), .PAD(o_data_valid));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => o_data_valid) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0145 ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module o_data_valid_MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre0146 U0_cpu_den_iio( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre0146 ( input D0, SP, CK, LSR, output Q );

  FD1P3DX INST01( .D(D0), .SP(SP), .CK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module i_data_0_ ( output PADDI, input idata0 );

  xo2iobuf0147 \i_data_pad[0] ( .Z(PADDI), .PAD(idata0));

  specify
    (idata0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata0, 0:0:0);
    $width (negedge idata0, 0:0:0);
  endspecify

endmodule

module xo2iobuf0147 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module i_disable_autorefresh ( output PADDI, input i_disable_autorefresh );

  xo2iobuf0147 i_disable_autorefresh_pad( .Z(PADDI), 
    .PAD(i_disable_autorefresh));

  specify
    (i_disable_autorefresh => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_disable_autorefresh, 0:0:0);
    $width (negedge i_disable_autorefresh, 0:0:0);
  endspecify

endmodule

module i_power_down ( output PADDI, input i_power_down );

  xo2iobuf0147 i_power_down_pad( .Z(PADDI), .PAD(i_power_down));

  specify
    (i_power_down => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_power_down, 0:0:0);
    $width (negedge i_power_down, 0:0:0);
  endspecify

endmodule

module i_power_down_MGIOL ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre power_down_reg1_i_0io( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module smuxlregsre ( input D0, SP, CK, LSR, output Q );

  IFS1P3DX INST01( .D(D0), .SP(SP), .SCLK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module i_precharge_req ( output PADDI, input i_precharge_req );

  xo2iobuf0147 i_precharge_req_pad( .Z(PADDI), .PAD(i_precharge_req));

  specify
    (i_precharge_req => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_precharge_req, 0:0:0);
    $width (negedge i_precharge_req, 0:0:0);
  endspecify

endmodule

module i_disable_precharge ( output PADDI, input i_disable_precharge );

  xo2iobuf0147 i_disable_precharge_pad( .Z(PADDI), .PAD(i_disable_precharge));

  specify
    (i_disable_precharge => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_disable_precharge, 0:0:0);
    $width (negedge i_disable_precharge, 0:0:0);
  endspecify

endmodule

module i_disable_active ( output PADDI, input i_disable_active );

  xo2iobuf0147 i_disable_active_pad( .Z(PADDI), .PAD(i_disable_active));

  specify
    (i_disable_active => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_disable_active, 0:0:0);
    $width (negedge i_disable_active, 0:0:0);
  endspecify

endmodule

module i_burststop_req ( output PADDI, input i_burststop_req );

  xo2iobuf0147 i_burststop_req_pad( .Z(PADDI), .PAD(i_burststop_req));

  specify
    (i_burststop_req => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_burststop_req, 0:0:0);
    $width (negedge i_burststop_req, 0:0:0);
  endspecify

endmodule

module i_loadmod_req ( output PADDI, input i_loadmod_req );

  xo2iobuf0147 i_loadmod_req_pad( .Z(PADDI), .PAD(i_loadmod_req));

  specify
    (i_loadmod_req => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_loadmod_req, 0:0:0);
    $width (negedge i_loadmod_req, 0:0:0);
  endspecify

endmodule

module i_selfrefresh_req ( output PADDI, input i_selfrefresh_req );

  xo2iobuf0147 i_selfrefresh_req_pad( .Z(PADDI), .PAD(i_selfrefresh_req));

  specify
    (i_selfrefresh_req => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_selfrefresh_req, 0:0:0);
    $width (negedge i_selfrefresh_req, 0:0:0);
  endspecify

endmodule

module i_rwn ( output PADDI, input i_rwn );

  xo2iobuf0147 i_rwn_pad( .Z(PADDI), .PAD(i_rwn));

  specify
    (i_rwn => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_rwn, 0:0:0);
    $width (negedge i_rwn, 0:0:0);
  endspecify

endmodule

module i_rst ( output PADDI, input i_rst );

  xo2iobuf0147 i_rst_pad( .Z(PADDI), .PAD(i_rst));

  specify
    (i_rst => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_rst, 0:0:0);
    $width (negedge i_rst, 0:0:0);
  endspecify

endmodule

module i_clk ( output PADDI, input i_clk );

  xo2iobuf0147 i_clk_pad( .Z(PADDI), .PAD(i_clk));

  specify
    (i_clk => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_clk, 0:0:0);
    $width (negedge i_clk, 0:0:0);
  endspecify

endmodule

module i_adv ( output PADDI, input i_adv );

  xo2iobuf0147 i_adv_pad( .Z(PADDI), .PAD(i_adv));

  specify
    (i_adv => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_adv, 0:0:0);
    $width (negedge i_adv, 0:0:0);
  endspecify

endmodule

module i_addr_21_ ( output PADDI, input iaddr21 );

  xo2iobuf0147 \i_addr_pad[21] ( .Z(PADDI), .PAD(iaddr21));

  specify
    (iaddr21 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr21, 0:0:0);
    $width (negedge iaddr21, 0:0:0);
  endspecify

endmodule

module i_addr_20_ ( output PADDI, input iaddr20 );

  xo2iobuf0147 \i_addr_pad[20] ( .Z(PADDI), .PAD(iaddr20));

  specify
    (iaddr20 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr20, 0:0:0);
    $width (negedge iaddr20, 0:0:0);
  endspecify

endmodule

module i_addr_19_ ( output PADDI, input iaddr19 );

  xo2iobuf0147 \i_addr_pad[19] ( .Z(PADDI), .PAD(iaddr19));

  specify
    (iaddr19 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr19, 0:0:0);
    $width (negedge iaddr19, 0:0:0);
  endspecify

endmodule

module i_addr_18_ ( output PADDI, input iaddr18 );

  xo2iobuf0147 \i_addr_pad[18] ( .Z(PADDI), .PAD(iaddr18));

  specify
    (iaddr18 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr18, 0:0:0);
    $width (negedge iaddr18, 0:0:0);
  endspecify

endmodule

module i_addr_17_ ( output PADDI, input iaddr17 );

  xo2iobuf0147 \i_addr_pad[17] ( .Z(PADDI), .PAD(iaddr17));

  specify
    (iaddr17 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr17, 0:0:0);
    $width (negedge iaddr17, 0:0:0);
  endspecify

endmodule

module i_addr_16_ ( output PADDI, input iaddr16 );

  xo2iobuf0147 \i_addr_pad[16] ( .Z(PADDI), .PAD(iaddr16));

  specify
    (iaddr16 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr16, 0:0:0);
    $width (negedge iaddr16, 0:0:0);
  endspecify

endmodule

module i_addr_15_ ( output PADDI, input iaddr15 );

  xo2iobuf0147 \i_addr_pad[15] ( .Z(PADDI), .PAD(iaddr15));

  specify
    (iaddr15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr15, 0:0:0);
    $width (negedge iaddr15, 0:0:0);
  endspecify

endmodule

module i_addr_14_ ( output PADDI, input iaddr14 );

  xo2iobuf0147 \i_addr_pad[14] ( .Z(PADDI), .PAD(iaddr14));

  specify
    (iaddr14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr14, 0:0:0);
    $width (negedge iaddr14, 0:0:0);
  endspecify

endmodule

module i_addr_13_ ( output PADDI, input iaddr13 );

  xo2iobuf0147 \i_addr_pad[13] ( .Z(PADDI), .PAD(iaddr13));

  specify
    (iaddr13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr13, 0:0:0);
    $width (negedge iaddr13, 0:0:0);
  endspecify

endmodule

module i_addr_12_ ( output PADDI, input iaddr12 );

  xo2iobuf0147 \i_addr_pad[12] ( .Z(PADDI), .PAD(iaddr12));

  specify
    (iaddr12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr12, 0:0:0);
    $width (negedge iaddr12, 0:0:0);
  endspecify

endmodule

module i_addr_11_ ( output PADDI, input iaddr11 );

  xo2iobuf0147 \i_addr_pad[11] ( .Z(PADDI), .PAD(iaddr11));

  specify
    (iaddr11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr11, 0:0:0);
    $width (negedge iaddr11, 0:0:0);
  endspecify

endmodule

module i_addr_10_ ( output PADDI, input iaddr10 );

  xo2iobuf0147 \i_addr_pad[10] ( .Z(PADDI), .PAD(iaddr10));

  specify
    (iaddr10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr10, 0:0:0);
    $width (negedge iaddr10, 0:0:0);
  endspecify

endmodule

module i_addr_9_ ( output PADDI, input iaddr9 );

  xo2iobuf0147 \i_addr_pad[9] ( .Z(PADDI), .PAD(iaddr9));

  specify
    (iaddr9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr9, 0:0:0);
    $width (negedge iaddr9, 0:0:0);
  endspecify

endmodule

module i_addr_8_ ( output PADDI, input iaddr8 );

  xo2iobuf0147 \i_addr_pad[8] ( .Z(PADDI), .PAD(iaddr8));

  specify
    (iaddr8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr8, 0:0:0);
    $width (negedge iaddr8, 0:0:0);
  endspecify

endmodule

module i_addr_7_ ( output PADDI, input iaddr7 );

  xo2iobuf0147 \i_addr_pad[7] ( .Z(PADDI), .PAD(iaddr7));

  specify
    (iaddr7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr7, 0:0:0);
    $width (negedge iaddr7, 0:0:0);
  endspecify

endmodule

module i_addr_6_ ( output PADDI, input iaddr6 );

  xo2iobuf0147 \i_addr_pad[6] ( .Z(PADDI), .PAD(iaddr6));

  specify
    (iaddr6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr6, 0:0:0);
    $width (negedge iaddr6, 0:0:0);
  endspecify

endmodule

module i_addr_5_ ( output PADDI, input iaddr5 );

  xo2iobuf0147 \i_addr_pad[5] ( .Z(PADDI), .PAD(iaddr5));

  specify
    (iaddr5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr5, 0:0:0);
    $width (negedge iaddr5, 0:0:0);
  endspecify

endmodule

module i_addr_4_ ( output PADDI, input iaddr4 );

  xo2iobuf0147 \i_addr_pad[4] ( .Z(PADDI), .PAD(iaddr4));

  specify
    (iaddr4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr4, 0:0:0);
    $width (negedge iaddr4, 0:0:0);
  endspecify

endmodule

module i_addr_3_ ( output PADDI, input iaddr3 );

  xo2iobuf0147 \i_addr_pad[3] ( .Z(PADDI), .PAD(iaddr3));

  specify
    (iaddr3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr3, 0:0:0);
    $width (negedge iaddr3, 0:0:0);
  endspecify

endmodule

module i_addr_2_ ( output PADDI, input iaddr2 );

  xo2iobuf0147 \i_addr_pad[2] ( .Z(PADDI), .PAD(iaddr2));

  specify
    (iaddr2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr2, 0:0:0);
    $width (negedge iaddr2, 0:0:0);
  endspecify

endmodule

module i_addr_1_ ( output PADDI, input iaddr1 );

  xo2iobuf0147 \i_addr_pad[1] ( .Z(PADDI), .PAD(iaddr1));

  specify
    (iaddr1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr1, 0:0:0);
    $width (negedge iaddr1, 0:0:0);
  endspecify

endmodule

module i_addr_0_ ( output PADDI, input iaddr0 );

  xo2iobuf0147 \i_addr_pad[0] ( .Z(PADDI), .PAD(iaddr0));

  specify
    (iaddr0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr0, 0:0:0);
    $width (negedge iaddr0, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_15_ ( output PADDI, input PADDT, PADDO, inout iosdramdq15 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[15] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq15), .PADI(iosdramdq15));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq15) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq15) = (0:0:0,0:0:0);
    (iosdramdq15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq15, 0:0:0);
    $width (negedge iosdramdq15, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_14_ ( output PADDI, input PADDT, PADDO, inout iosdramdq14 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[14] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq14), .PADI(iosdramdq14));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq14) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq14) = (0:0:0,0:0:0);
    (iosdramdq14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq14, 0:0:0);
    $width (negedge iosdramdq14, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_13_ ( output PADDI, input PADDT, PADDO, inout iosdramdq13 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[13] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq13), .PADI(iosdramdq13));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq13) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq13) = (0:0:0,0:0:0);
    (iosdramdq13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq13, 0:0:0);
    $width (negedge iosdramdq13, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_12_ ( output PADDI, input PADDT, PADDO, inout iosdramdq12 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[12] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq12), .PADI(iosdramdq12));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq12) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq12) = (0:0:0,0:0:0);
    (iosdramdq12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq12, 0:0:0);
    $width (negedge iosdramdq12, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_11_ ( output PADDI, input PADDT, PADDO, inout iosdramdq11 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[11] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq11), .PADI(iosdramdq11));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq11) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq11) = (0:0:0,0:0:0);
    (iosdramdq11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq11, 0:0:0);
    $width (negedge iosdramdq11, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_10_ ( output PADDI, input PADDT, PADDO, inout iosdramdq10 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[10] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq10), .PADI(iosdramdq10));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq10) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq10) = (0:0:0,0:0:0);
    (iosdramdq10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq10, 0:0:0);
    $width (negedge iosdramdq10, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_9_ ( output PADDI, input PADDT, PADDO, inout iosdramdq9 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[9] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq9), .PADI(iosdramdq9));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq9) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq9) = (0:0:0,0:0:0);
    (iosdramdq9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq9, 0:0:0);
    $width (negedge iosdramdq9, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_8_ ( output PADDI, input PADDT, PADDO, inout iosdramdq8 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[8] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq8), .PADI(iosdramdq8));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq8) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq8) = (0:0:0,0:0:0);
    (iosdramdq8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq8, 0:0:0);
    $width (negedge iosdramdq8, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_7_ ( output PADDI, input PADDT, PADDO, inout iosdramdq7 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[7] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq7), .PADI(iosdramdq7));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq7) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq7) = (0:0:0,0:0:0);
    (iosdramdq7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq7, 0:0:0);
    $width (negedge iosdramdq7, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_6_ ( output PADDI, input PADDT, PADDO, inout iosdramdq6 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[6] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq6), .PADI(iosdramdq6));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq6) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq6) = (0:0:0,0:0:0);
    (iosdramdq6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq6, 0:0:0);
    $width (negedge iosdramdq6, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_5_ ( output PADDI, input PADDT, PADDO, inout iosdramdq5 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[5] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq5), .PADI(iosdramdq5));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq5) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq5) = (0:0:0,0:0:0);
    (iosdramdq5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq5, 0:0:0);
    $width (negedge iosdramdq5, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_4_ ( output PADDI, input PADDT, PADDO, inout iosdramdq4 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[4] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq4), .PADI(iosdramdq4));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq4) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq4) = (0:0:0,0:0:0);
    (iosdramdq4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq4, 0:0:0);
    $width (negedge iosdramdq4, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_3_ ( output PADDI, input PADDT, PADDO, inout iosdramdq3 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[3] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq3), .PADI(iosdramdq3));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq3) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq3) = (0:0:0,0:0:0);
    (iosdramdq3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq3, 0:0:0);
    $width (negedge iosdramdq3, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_2_ ( output PADDI, input PADDT, PADDO, inout iosdramdq2 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[2] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq2), .PADI(iosdramdq2));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq2) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq2) = (0:0:0,0:0:0);
    (iosdramdq2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq2, 0:0:0);
    $width (negedge iosdramdq2, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_1_ ( output PADDI, input PADDT, PADDO, inout iosdramdq1 );
  wire   PADDT_NOTIN;

  xo2iobuf \io_sdram_dq_pad[1] ( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq1), .PADI(iosdramdq1));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq1) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq1) = (0:0:0,0:0:0);
    (iosdramdq1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq1, 0:0:0);
    $width (negedge iosdramdq1, 0:0:0);
  endspecify

endmodule

module o_data_31_ ( input PADDO, output odata31 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[31] ( .I(PADDO), .T(GNDI), .PAD(odata31));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata31) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_30_ ( input PADDO, output odata30 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[30] ( .I(PADDO), .T(GNDI), .PAD(odata30));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata30) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_29_ ( input PADDO, output odata29 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[29] ( .I(PADDO), .T(GNDI), .PAD(odata29));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata29) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_28_ ( input PADDO, output odata28 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[28] ( .I(PADDO), .T(GNDI), .PAD(odata28));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata28) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_27_ ( input PADDO, output odata27 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[27] ( .I(PADDO), .T(GNDI), .PAD(odata27));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata27) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_26_ ( input PADDO, output odata26 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[26] ( .I(PADDO), .T(GNDI), .PAD(odata26));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata26) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_25_ ( input PADDO, output odata25 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[25] ( .I(PADDO), .T(GNDI), .PAD(odata25));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata25) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_24_ ( input PADDO, output odata24 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[24] ( .I(PADDO), .T(GNDI), .PAD(odata24));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata24) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_23_ ( input PADDO, output odata23 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[23] ( .I(PADDO), .T(GNDI), .PAD(odata23));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata23) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_22_ ( input PADDO, output odata22 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[22] ( .I(PADDO), .T(GNDI), .PAD(odata22));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata22) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_21_ ( input PADDO, output odata21 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[21] ( .I(PADDO), .T(GNDI), .PAD(odata21));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata21) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_20_ ( input PADDO, output odata20 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[20] ( .I(PADDO), .T(GNDI), .PAD(odata20));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata20) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_19_ ( input PADDO, output odata19 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[19] ( .I(PADDO), .T(GNDI), .PAD(odata19));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata19) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_18_ ( input PADDO, output odata18 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[18] ( .I(PADDO), .T(GNDI), .PAD(odata18));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata18) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_17_ ( input PADDO, output odata17 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[17] ( .I(PADDO), .T(GNDI), .PAD(odata17));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata17) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_16_ ( input PADDO, output odata16 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[16] ( .I(PADDO), .T(GNDI), .PAD(odata16));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata16) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_15_ ( input IOLDO, output odata15 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[15] ( .I(IOLDO), .T(GNDI), .PAD(odata15));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata15) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_15__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[15] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_14_ ( input IOLDO, output odata14 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[14] ( .I(IOLDO), .T(GNDI), .PAD(odata14));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata14) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_14__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[14] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_13_ ( input IOLDO, output odata13 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[13] ( .I(IOLDO), .T(GNDI), .PAD(odata13));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata13) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_13__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[13] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_12_ ( input IOLDO, output odata12 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[12] ( .I(IOLDO), .T(GNDI), .PAD(odata12));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata12) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_12__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[12] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_11_ ( input IOLDO, output odata11 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[11] ( .I(IOLDO), .T(GNDI), .PAD(odata11));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata11) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_11__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[11] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_10_ ( input IOLDO, output odata10 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[10] ( .I(IOLDO), .T(GNDI), .PAD(odata10));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata10) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_10__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[10] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_9_ ( input IOLDO, output odata9 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[9] ( .I(IOLDO), .T(GNDI), .PAD(odata9));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata9) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_9__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[9] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_8_ ( input IOLDO, output odata8 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[8] ( .I(IOLDO), .T(GNDI), .PAD(odata8));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata8) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_8__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[8] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_7_ ( input IOLDO, output odata7 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[7] ( .I(IOLDO), .T(GNDI), .PAD(odata7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata7) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_7__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[7] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_6_ ( input IOLDO, output odata6 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[6] ( .I(IOLDO), .T(GNDI), .PAD(odata6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata6) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_6__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[6] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_5_ ( input IOLDO, output odata5 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[5] ( .I(IOLDO), .T(GNDI), .PAD(odata5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata5) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_5__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[5] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_4_ ( input IOLDO, output odata4 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[4] ( .I(IOLDO), .T(GNDI), .PAD(odata4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata4) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_4__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[4] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_3_ ( input IOLDO, output odata3 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[3] ( .I(IOLDO), .T(GNDI), .PAD(odata3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata3) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_3__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[3] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_2_ ( input IOLDO, output odata2 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[2] ( .I(IOLDO), .T(GNDI), .PAD(odata2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata2) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_2__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[2] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_1_ ( input IOLDO, output odata1 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[1] ( .I(IOLDO), .T(GNDI), .PAD(odata1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata1) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_1__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[1] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_0_ ( input IOLDO, output odata0 );
  wire   GNDI;

  xo2iobuf0145 \o_data_pad[0] ( .I(IOLDO), .T(GNDI), .PAD(odata0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata0) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_0__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0_sdram_dq_reg_iio[0] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i_data_15_ ( output PADDI, input idata15 );

  xo2iobuf0147 \i_data_pad[15] ( .Z(PADDI), .PAD(idata15));

  specify
    (idata15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata15, 0:0:0);
    $width (negedge idata15, 0:0:0);
  endspecify

endmodule

module i_data_14_ ( output PADDI, input idata14 );

  xo2iobuf0147 \i_data_pad[14] ( .Z(PADDI), .PAD(idata14));

  specify
    (idata14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata14, 0:0:0);
    $width (negedge idata14, 0:0:0);
  endspecify

endmodule

module i_data_13_ ( output PADDI, input idata13 );

  xo2iobuf0147 \i_data_pad[13] ( .Z(PADDI), .PAD(idata13));

  specify
    (idata13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata13, 0:0:0);
    $width (negedge idata13, 0:0:0);
  endspecify

endmodule

module i_data_12_ ( output PADDI, input idata12 );

  xo2iobuf0147 \i_data_pad[12] ( .Z(PADDI), .PAD(idata12));

  specify
    (idata12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata12, 0:0:0);
    $width (negedge idata12, 0:0:0);
  endspecify

endmodule

module i_data_11_ ( output PADDI, input idata11 );

  xo2iobuf0147 \i_data_pad[11] ( .Z(PADDI), .PAD(idata11));

  specify
    (idata11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata11, 0:0:0);
    $width (negedge idata11, 0:0:0);
  endspecify

endmodule

module i_data_10_ ( output PADDI, input idata10 );

  xo2iobuf0147 \i_data_pad[10] ( .Z(PADDI), .PAD(idata10));

  specify
    (idata10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata10, 0:0:0);
    $width (negedge idata10, 0:0:0);
  endspecify

endmodule

module i_data_9_ ( output PADDI, input idata9 );

  xo2iobuf0147 \i_data_pad[9] ( .Z(PADDI), .PAD(idata9));

  specify
    (idata9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata9, 0:0:0);
    $width (negedge idata9, 0:0:0);
  endspecify

endmodule

module i_data_8_ ( output PADDI, input idata8 );

  xo2iobuf0147 \i_data_pad[8] ( .Z(PADDI), .PAD(idata8));

  specify
    (idata8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata8, 0:0:0);
    $width (negedge idata8, 0:0:0);
  endspecify

endmodule

module i_data_7_ ( output PADDI, input idata7 );

  xo2iobuf0147 \i_data_pad[7] ( .Z(PADDI), .PAD(idata7));

  specify
    (idata7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata7, 0:0:0);
    $width (negedge idata7, 0:0:0);
  endspecify

endmodule

module i_data_6_ ( output PADDI, input idata6 );

  xo2iobuf0147 \i_data_pad[6] ( .Z(PADDI), .PAD(idata6));

  specify
    (idata6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata6, 0:0:0);
    $width (negedge idata6, 0:0:0);
  endspecify

endmodule

module i_data_5_ ( output PADDI, input idata5 );

  xo2iobuf0147 \i_data_pad[5] ( .Z(PADDI), .PAD(idata5));

  specify
    (idata5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata5, 0:0:0);
    $width (negedge idata5, 0:0:0);
  endspecify

endmodule

module i_data_4_ ( output PADDI, input idata4 );

  xo2iobuf0147 \i_data_pad[4] ( .Z(PADDI), .PAD(idata4));

  specify
    (idata4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata4, 0:0:0);
    $width (negedge idata4, 0:0:0);
  endspecify

endmodule

module i_data_3_ ( output PADDI, input idata3 );

  xo2iobuf0147 \i_data_pad[3] ( .Z(PADDI), .PAD(idata3));

  specify
    (idata3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata3, 0:0:0);
    $width (negedge idata3, 0:0:0);
  endspecify

endmodule

module i_data_2_ ( output PADDI, input idata2 );

  xo2iobuf0147 \i_data_pad[2] ( .Z(PADDI), .PAD(idata2));

  specify
    (idata2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata2, 0:0:0);
    $width (negedge idata2, 0:0:0);
  endspecify

endmodule

module i_data_1_ ( output PADDI, input idata1 );

  xo2iobuf0147 \i_data_pad[1] ( .Z(PADDI), .PAD(idata1));

  specify
    (idata1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata1, 0:0:0);
    $width (negedge idata1, 0:0:0);
  endspecify

endmodule

module o_read_done ( input PADDO, output o_read_done );
  wire   GNDI;

  xo2iobuf0145 o_read_done_pad( .I(PADDO), .T(GNDI), .PAD(o_read_done));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => o_read_done) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_write_done ( input PADDO, output o_write_done );
  wire   GNDI;

  xo2iobuf0145 o_write_done_pad( .I(PADDO), .T(GNDI), .PAD(o_write_done));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => o_write_done) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_clk ( input PADDO, output o_sdram_clk );
  wire   GNDI;

  xo2iobuf0145 o_sdram_clk_pad( .I(PADDO), .T(GNDI), .PAD(o_sdram_clk));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => o_sdram_clk) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_wen ( input IOLDO, output o_sdram_wen );
  wire   GNDI;

  xo2iobuf0145 o_sdram_wen_pad( .I(IOLDO), .T(GNDI), .PAD(o_sdram_wen));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => o_sdram_wen) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_wen_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre U0_o_sdram_wenio( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_rasn ( input IOLDO, output o_sdram_rasn );
  wire   GNDI;

  xo2iobuf0145 o_sdram_rasn_pad( .I(IOLDO), .T(GNDI), .PAD(o_sdram_rasn));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => o_sdram_rasn) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_rasn_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre U0_o_sdram_rasnio( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_dqm_3_ ( input PADDO, output osdramdqm3 );
  wire   VCCI;

  xo2iobuf0148 \o_sdram_dqm_pad[3] ( .I(PADDO), .T(VCCI), .PAD(osdramdqm3));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => osdramdqm3) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0148 ( input I, T, output PAD );

  OBZ INST5( .I(I), .T(T), .O(PAD));
endmodule

module o_sdram_dqm_2_ ( input PADDO, output osdramdqm2 );
  wire   VCCI;

  xo2iobuf0148 \o_sdram_dqm_pad[2] ( .I(PADDO), .T(VCCI), .PAD(osdramdqm2));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => osdramdqm2) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_dqm_1_ ( input PADDO, output osdramdqm1 );
  wire   GNDI;

  xo2iobuf0145 \o_sdram_dqm_pad[1] ( .I(PADDO), .T(GNDI), .PAD(osdramdqm1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => osdramdqm1) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_dqm_0_ ( input PADDO, output osdramdqm0 );
  wire   GNDI;

  xo2iobuf0145 \o_sdram_dqm_pad[0] ( .I(PADDO), .T(GNDI), .PAD(osdramdqm0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => osdramdqm0) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_csn ( input PADDO, output o_sdram_csn );
  wire   GNDI;

  xo2iobuf0145 o_sdram_csn_pad( .I(PADDO), .T(GNDI), .PAD(o_sdram_csn));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => o_sdram_csn) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_cke ( input IOLDO, output o_sdram_cke );
  wire   GNDI;

  xo2iobuf0145 o_sdram_cke_pad( .I(IOLDO), .T(GNDI), .PAD(o_sdram_cke));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => o_sdram_cke) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_cke_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre U0_o_sdram_ckeio( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_casn ( input IOLDO, output o_sdram_casn );
  wire   GNDI;

  xo2iobuf0145 o_sdram_casn_pad( .I(IOLDO), .T(GNDI), .PAD(o_sdram_casn));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => o_sdram_casn) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_casn_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre U0_o_sdram_casnio( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_blkaddr_1_ ( input IOLDO, output osdramblkaddr1 );
  wire   GNDI;

  xo2iobuf0145 \o_sdram_blkaddr_pad[1] ( .I(IOLDO), .T(GNDI), 
    .PAD(osdramblkaddr1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramblkaddr1) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_blkaddr_1__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0_o_sdram_blkaddrio[1] ( .D0(OPOS_dly), .SP(CE_NOTIN), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_blkaddr_0_ ( input IOLDO, output osdramblkaddr0 );
  wire   GNDI;

  xo2iobuf0145 \o_sdram_blkaddr_pad[0] ( .I(IOLDO), .T(GNDI), 
    .PAD(osdramblkaddr0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramblkaddr0) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_blkaddr_0__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0_o_sdram_blkaddrio[0] ( .D0(OPOS_dly), .SP(CE_NOTIN), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_12_ ( input PADDO, output osdramaddr12 );
  wire   VCCI;

  xo2iobuf0148 \o_sdram_addr_pad[12] ( .I(PADDO), .T(VCCI), .PAD(osdramaddr12));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => osdramaddr12) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_10_ ( input IOLDO, output osdramaddr10 );
  wire   GNDI;

  xo2iobuf0145 \o_sdram_addr_pad[10] ( .I(IOLDO), .T(GNDI), .PAD(osdramaddr10));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr10) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_10__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0_o_sdram_addr_1io[10] ( .D0(OPOS_dly), .SP(CE_NOTIN), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_9_ ( input IOLDO, output osdramaddr9 );
  wire   GNDI;

  xo2iobuf0145 \o_sdram_addr_pad[9] ( .I(IOLDO), .T(GNDI), .PAD(osdramaddr9));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr9) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_9__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0_o_sdram_addr_1io[9] ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_8_ ( input IOLDO, output osdramaddr8 );
  wire   GNDI;

  xo2iobuf0145 \o_sdram_addr_pad[8] ( .I(IOLDO), .T(GNDI), .PAD(osdramaddr8));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr8) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_8__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0_o_sdram_addr_1io[8] ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_7_ ( input IOLDO, output osdramaddr7 );
  wire   GNDI;

  xo2iobuf0145 \o_sdram_addr_pad[7] ( .I(IOLDO), .T(GNDI), .PAD(osdramaddr7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr7) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_7__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0_o_sdram_addr_1io[7] ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_6_ ( input IOLDO, output osdramaddr6 );
  wire   GNDI;

  xo2iobuf0145 \o_sdram_addr_pad[6] ( .I(IOLDO), .T(GNDI), .PAD(osdramaddr6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr6) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_6__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0_o_sdram_addr_1io[6] ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_5_ ( input IOLDO, output osdramaddr5 );
  wire   GNDI;

  xo2iobuf0145 \o_sdram_addr_pad[5] ( .I(IOLDO), .T(GNDI), .PAD(osdramaddr5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr5) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_5__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0_o_sdram_addr_1io[5] ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_4_ ( input IOLDO, output osdramaddr4 );
  wire   GNDI;

  xo2iobuf0145 \o_sdram_addr_pad[4] ( .I(IOLDO), .T(GNDI), .PAD(osdramaddr4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr4) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_4__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0_o_sdram_addr_1io[4] ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_3_ ( input IOLDO, output osdramaddr3 );
  wire   GNDI;

  xo2iobuf0145 \o_sdram_addr_pad[3] ( .I(IOLDO), .T(GNDI), .PAD(osdramaddr3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr3) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_3__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0_o_sdram_addr_1io[3] ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_2_ ( input IOLDO, output osdramaddr2 );
  wire   GNDI;

  xo2iobuf0145 \o_sdram_addr_pad[2] ( .I(IOLDO), .T(GNDI), .PAD(osdramaddr2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr2) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_2__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0_o_sdram_addr_1io[2] ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_1_ ( input IOLDO, output osdramaddr1 );
  wire   GNDI;

  xo2iobuf0145 \o_sdram_addr_pad[1] ( .I(IOLDO), .T(GNDI), .PAD(osdramaddr1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr1) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_1__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0_o_sdram_addr_1io[1] ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_0_ ( input IOLDO, output osdramaddr0 );
  wire   GNDI;

  xo2iobuf0145 \o_sdram_addr_pad[0] ( .I(IOLDO), .T(GNDI), .PAD(osdramaddr0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr0) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_0__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0_o_sdram_addr_1io[0] ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_ack ( input IOLDO, output o_ack );
  wire   GNDI;

  xo2iobuf0145 o_ack_pad( .I(IOLDO), .T(GNDI), .PAD(o_ack));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => o_ack) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_ack_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre0146 U0_o_ackio( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_init_done ( input PADDO, output o_init_done );
  wire   GNDI;

  xo2iobuf0145 o_init_done_pad( .I(PADDO), .T(GNDI), .PAD(o_init_done));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => o_init_done) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_busy ( input PADDO, output o_busy );
  wire   GNDI;

  xo2iobuf0145 o_busy_pad( .I(PADDO), .T(GNDI), .PAD(o_busy));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => o_busy) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_req ( input PADDO, output o_data_req );
  wire   GNDI;

  xo2iobuf0145 o_data_req_pad( .I(PADDO), .T(GNDI), .PAD(o_data_req));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => o_data_req) = (0:0:0,0:0:0);
  endspecify

endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  INV INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule

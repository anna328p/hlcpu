
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.1.0.96  Patch Version(s) 119989

// ldbanno -n Verilog -o xo3l_verilog_lse_xo3l_verilog_lse_vo.vo -w -neg -gui xo3l_verilog_lse_xo3l_verilog_lse.ncd 
// Netlist created on Thu Mar 13 16:42:45 2014
// Netlist written on Fri Mar 14 12:01:46 2014
// Design is for device LCMXO3L-4300C
// Design is for package CABGA256
// Design is for performance grade 5

`timescale 1 ns / 1 ps

module sdram_controller ( o_data_valid, o_data_req, o_busy, o_init_done, o_ack, 
                          o_sdram_addr, o_sdram_blkaddr, o_sdram_casn, 
                          o_sdram_cke, o_sdram_csn, o_sdram_dqm, o_sdram_rasn, 
                          o_sdram_wen, o_sdram_clk, o_write_done, o_read_done, 
                          i_data, o_data, io_sdram_dq, i_addr, i_adv, i_clk, 
                          i_rst, i_rwn, i_selfrefresh_req, i_loadmod_req, 
                          i_burststop_req, i_disable_active, 
                          i_disable_precharge, i_precharge_req, i_power_down, 
                          i_disable_autorefresh );
  input  [31:0] i_data;
  input  [31:0] io_sdram_dq;
  input  [26:0] i_addr;
  input  i_adv, i_clk, i_rst, i_rwn, i_selfrefresh_req, i_loadmod_req, 
         i_burststop_req, i_disable_active, i_disable_precharge, 
         i_precharge_req, i_power_down, i_disable_autorefresh;
  output o_data_valid, o_data_req, o_busy, o_init_done, o_ack;
  output [12:0] o_sdram_addr;
  output [1:0] o_sdram_blkaddr;
  output o_sdram_casn, o_sdram_cke, o_sdram_csn;
  output [3:0] o_sdram_dqm;
  output o_sdram_rasn, o_sdram_wen, o_sdram_clk, o_write_done, o_read_done;
  output [31:0] o_data;
  wire   \U0/read_req_cnt_i_4 , \U0/read_req_cnt_i_3 , \U0/n987 , \U0/n985 , 
         \U0/read_data_req_i , \U0/n954_adj_1 , i_clk_c, \U0/n2964 , 
         \U0/n2965 , \U0/read_req_cnt_i_0 , \U0/n977 , \U0/n2963 , 
         \U0/read_req_cnt_i_6 , \U0/read_req_cnt_i_5 , \U0/n991 , \U0/n989 , 
         \U0/n2966 , \U0/read_req_cnt_i_2 , \U0/read_req_cnt_i_1 , \U0/n983 , 
         \U0/n965 , \U0/read_req_cnt_i_9 , \U0/n997 , \U0/n2967 , 
         \U0/read_req_cnt_i_8 , \U0/read_req_cnt_i_7 , \U0/n995 , \U0/n993 , 
         \U0/clk_count_i_0 , \U0/clk_count_i_1 , \U0/n25 , \U0/n3383 , 
         \U0/reset_clk_counter_i , \U0/clk_count_i_2 , \U0/clk_count_i_3 , 
         \U0/n23 , \U0/n24 , \U1/U5/lfsr_reg_i_5 , \U1/U5/lfsr_reg_i_3 , 
         \U1/U5/lfsr_reg_i_1 , \U1/U5/n11 , \U1/U5/n13 , \U1/U5/lfsr_reg_i_7 , 
         lfsr_256_equal_i, lfsr_64_done_i, \U0/delay_done150us_i , n3508, 
         \U0/n164 , \U0/n128 , i_rst_c, \U0/n3379 , \U0/n130 , \U0/n129 , 
         \U0/n946 , \U0/n1253 , \U0/n3391 , \U0/n3388 , \U0/n131 , \U0/n132 , 
         \U0/n944 , \U0/n133 , \U0/n134 , \U0/n942 , \U0/n137 , \U0/n136 , 
         \U0/n135 , \U0/n148 , \U0/n940 , \U0/n350 , \U0/n378 , \U0/n976 , 
         \U0/n937 , \U0/n356 , \U0/n352 , \U0/n3372 , i_burststop_req_c, 
         \U0/n379 , \U0/n351 , \U0/n972 , \U0/n974 , \U0/n3371 , \U0/n1138 , 
         i_disable_precharge_c, \U0/n3376 , \U0/n3152 , \U0/n357 , \U0/n1186 , 
         \U0/n970 , \U0/n353 , \U0/n374 , \U0/n358 , \U0/n375 , \U0/n966 , 
         \U0/n968 , \U0/n367 , \U0/n365 , \U0/n360 , \U0/n364 , \U0/n962 , 
         \U0/n964 , i_disable_active_c, \U0/n3128 , \U0/n3386 , \U0/n3170 , 
         \U0/n366 , \U0/n3130 , \U0/n960 , \U0/n381 , \U0/n3381 , 
         o_init_done_c, \U0/n3374 , \U0/n3186 , i_power_down_c, \U0/n3157 , 
         \U0/n368 , \U0/n3143 , \U0/n3066 , \U0/n370 , \U0/n376 , \U0/n372 , 
         \U0/n2 , \U0/n38 , \U0/n380 , i_selfrefresh_req_c, \U0/n3375 , 
         \U0/n11 , i_rwn_c, \U0/n954 , \U0/n3060 , refresh_req_i, \U0/n3052 , 
         \U0/n3146 , \U0/n3155 , \U0/n6 , \U0/n3050 , \U0/n952 , \U0/n678 , 
         \U0/n3382 , \U0/n3167 , \U0/n3370 , \U0/n1196 , \U0/read_done_i , 
         o_ack_c, i_precharge_req_c, \U0/n2986 , \U0/read_req_cnt_rst_i , 
         \U0/n9 , \U0/read_done_reg_i , \U0/sdram_dq_en_i , \U0/n1249 , 
         \U0/n3380 , \U0/write_done_i , \U0/write_done_reg_i , \U0/n15_adj_10 , 
         \U0/n1226 , o_write_done_c, \U1/U1/lfsr_reg_i_4 , 
         \U1/U1/lfsr_reg_i_5 , \U1/U1/lfsr_d0_i , \U1/U1/lfsr_reg_i_0 , 
         \U1/U1/lfsr_equal , \U1/U1/lfsr_reg_i_1 , \U1/U5/lfsr_reg_i_6 , 
         \U1/U5/lfsr_reg_i_4 , \U1/U5/lfsr_reg_i_2 , \U1/U5/lfsr_reg_i_0 , 
         \U1/U5/lfsr_d0_i , \U2/lfsr_reg_i_8 , \U2/lfsr_reg_i_10 , 
         \U2/lfsr_lsb_i , \U2/lfsr_reg_i_0 , autorefresh_enable_i, \U2/n1881 , 
         \U2/lfsr_reg_i_1 , \U2/lfsr_reg_i_9 , GND_net, \U2/lfsr_reg_i_4 , 
         \U2/n3184 , \U2/n6 , \U2/lfsr_reg_i_2 , \U2/lfsr_count_match_i , 
         \U2/refresh_count_done_i , o_read_done_c, autoref_ack_i, \U0/n14 , 
         n79, \U0/n541 , latch_ref_req_i, n71, \U1/U1/lfsr_reg_i_2 , 
         \U1/U1/lfsr_reg_i_3 , \U1/U1/n10 , \U0/n3116 , \U0/n699 , \U0/n3118 , 
         i_loadmod_req_c, i_adv_c, \U0/n2985 , o_busy_c, \U0/n1200 , 
         \U2/lfsr_reg_i_5 , power_down_reg1_i, o_sdram_clk_c, \U2/n3180 , 
         \U0/n3013 , \U0/n3163 , \U0/n4 , \U0/n3369 , o_sdram_dqm_c, 
         i_disable_autorefresh_c, n3137, \U0/n3387 , \U0/n2216 , \U0/n3470 , 
         \U0/n3466 , \U0/n3471 , \U0/n3141 , \U0/n3467 , \U0/n3468 , 
         i_addr_c_20, i_addr_c_10, \U0/n3200 , \U0/n3096 , \U0/n3197 , 
         \U0/n44 , i_addr_c_19, i_addr_c_9, \U0/n3100 , i_addr_c_17, 
         i_addr_c_7, \U0/n3102 , i_addr_c_18, i_addr_c_8, \U0/n3104 , 
         \U0/n3339 , i_addr_c_21, i_addr_c_11, \U0/n213 , \U0/n3394 , 
         \U0/n717 , \U0/n6_adj_9 , \U0/n3389 , \U0/n692 , \U0/n719 , \U2/n8 , 
         \U2/lfsr_reg_i_3 , \U2/lfsr_reg_i_6 , \U2/lfsr_reg_i_7 , \U0/n3506 , 
         \U0/n15 , \U0/n3112 , \U0/n32 , i_addr_c_15, \U0/n5 , i_addr_c_5, 
         \U0/n1008 , \U0/n3373 , \U0/n2192 , \U0/n3377 , \U0/n722 , 
         \U0/n15_adj_2 , \U0/n3114 , \U0/n563 , \U0/n980 , i_addr_c_0, 
         \U0/n224 , \U0/n1002 , i_addr_c_12, i_addr_c_2, \U0/n222 , \U0/n1004 , 
         i_addr_c_3, i_addr_c_13, \U0/n221 , \U0/n3390 , \U0/n1006 , 
         i_addr_c_14, i_addr_c_4, \U0/n220 , \U0/n4_adj_11 , \U0/n10 , 
         o_data_req_c, \U0/n1010 , i_addr_c_16, i_addr_c_6, \U0/n218 , 
         \U0/n2987 , i_addr_c_1, \U0/n1000 , o_sdram_wen_c, o_sdram_rasn_c, 
         o_sdram_cke_c, o_sdram_casn_c, o_sdram_blkaddr_c, n887, 
         o_sdram_addr_c, n886, n885, n884, n883, n3511, n881, n880, n879, n878, 
         n877, n876, o_data_valid_c, io_sdram_dq_out_0, i_data_c_0, 
         io_sdram_dq_out_15, i_data_c_15, io_sdram_dq_out_9, i_data_c_9, 
         io_sdram_dq_out_10, i_data_c_10, io_sdram_dq_out_11, i_data_c_11, 
         io_sdram_dq_out_1, i_data_c_1, io_sdram_dq_out_2, i_data_c_2, 
         io_sdram_dq_out_3, i_data_c_3, io_sdram_dq_out_4, i_data_c_4, 
         io_sdram_dq_out_12, i_data_c_12, io_sdram_dq_out_13, i_data_c_13, 
         io_sdram_dq_out_14, i_data_c_14, io_sdram_dq_out_5, i_data_c_5, 
         io_sdram_dq_out_6, i_data_c_6, io_sdram_dq_out_7, i_data_c_7, 
         io_sdram_dq_out_8, i_data_c_8, n892, n893, n894, n895, n896, n897, 
         n898, n899, n900, n901, n902, n903, n3512, n905, n906, n907, VCCI;

  U0_SLICE_0 \U0/SLICE_0 ( .A1(\U0/read_req_cnt_i_4 ), 
    .A0(\U0/read_req_cnt_i_3 ), .DI1(\U0/n987 ), .DI0(\U0/n985 ), 
    .CE(\U0/read_data_req_i ), .LSR(\U0/n954_adj_1 ), .CLK(i_clk_c), 
    .FCI(\U0/n2964 ), .F0(\U0/n985 ), .Q0(\U0/read_req_cnt_i_3 ), 
    .F1(\U0/n987 ), .Q1(\U0/read_req_cnt_i_4 ), .FCO(\U0/n2965 ));
  U0_SLICE_1 \U0/SLICE_1 ( .A1(\U0/read_req_cnt_i_0 ), .DI1(\U0/n977 ), 
    .CE(\U0/read_data_req_i ), .LSR(\U0/n954_adj_1 ), .CLK(i_clk_c), 
    .F1(\U0/n977 ), .Q1(\U0/read_req_cnt_i_0 ), .FCO(\U0/n2963 ));
  U0_SLICE_2 \U0/SLICE_2 ( .A1(\U0/read_req_cnt_i_6 ), 
    .A0(\U0/read_req_cnt_i_5 ), .DI1(\U0/n991 ), .DI0(\U0/n989 ), 
    .CE(\U0/read_data_req_i ), .LSR(\U0/n954_adj_1 ), .CLK(i_clk_c), 
    .FCI(\U0/n2965 ), .F0(\U0/n989 ), .Q0(\U0/read_req_cnt_i_5 ), 
    .F1(\U0/n991 ), .Q1(\U0/read_req_cnt_i_6 ), .FCO(\U0/n2966 ));
  U0_SLICE_3 \U0/SLICE_3 ( .A1(\U0/read_req_cnt_i_2 ), 
    .A0(\U0/read_req_cnt_i_1 ), .DI1(\U0/n983 ), .DI0(\U0/n965 ), 
    .CE(\U0/read_data_req_i ), .LSR(\U0/n954_adj_1 ), .CLK(i_clk_c), 
    .FCI(\U0/n2963 ), .F0(\U0/n965 ), .Q0(\U0/read_req_cnt_i_1 ), 
    .F1(\U0/n983 ), .Q1(\U0/read_req_cnt_i_2 ), .FCO(\U0/n2964 ));
  U0_SLICE_4 \U0/SLICE_4 ( .A0(\U0/read_req_cnt_i_9 ), .DI0(\U0/n997 ), 
    .CE(\U0/read_data_req_i ), .LSR(\U0/n954_adj_1 ), .CLK(i_clk_c), 
    .FCI(\U0/n2967 ), .F0(\U0/n997 ), .Q0(\U0/read_req_cnt_i_9 ));
  U0_SLICE_5 \U0/SLICE_5 ( .A1(\U0/read_req_cnt_i_8 ), 
    .A0(\U0/read_req_cnt_i_7 ), .DI1(\U0/n995 ), .DI0(\U0/n993 ), 
    .CE(\U0/read_data_req_i ), .LSR(\U0/n954_adj_1 ), .CLK(i_clk_c), 
    .FCI(\U0/n2966 ), .F0(\U0/n993 ), .Q0(\U0/read_req_cnt_i_7 ), 
    .F1(\U0/n995 ), .Q1(\U0/read_req_cnt_i_8 ), .FCO(\U0/n2967 ));
  U0_SLICE_6 \U0/SLICE_6 ( .C1(\U0/clk_count_i_0 ), .A1(\U0/clk_count_i_1 ), 
    .A0(\U0/clk_count_i_0 ), .DI1(\U0/n25 ), .DI0(\U0/n3383 ), 
    .LSR(\U0/reset_clk_counter_i ), .CLK(i_clk_c), .F0(\U0/n3383 ), 
    .Q0(\U0/clk_count_i_0 ), .F1(\U0/n25 ), .Q1(\U0/clk_count_i_1 ));
  U0_SLICE_7 \U0/SLICE_7 ( .D1(\U0/clk_count_i_1 ), .C1(\U0/clk_count_i_0 ), 
    .B1(\U0/clk_count_i_2 ), .A1(\U0/clk_count_i_3 ), .D0(\U0/clk_count_i_1 ), 
    .C0(\U0/clk_count_i_0 ), .A0(\U0/clk_count_i_2 ), .DI1(\U0/n23 ), 
    .DI0(\U0/n24 ), .LSR(\U0/reset_clk_counter_i ), .CLK(i_clk_c), 
    .F0(\U0/n24 ), .Q0(\U0/clk_count_i_2 ), .F1(\U0/n23 ), 
    .Q1(\U0/clk_count_i_3 ));
  SLICE_8 SLICE_8( .D1(\U1/U5/lfsr_reg_i_5 ), .C1(\U1/U5/lfsr_reg_i_3 ), 
    .D0(\U1/U5/lfsr_reg_i_1 ), .C0(\U1/U5/n11 ), .B0(\U1/U5/n13 ), 
    .A0(\U1/U5/lfsr_reg_i_7 ), .DI0(lfsr_256_equal_i), .CLK(lfsr_64_done_i), 
    .F0(lfsr_256_equal_i), .Q0(\U0/delay_done150us_i ), .F1(\U1/U5/n11 ));
  SLICE_9 SLICE_9( .DI0(n3508), .CE(\U0/n164 ), .CLK(i_clk_c), .F0(n3508), 
    .Q0(\U0/n128 ));
  U0_SLICE_10 \U0/SLICE_10 ( .C1(\U0/n128 ), .A1(i_rst_c), .D0(\U0/n3379 ), 
    .C0(\U0/n130 ), .A0(\U0/n129 ), .DI0(\U0/n946 ), .CLK(i_clk_c), 
    .F0(\U0/n946 ), .Q0(\U0/n129 ), .F1(\U0/n1253 ));
  U0_SLICE_12 \U0/SLICE_12 ( .D1(\U0/clk_count_i_1 ), .A1(\U0/clk_count_i_0 ), 
    .D0(\U0/n3391 ), .C0(\U0/n3388 ), .B0(\U0/n131 ), .A0(\U0/n132 ), 
    .DI0(\U0/n944 ), .CLK(i_clk_c), .F0(\U0/n944 ), .Q0(\U0/n131 ), 
    .F1(\U0/n3388 ));
  U0_SLICE_14 \U0/SLICE_14 ( .D1(\U0/clk_count_i_3 ), .B1(\U0/clk_count_i_2 ), 
    .D0(\U0/n3388 ), .C0(\U0/n133 ), .B0(\U0/n3391 ), .A0(\U0/n134 ), 
    .DI0(\U0/n942 ), .CLK(i_clk_c), .F0(\U0/n942 ), .Q0(\U0/n133 ), 
    .F1(\U0/n3391 ));
  U0_SLICE_16 \U0/SLICE_16 ( .D1(\U0/n137 ), .A1(\U0/delay_done150us_i ), 
    .D0(\U0/n3379 ), .B0(\U0/n136 ), .A0(\U0/n135 ), .DI1(\U0/n148 ), 
    .DI0(\U0/n940 ), .CLK(i_clk_c), .F0(\U0/n940 ), .Q0(\U0/n135 ), 
    .F1(\U0/n148 ), .Q1(\U0/n136 ));
  U0_SLICE_17 \U0/SLICE_17 ( .D1(\U0/n350 ), .C1(\U0/n378 ), .B1(\U0/n3388 ), 
    .A1(\U0/n3391 ), .B0(\U0/delay_done150us_i ), .A0(\U0/n137 ), 
    .DI1(\U0/n976 ), .DI0(\U0/n937 ), .CLK(i_clk_c), .F0(\U0/n937 ), 
    .Q0(\U0/n137 ), .F1(\U0/n976 ), .Q1(\U0/n350 ));
  U0_SLICE_18 \U0/SLICE_18 ( .D1(\U0/n3379 ), .C1(\U0/n356 ), .A1(\U0/n352 ), 
    .D0(\U0/n3372 ), .C0(i_burststop_req_c), .B0(\U0/n379 ), .A0(\U0/n351 ), 
    .DI1(\U0/n972 ), .DI0(\U0/n974 ), .CLK(i_clk_c), .F0(\U0/n974 ), 
    .Q0(\U0/n351 ), .F1(\U0/n972 ), .Q1(\U0/n352 ));
  U0_SLICE_19 \U0/SLICE_19 ( .C1(\U0/n3371 ), .B1(\U0/n1138 ), 
    .A1(i_disable_precharge_c), .D0(\U0/n3379 ), .C0(\U0/n3376 ), 
    .B0(\U0/n3152 ), .A0(\U0/n357 ), .DI1(\U0/n1186 ), .DI0(\U0/n970 ), 
    .CLK(i_clk_c), .F0(\U0/n970 ), .Q0(\U0/n353 ), .F1(\U0/n1186 ), 
    .Q1(\U0/n356 ));
  U0_SLICE_20 \U0/SLICE_20 ( .D1(\U0/n374 ), .C1(\U0/n358 ), .A1(\U0/n3379 ), 
    .D0(\U0/n357 ), .B0(\U0/n375 ), .A0(\U0/n3379 ), .DI1(\U0/n966 ), 
    .DI0(\U0/n968 ), .CLK(i_clk_c), .F0(\U0/n968 ), .Q0(\U0/n357 ), 
    .F1(\U0/n966 ), .Q1(\U0/n358 ));
  U0_SLICE_22 \U0/SLICE_22 ( .D1(\U0/n367 ), .C1(\U0/n3379 ), .A1(\U0/n365 ), 
    .D0(\U0/n3379 ), .B0(\U0/n360 ), .A0(\U0/n364 ), .DI1(\U0/n962 ), 
    .DI0(\U0/n964 ), .CLK(i_clk_c), .F0(\U0/n964 ), .Q0(\U0/n364 ), 
    .F1(\U0/n962 ), .Q1(\U0/n365 ));
  U0_SLICE_23 \U0/SLICE_23 ( .C1(i_disable_active_c), .B1(\U0/n3128 ), 
    .D0(\U0/n3386 ), .C0(\U0/n3372 ), .B0(\U0/n3170 ), .A0(\U0/n366 ), 
    .DI1(\U0/n3130 ), .DI0(\U0/n960 ), .CLK(i_clk_c), .F0(\U0/n960 ), 
    .Q0(\U0/n366 ), .F1(\U0/n3130 ), .Q1(\U0/n367 ));
  U0_SLICE_24 \U0/SLICE_24 ( .D1(\U0/n381 ), .C1(\U0/n3381 ), 
    .B1(o_init_done_c), .A1(\U0/n3374 ), .D0(\U0/n3186 ), .C0(i_power_down_c), 
    .B0(\U0/n3157 ), .A0(\U0/n368 ), .DI1(\U0/n3143 ), .DI0(\U0/n3066 ), 
    .CLK(i_clk_c), .F0(\U0/n3066 ), .Q0(\U0/n368 ), .F1(\U0/n3143 ), 
    .Q1(\U0/n370 ));
  U0_SLICE_25 \U0/SLICE_25 ( .C1(\U0/n366 ), .B1(\U0/n376 ), 
    .A1(\U0/clk_count_i_2 ), .C0(\U0/n3379 ), .B0(\U0/n370 ), .A0(\U0/n372 ), 
    .DI0(\U0/n2 ), .CLK(i_clk_c), .F0(\U0/n2 ), .Q0(\U0/n372 ), .F1(\U0/n38 ));
  U0_SLICE_27 \U0/SLICE_27 ( .D1(\U0/n380 ), .C1(i_selfrefresh_req_c), 
    .B1(\U0/n3375 ), .A1(\U0/n376 ), .B0(\U0/n11 ), .A0(i_rwn_c), 
    .DI1(\U0/n954 ), .DI0(\U0/n3060 ), .CLK(i_clk_c), .F0(\U0/n3060 ), 
    .Q0(\U0/n375 ), .F1(\U0/n954 ), .Q1(\U0/n376 ));
  U0_SLICE_28 \U0/SLICE_28 ( .D1(i_rwn_c), .B1(\U0/n11 ), .D0(\U0/n381 ), 
    .C0(i_selfrefresh_req_c), .B0(o_init_done_c), .A0(refresh_req_i), 
    .DI1(\U0/n3052 ), .DI0(\U0/n3146 ), .CLK(i_clk_c), .F0(\U0/n3146 ), 
    .Q0(\U0/n378 ), .F1(\U0/n3052 ), .Q1(\U0/n379 ));
  U0_SLICE_29 \U0/SLICE_29 ( .D1(\U0/n3155 ), .C1(o_init_done_c), .B1(\U0/n6 ), 
    .A1(\U0/n381 ), .D0(i_selfrefresh_req_c), .C0(\U0/n381 ), 
    .B0(o_init_done_c), .A0(\U0/n380 ), .DI1(\U0/n3050 ), .DI0(\U0/n952 ), 
    .CLK(i_clk_c), .F0(\U0/n952 ), .Q0(\U0/n380 ), .F1(\U0/n3050 ), 
    .Q1(\U0/n381 ));
  U0_SLICE_30 \U0/SLICE_30 ( .D1(i_rwn_c), .B1(\U0/read_data_req_i ), 
    .D0(\U0/n351 ), .C0(\U0/n365 ), .A0(\U0/n379 ), .DI0(\U0/n678 ), 
    .M0(\U0/n3382 ), .LSR(\U0/n3167 ), .CLK(i_clk_c), .OFX0(\U0/n678 ), 
    .Q0(\U0/read_data_req_i ));
  U0_SLICE_31 \U0/SLICE_31 ( .D1(\U0/clk_count_i_2 ), .C1(\U0/clk_count_i_0 ), 
    .B1(\U0/clk_count_i_3 ), .A1(\U0/clk_count_i_1 ), .D0(\U0/n351 ), 
    .C0(i_burststop_req_c), .B0(\U0/n3372 ), .DI0(\U0/n3370 ), .CE(\U0/n1196 ), 
    .CLK(i_clk_c), .F0(\U0/n3370 ), .Q0(\U0/read_done_i ), .F1(\U0/n3372 ));
  U0_SLICE_33 \U0/SLICE_33 ( .C1(o_ack_c), .B1(\U0/n381 ), 
    .A1(i_precharge_req_c), .C0(\U0/n374 ), .B0(\U0/n381 ), .A0(\U0/n366 ), 
    .DI0(\U0/n2986 ), .M1(\U0/read_done_i ), .CLK(i_clk_c), .F0(\U0/n2986 ), 
    .Q0(\U0/read_req_cnt_rst_i ), .F1(\U0/n9 ), .Q1(\U0/read_done_reg_i ));
  U0_SLICE_34 \U0/SLICE_34 ( .D1(\U0/n379 ), .B1(\U0/n375 ), .D0(\U0/n379 ), 
    .B0(\U0/n375 ), .A0(\U0/sdram_dq_en_i ), .DI0(\U0/n1249 ), .CLK(i_clk_c), 
    .F0(\U0/n1249 ), .Q0(\U0/sdram_dq_en_i ), .F1(\U0/n3380 ));
  U0_SLICE_35 \U0/SLICE_35 ( .C1(\U0/write_done_i ), 
    .A1(\U0/write_done_reg_i ), .D0(\U0/n15_adj_10 ), .C0(\U0/write_done_i ), 
    .A0(\U0/n3370 ), .DI0(\U0/n1226 ), .CLK(i_clk_c), .F0(\U0/n1226 ), 
    .Q0(\U0/write_done_i ), .F1(o_write_done_c));
  U1_U1_SLICE_37 \U1/U1/SLICE_37 ( .C0(\U1/U1/lfsr_reg_i_4 ), 
    .B0(\U1/U1/lfsr_reg_i_5 ), .DI0(\U1/U1/lfsr_d0_i ), 
    .M1(\U1/U1/lfsr_reg_i_0 ), .LSR(\U1/U1/lfsr_equal ), .CLK(i_clk_c), 
    .F0(\U1/U1/lfsr_d0_i ), .Q0(\U1/U1/lfsr_reg_i_0 ), 
    .Q1(\U1/U1/lfsr_reg_i_1 ));
  U1_U5_SLICE_40 \U1/U5/SLICE_40 ( .D1(\U1/U5/lfsr_reg_i_6 ), 
    .C1(\U1/U5/lfsr_reg_i_4 ), .B1(\U1/U5/lfsr_reg_i_2 ), 
    .A1(\U1/U5/lfsr_reg_i_0 ), .D0(\U1/U5/lfsr_reg_i_5 ), 
    .C0(\U1/U5/lfsr_reg_i_4 ), .B0(\U1/U5/lfsr_reg_i_7 ), 
    .A0(\U1/U5/lfsr_reg_i_3 ), .DI0(\U1/U5/lfsr_d0_i ), 
    .M1(\U1/U5/lfsr_reg_i_0 ), .LSR(lfsr_256_equal_i), .CLK(lfsr_64_done_i), 
    .F0(\U1/U5/lfsr_d0_i ), .Q0(\U1/U5/lfsr_reg_i_0 ), .F1(\U1/U5/n13 ), 
    .Q1(\U1/U5/lfsr_reg_i_1 ));
  U2_SLICE_44 \U2/SLICE_44 ( .C0(\U2/lfsr_reg_i_8 ), .B0(\U2/lfsr_reg_i_10 ), 
    .DI0(\U2/lfsr_lsb_i ), .M1(\U2/lfsr_reg_i_0 ), .CE(autorefresh_enable_i), 
    .LSR(\U2/n1881 ), .CLK(i_clk_c), .F0(\U2/lfsr_lsb_i ), 
    .Q0(\U2/lfsr_reg_i_0 ), .Q1(\U2/lfsr_reg_i_1 ));
  SLICE_49 SLICE_49( .M0(\U2/lfsr_reg_i_9 ), .CE(autorefresh_enable_i), 
    .LSR(\U2/n1881 ), .CLK(i_clk_c), .F0(GND_net), .Q0(\U2/lfsr_reg_i_10 ));
  U2_SLICE_50 \U2/SLICE_50 ( .D1(\U2/lfsr_reg_i_4 ), .A1(\U2/lfsr_reg_i_0 ), 
    .D0(\U2/n3184 ), .C0(\U2/n6 ), .B0(\U2/lfsr_reg_i_2 ), 
    .A0(\U2/lfsr_reg_i_1 ), .DI0(\U2/lfsr_count_match_i ), .CLK(i_clk_c), 
    .F0(\U2/lfsr_count_match_i ), .Q0(\U2/refresh_count_done_i ), .F1(\U2/n6 ));
  U0_SLICE_51 \U0/SLICE_51 ( .D1(\U0/read_req_cnt_i_8 ), 
    .C1(\U0/read_req_cnt_i_6 ), .B1(\U0/read_req_cnt_i_7 ), 
    .A1(\U0/read_req_cnt_i_5 ), .B0(\U0/read_done_i ), 
    .A0(\U0/read_done_reg_i ), .M0(\U0/n378 ), .CLK(i_clk_c), 
    .F0(o_read_done_c), .Q0(autoref_ack_i), .F1(\U0/n14 ));
  SLICE_52 SLICE_52( .C1(\U0/n380 ), .A1(\U0/n368 ), .A0(i_selfrefresh_req_c), 
    .DI0(n79), .LSR(o_init_done_c), .CLK(i_clk_c), .F0(n79), 
    .Q0(autorefresh_enable_i), .F1(\U0/n541 ));
  SLICE_53 SLICE_53( .D1(\U2/lfsr_count_match_i ), .A1(autorefresh_enable_i), 
    .D0(autoref_ack_i), .A0(latch_ref_req_i), .DI0(n71), 
    .LSR(\U2/refresh_count_done_i ), .CLK(i_clk_c), .F0(n71), 
    .Q0(latch_ref_req_i), .F1(\U2/n1881 ));
  SLICE_54 SLICE_54( .D1(\U1/U1/lfsr_reg_i_0 ), .C1(\U1/U1/lfsr_reg_i_5 ), 
    .B1(\U1/U1/lfsr_reg_i_1 ), .A1(\U1/U1/lfsr_reg_i_2 ), 
    .D0(\U1/U1/lfsr_reg_i_4 ), .C0(\U1/U1/lfsr_reg_i_3 ), .B0(\U1/U1/n10 ), 
    .DI0(\U1/U1/lfsr_equal ), .M1(\U0/write_done_i ), .CLK(i_clk_c), 
    .F0(\U1/U1/lfsr_equal ), .Q0(lfsr_64_done_i), .F1(\U1/U1/n10 ), 
    .Q1(\U0/write_done_reg_i ));
  U0_SLICE_55 \U0/SLICE_55 ( .D1(\U0/n379 ), .C1(\U0/n370 ), .B1(\U0/n368 ), 
    .A1(\U0/n375 ), .D0(\U0/n9 ), .C0(\U0/n3116 ), .B0(\U0/n699 ), 
    .A0(\U0/n380 ), .DI0(\U0/n3118 ), .CLK(i_clk_c), .F0(\U0/n3118 ), 
    .Q0(o_ack_c), .F1(\U0/n3116 ));
  U0_SLICE_56 \U0/SLICE_56 ( .D1(i_loadmod_req_c), .C1(i_adv_c), 
    .B1(refresh_req_i), .A1(i_precharge_req_c), .D0(\U0/n381 ), 
    .C0(\U0/n2985 ), .B0(o_init_done_c), .A0(o_busy_c), .DI0(\U0/n1200 ), 
    .CLK(i_clk_c), .F0(\U0/n1200 ), .Q0(o_busy_c), .F1(\U0/n2985 ));
  SLICE_57 SLICE_57( .D1(\U2/lfsr_reg_i_9 ), .A1(\U2/lfsr_reg_i_5 ), 
    .D0(i_clk_c), .C0(power_down_reg1_i), .M0(\U0/n128 ), .CLK(i_clk_c), 
    .F0(o_sdram_clk_c), .Q0(o_init_done_c), .F1(\U2/n3180 ));
  U0_SLICE_58 \U0/SLICE_58 ( .D1(\U0/n380 ), .C1(\U0/n370 ), .A1(\U0/n378 ), 
    .D0(\U0/n128 ), .C0(\U0/n3013 ), .B0(\U0/n3163 ), .A0(\U0/n4 ), 
    .DI0(\U0/n3369 ), .CE(i_rst_c), .CLK(i_clk_c), .F0(\U0/n3369 ), 
    .Q0(o_sdram_dqm_c), .F1(\U0/n3163 ));
  SLICE_59 SLICE_59( .D1(i_adv_c), .B1(o_init_done_c), 
    .D0(i_disable_autorefresh_c), .B0(o_init_done_c), .A0(o_busy_c), 
    .DI0(n3137), .LSR(latch_ref_req_i), .CLK(i_clk_c), .F0(n3137), 
    .Q0(refresh_req_i), .F1(\U0/n3387 ));
  U0_SLICE_60 \U0/SLICE_60 ( .D1(\U0/n2216 ), .C1(\U0/n3388 ), .B1(\U0/n3391 ), 
    .A1(\U0/n133 ), .D0(\U0/n131 ), .C0(\U0/n3470 ), .A0(\U0/n3466 ), 
    .OFX0(\U0/n3471 ), .F1(\U0/n3470 ));
  U0_SLICE_61 \U0/SLICE_61 ( .D1(\U0/clk_count_i_0 ), .C1(\U0/clk_count_i_1 ), 
    .B1(\U0/clk_count_i_3 ), .A1(\U0/clk_count_i_2 ), .D0(\U0/n3141 ), 
    .C0(\U0/n3466 ), .A0(\U0/n3467 ), .M1(\U0/n128 ), .FXB(\U0/n3468 ), 
    .FXA(\U0/n3471 ), .OFX0(\U0/n3468 ), .F1(\U0/n3466 ), 
    .OFX1(\U0/reset_clk_counter_i ));
  U0_i33_SLICE_62 \U0/i33/SLICE_62 ( .D1(i_addr_c_20), .B1(\U0/n128 ), 
    .A1(\U0/n130 ), .D0(\U0/n3380 ), .C0(\U0/n370 ), .B0(i_addr_c_10), 
    .A0(i_disable_precharge_c), .M0(\U0/n3200 ), .OFX0(\U0/n3096 ));
  U0_i60_SLICE_63 \U0/i60/SLICE_63 ( .D1(\U0/n38 ), .C1(\U0/clk_count_i_1 ), 
    .B1(\U0/clk_count_i_0 ), .A1(\U0/n350 ), .D0(\U0/n352 ), .C0(\U0/n3152 ), 
    .B0(\U0/clk_count_i_0 ), .A0(\U0/n372 ), .M0(\U0/n3197 ), .OFX0(\U0/n44 ));
  U0_i30_SLICE_64 \U0/i30/SLICE_64 ( .D1(\U0/n128 ), .C1(\U0/n130 ), 
    .A1(i_addr_c_19), .D0(\U0/n379 ), .C0(\U0/n375 ), .B0(\U0/n370 ), 
    .A0(i_addr_c_9), .M0(\U0/n3200 ), .OFX0(\U0/n3100 ));
  U0_i30_adj_28_SLICE_65 \U0/i30_adj_28/SLICE_65 ( .D1(\U0/n130 ), 
    .C1(\U0/n128 ), .A1(i_addr_c_17), .D0(\U0/n379 ), .C0(\U0/n370 ), 
    .B0(i_addr_c_7), .A0(\U0/n375 ), .M0(\U0/n3200 ), .OFX0(\U0/n3102 ));
  U0_i30_adj_29_SLICE_66 \U0/i30_adj_29/SLICE_66 ( .D1(\U0/n130 ), 
    .C1(\U0/n128 ), .B1(i_addr_c_18), .D0(\U0/n379 ), .C0(\U0/n370 ), 
    .B0(\U0/n375 ), .A0(i_addr_c_8), .M0(\U0/n3200 ), .OFX0(\U0/n3104 ));
  U0_i2982_SLICE_67 \U0/i2982/SLICE_67 ( .D1(\U0/n379 ), .C1(\U0/n375 ), 
    .B1(\U0/n3163 ), .D0(\U0/n134 ), .B0(\U0/n130 ), .A0(\U0/n132 ), 
    .M0(\U0/n128 ), .OFX0(\U0/n3339 ));
  U0_mux_97_i12_SLICE_68 \U0/mux_97_i12/SLICE_68 ( .D1(\U0/n130 ), 
    .C1(\U0/n128 ), .B1(i_addr_c_21), .D0(\U0/n379 ), .C0(\U0/n370 ), 
    .B0(\U0/n375 ), .A0(i_addr_c_11), .M0(\U0/n3200 ), .OFX0(\U0/n213 ));
  U0_i2992_SLICE_69 \U0/i2992/SLICE_69 ( .D1(\U0/n379 ), .C1(\U0/n370 ), 
    .B1(\U0/n356 ), .A1(\U0/n699 ), .C0(\U0/n130 ), .B0(\U0/n136 ), 
    .M0(\U0/n128 ), .OFX0(\U0/n3394 ));
  U0_SLICE_70 \U0/SLICE_70 ( .D1(\U0/n717 ), .C1(\U0/n6_adj_9 ), 
    .B1(\U0/n350 ), .A1(\U0/n699 ), .D0(\U0/n6_adj_9 ), .C0(\U0/n367 ), 
    .B0(\U0/n380 ), .A0(\U0/n381 ), .F0(\U0/n717 ), .F1(\U0/n3141 ));
  U0_SLICE_71 \U0/SLICE_71 ( .D1(i_burststop_req_c), .C1(\U0/n15_adj_10 ), 
    .B1(\U0/n3372 ), .A1(\U0/n351 ), .D0(\U0/n3388 ), .C0(\U0/n3389 ), 
    .B0(\U0/n353 ), .A0(i_burststop_req_c), .F0(\U0/n15_adj_10 ), 
    .F1(\U0/n1196 ));
  U0_SLICE_72 \U0/SLICE_72 ( .D1(\U0/n353 ), .B1(i_burststop_req_c), 
    .A1(\U0/n3372 ), .D0(\U0/n353 ), .C0(\U0/n692 ), .B0(\U0/n3379 ), 
    .A0(\U0/n351 ), .M0(\U0/n135 ), .LSR(\U0/n3379 ), .CLK(i_clk_c), 
    .F0(\U0/n719 ), .Q0(\U0/n134 ), .F1(\U0/n692 ));
  SLICE_73 SLICE_73( .D1(\U2/n3180 ), .C1(\U2/n8 ), .B1(\U2/lfsr_reg_i_3 ), 
    .A1(\U2/lfsr_reg_i_6 ), .C0(\U2/lfsr_reg_i_10 ), .B0(\U2/lfsr_reg_i_7 ), 
    .A0(\U2/lfsr_reg_i_8 ), .M1(\U0/n131 ), .M0(\U0/n133 ), .LSR(\U0/n3506 ), 
    .CLK(i_clk_c), .F0(\U2/n8 ), .Q0(\U0/n132 ), .F1(\U2/n3184 ), 
    .Q1(\U0/n130 ));
  U0_SLICE_74 \U0/SLICE_74 ( .D1(\U0/n379 ), .C1(\U0/n375 ), .B1(\U0/n367 ), 
    .A1(i_addr_c_9), .D0(\U0/n130 ), .C0(\U0/n370 ), .B0(\U0/n15 ), 
    .A0(\U0/n128 ), .F0(\U0/n3112 ), .F1(\U0/n15 ));
  SLICE_75 SLICE_75( .B1(i_selfrefresh_req_c), .A1(refresh_req_i), 
    .D0(\U0/n381 ), .C0(\U0/n3381 ), .B0(i_adv_c), .A0(\U0/n368 ), 
    .M1(\U2/lfsr_reg_i_6 ), .M0(\U2/lfsr_reg_i_5 ), .CE(autorefresh_enable_i), 
    .LSR(\U2/n1881 ), .CLK(i_clk_c), .F0(\U0/n32 ), .Q0(\U2/lfsr_reg_i_6 ), 
    .F1(\U0/n3381 ), .Q1(\U2/lfsr_reg_i_7 ));
  U0_SLICE_76 \U0/SLICE_76 ( .D1(\U0/n379 ), .C1(\U0/n370 ), .A1(\U0/n375 ), 
    .D0(i_addr_c_15), .C0(\U0/n5 ), .B0(\U0/n367 ), .A0(i_addr_c_5), 
    .F0(\U0/n1008 ), .F1(\U0/n5 ));
  SLICE_77 SLICE_77( .D1(\U0/n3387 ), .C1(\U0/n3373 ), .B1(i_precharge_req_c), 
    .A1(i_loadmod_req_c), .D0(i_selfrefresh_req_c), .C0(o_init_done_c), 
    .B0(\U0/n381 ), .A0(refresh_req_i), .M1(\U2/lfsr_reg_i_2 ), 
    .M0(\U2/lfsr_reg_i_1 ), .CE(autorefresh_enable_i), .LSR(\U2/n1881 ), 
    .CLK(i_clk_c), .F0(\U0/n3373 ), .Q0(\U2/lfsr_reg_i_2 ), .F1(\U0/n1138 ), 
    .Q1(\U2/lfsr_reg_i_3 ));
  U0_SLICE_78 \U0/SLICE_78 ( .D1(\U0/n717 ), .C1(\U0/n2192 ), .B1(\U0/n3377 ), 
    .A1(\U0/n699 ), .D0(\U0/n360 ), .A0(\U0/n374 ), .M0(i_burststop_req_c), 
    .LSR(\U0/n351 ), .CLK(i_clk_c), .F0(\U0/n699 ), .Q0(\U0/n374 ), 
    .F1(\U0/n722 ));
  SLICE_79 SLICE_79( .D1(\U0/n130 ), .C1(\U0/n370 ), .B1(\U0/n128 ), 
    .A1(\U0/n15_adj_2 ), .D0(\U0/n367 ), .C0(\U0/n379 ), .B0(\U0/n375 ), 
    .A0(i_addr_c_8), .M1(\U1/U1/lfsr_reg_i_2 ), .M0(\U1/U1/lfsr_reg_i_1 ), 
    .LSR(\U1/U1/lfsr_equal ), .CLK(i_clk_c), .F0(\U0/n15_adj_2 ), 
    .Q0(\U1/U1/lfsr_reg_i_2 ), .F1(\U0/n3114 ), .Q1(\U1/U1/lfsr_reg_i_3 ));
  SLICE_80 SLICE_80( .D1(\U0/n3163 ), .C1(\U0/n128 ), .B1(\U0/n4 ), 
    .A1(\U0/n3013 ), .C0(\U0/n367 ), .A0(\U0/n356 ), .M1(\U1/U5/lfsr_reg_i_4 ), 
    .M0(\U1/U5/lfsr_reg_i_3 ), .LSR(lfsr_256_equal_i), .CLK(lfsr_64_done_i), 
    .F0(\U0/n4 ), .Q0(\U1/U5/lfsr_reg_i_4 ), .F1(\U0/n563 ), 
    .Q1(\U1/U5/lfsr_reg_i_5 ));
  U0_SLICE_81 \U0/SLICE_81 ( .B1(\U0/clk_count_i_3 ), .A1(\U0/clk_count_i_2 ), 
    .D0(\U0/clk_count_i_1 ), .C0(\U0/clk_count_i_0 ), .B0(\U0/n129 ), 
    .A0(\U0/n3389 ), .F0(\U0/n164 ), .F1(\U0/n3389 ));
  SLICE_82 SLICE_82( .D1(\U0/n128 ), .C1(\U0/n980 ), .A1(\U0/n130 ), 
    .D0(i_addr_c_0), .C0(\U0/n367 ), .B0(i_addr_c_10), .A0(\U0/n5 ), 
    .M1(\U2/lfsr_reg_i_4 ), .M0(\U2/lfsr_reg_i_3 ), .CE(autorefresh_enable_i), 
    .LSR(\U2/n1881 ), .CLK(i_clk_c), .F0(\U0/n980 ), .Q0(\U2/lfsr_reg_i_4 ), 
    .F1(\U0/n224 ), .Q1(\U2/lfsr_reg_i_5 ));
  U0_SLICE_83 \U0/SLICE_83 ( .D1(\U0/n130 ), .C1(\U0/n1002 ), .B1(\U0/n128 ), 
    .D0(\U0/n5 ), .C0(i_addr_c_12), .B0(i_addr_c_2), .A0(\U0/n367 ), 
    .F0(\U0/n1002 ), .F1(\U0/n222 ));
  U0_SLICE_84 \U0/SLICE_84 ( .D1(\U0/n3116 ), .C1(\U0/n366 ), .B1(\U0/n378 ), 
    .A1(\U0/n352 ), .C0(\U0/n6_adj_9 ), .A0(\U0/n367 ), .F0(\U0/n3377 ), 
    .F1(\U0/n6_adj_9 ));
  U0_SLICE_85 \U0/SLICE_85 ( .D1(\U0/n130 ), .C1(\U0/n1004 ), .B1(\U0/n128 ), 
    .D0(\U0/n5 ), .C0(\U0/n367 ), .B0(i_addr_c_3), .A0(i_addr_c_13), 
    .F0(\U0/n1004 ), .F1(\U0/n221 ));
  U0_SLICE_86 \U0/SLICE_86 ( .D1(i_selfrefresh_req_c), .C1(o_init_done_c), 
    .B1(\U0/n381 ), .A1(refresh_req_i), .D0(i_adv_c), .C0(\U0/n3390 ), 
    .B0(\U0/n3157 ), .A0(i_power_down_c), .F0(\U0/n3128 ), .F1(\U0/n3157 ));
  SLICE_87 SLICE_87( .D1(\U0/clk_count_i_3 ), .C1(\U0/clk_count_i_0 ), 
    .B1(\U0/clk_count_i_2 ), .A1(\U0/clk_count_i_1 ), .D0(i_disable_active_c), 
    .C0(\U0/n3379 ), .B0(\U0/n3128 ), .A0(\U0/n365 ), .M1(\U2/lfsr_reg_i_8 ), 
    .M0(\U2/lfsr_reg_i_7 ), .CE(autorefresh_enable_i), .LSR(\U2/n1881 ), 
    .CLK(i_clk_c), .F0(\U0/n11 ), .Q0(\U2/lfsr_reg_i_8 ), .F1(\U0/n3379 ), 
    .Q1(\U2/lfsr_reg_i_9 ));
  U0_SLICE_88 \U0/SLICE_88 ( .D1(\U0/n130 ), .C1(\U0/n1006 ), .B1(\U0/n128 ), 
    .D0(\U0/n5 ), .C0(i_addr_c_14), .B0(i_addr_c_4), .A0(\U0/n367 ), 
    .F0(\U0/n1006 ), .F1(\U0/n220 ));
  U0_SLICE_89 \U0/SLICE_89 ( .D1(\U0/n722 ), .C1(\U0/n4_adj_11 ), 
    .B1(\U0/n6_adj_9 ), .A1(\U0/n719 ), .D0(\U0/n717 ), .C0(\U0/n350 ), 
    .B0(\U0/n376 ), .A0(\U0/n699 ), .F0(\U0/n4_adj_11 ), .F1(\U0/n3467 ));
  U0_SLICE_90 \U0/SLICE_90 ( .D1(\U0/n10 ), .C1(\U0/n14 ), 
    .B1(\U0/read_req_cnt_i_9 ), .A1(\U0/read_req_cnt_i_2 ), 
    .C0(\U0/read_req_cnt_i_4 ), .B0(\U0/read_req_cnt_i_3 ), .F0(\U0/n10 ), 
    .F1(o_data_req_c));
  U0_SLICE_91 \U0/SLICE_91 ( .D1(\U0/n130 ), .C1(\U0/n1010 ), .B1(\U0/n128 ), 
    .D0(\U0/n5 ), .C0(\U0/n367 ), .B0(i_addr_c_16), .A0(i_addr_c_6), 
    .F0(\U0/n1010 ), .F1(\U0/n218 ));
  U0_SLICE_92 \U0/SLICE_92 ( .D1(\U0/n3379 ), .C1(\U0/n3013 ), .B1(\U0/n129 ), 
    .A1(\U0/n135 ), .D0(\U0/n132 ), .C0(\U0/n130 ), .B0(\U0/n136 ), 
    .A0(\U0/n134 ), .F0(\U0/n3013 ), .F1(\U0/n2216 ));
  SLICE_93 SLICE_93( .D1(\U0/clk_count_i_1 ), .C1(\U0/clk_count_i_0 ), 
    .B1(\U0/clk_count_i_3 ), .A1(\U0/clk_count_i_2 ), .D0(\U0/clk_count_i_1 ), 
    .C0(\U0/clk_count_i_0 ), .B0(\U0/clk_count_i_3 ), .A0(\U0/clk_count_i_2 ), 
    .M1(\U1/U1/lfsr_reg_i_4 ), .M0(\U1/U1/lfsr_reg_i_3 ), 
    .LSR(\U1/U1/lfsr_equal ), .CLK(i_clk_c), .F0(\U0/n3375 ), 
    .Q0(\U1/U1/lfsr_reg_i_4 ), .F1(\U0/n3376 ), .Q1(\U1/U1/lfsr_reg_i_5 ));
  SLICE_94 SLICE_94( .D1(\U0/clk_count_i_0 ), .C1(\U0/clk_count_i_3 ), 
    .B1(\U0/clk_count_i_1 ), .A1(\U0/clk_count_i_2 ), .D0(\U0/clk_count_i_0 ), 
    .C0(\U0/clk_count_i_3 ), .B0(\U0/clk_count_i_1 ), .A0(\U0/clk_count_i_2 ), 
    .M1(\U1/U5/lfsr_reg_i_6 ), .M0(\U1/U5/lfsr_reg_i_5 ), 
    .LSR(lfsr_256_equal_i), .CLK(lfsr_64_done_i), .F0(\U0/n3506 ), 
    .Q0(\U1/U5/lfsr_reg_i_6 ), .F1(\U0/n3170 ), .Q1(\U1/U5/lfsr_reg_i_7 ));
  SLICE_95 SLICE_95( .C1(\U0/n358 ), .B1(\U0/n3379 ), .A1(\U0/n364 ), 
    .D0(i_disable_precharge_c), .C0(\U0/n358 ), .B0(\U0/n3379 ), 
    .A0(\U0/n364 ), .M1(\U1/U5/lfsr_reg_i_2 ), .M0(\U1/U5/lfsr_reg_i_1 ), 
    .LSR(lfsr_256_equal_i), .CLK(lfsr_64_done_i), .F0(\U0/n3155 ), 
    .Q0(\U1/U5/lfsr_reg_i_2 ), .F1(\U0/n3371 ), .Q1(\U1/U5/lfsr_reg_i_3 ));
  U0_SLICE_96 \U0/SLICE_96 ( .C1(o_init_done_c), .B1(i_loadmod_req_c), 
    .A1(i_adv_c), .C0(i_precharge_req_c), .B0(i_loadmod_req_c), .A0(i_adv_c), 
    .F0(\U0/n3186 ), .F1(\U0/n3374 ));
  U0_SLICE_97 \U0/SLICE_97 ( .B1(\U0/n367 ), .A1(\U0/n365 ), .D0(\U0/n351 ), 
    .C0(\U0/n379 ), .B0(\U0/n367 ), .A0(\U0/n365 ), .F0(\U0/n3167 ), 
    .F1(\U0/n3382 ));
  U0_SLICE_98 \U0/SLICE_98 ( .C1(i_burststop_req_c), .B1(\U0/n353 ), 
    .D0(\U0/n364 ), .B0(\U0/n360 ), .A0(\U0/n353 ), .F0(\U0/n2987 ), 
    .F1(\U0/n3152 ));
  U0_SLICE_99 \U0/SLICE_99 ( .D1(\U0/n367 ), .C1(\U0/n128 ), .D0(\U0/n5 ), 
    .C0(\U0/n367 ), .B0(i_addr_c_11), .A0(i_addr_c_1), .F0(\U0/n1000 ), 
    .F1(\U0/n3200 ));
  U0_SLICE_100 \U0/SLICE_100 ( .D1(\U0/n3391 ), .C1(\U0/clk_count_i_1 ), 
    .B1(\U0/n350 ), .A1(\U0/clk_count_i_0 ), .D0(\U0/clk_count_i_1 ), 
    .A0(\U0/clk_count_i_2 ), .F0(\U0/n3197 ), .F1(\U0/n2192 ));
  U0_SLICE_101 \U0/SLICE_101 ( .C1(i_burststop_req_c), .A1(\U0/n351 ), 
    .C0(i_burststop_req_c), .B0(\U0/read_req_cnt_rst_i ), .F0(\U0/n954_adj_1 ), 
    .F1(\U0/n3386 ));
  U0_SLICE_102 \U0/SLICE_102 ( .D1(\U0/n32 ), .C1(\U0/clk_count_i_3 ), 
    .B1(\U0/n44 ), .A1(i_power_down_c), .C0(i_loadmod_req_c), 
    .B0(i_precharge_req_c), .M0(\U0/n353 ), .LSR(i_burststop_req_c), 
    .CLK(i_clk_c), .F0(\U0/n3390 ), .Q0(\U0/n360 ), .F1(\U0/n6 ));
  o_data_30_ \o_data[30]_I ( .PADDO(GND_net), .odata30(o_data[30]));
  o_data_31_ \o_data[31]_I ( .PADDO(GND_net), .odata31(o_data[31]));
  o_read_done o_read_done_I( .PADDO(o_read_done_c), .o_read_done(o_read_done));
  o_data_29_ \o_data[29]_I ( .PADDO(GND_net), .odata29(o_data[29]));
  o_write_done o_write_done_I( .PADDO(o_write_done_c), 
    .o_write_done(o_write_done));
  o_sdram_clk o_sdram_clk_I( .PADDO(o_sdram_clk_c), .o_sdram_clk(o_sdram_clk));
  o_sdram_wen o_sdram_wen_I( .IOLDO(o_sdram_wen_c), .o_sdram_wen(o_sdram_wen));
  o_sdram_wen_MGIOL o_sdram_wen_MGIOL( .IOLDO(o_sdram_wen_c), 
    .OPOS(\U0/n3394 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_rasn o_sdram_rasn_I( .IOLDO(o_sdram_rasn_c), 
    .o_sdram_rasn(o_sdram_rasn));
  o_sdram_rasn_MGIOL o_sdram_rasn_MGIOL( .IOLDO(o_sdram_rasn_c), 
    .OPOS(\U0/n563 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_dqm_0_ \o_sdram_dqm[0]_I ( .PADDO(o_sdram_dqm_c), 
    .osdramdqm0(o_sdram_dqm[0]));
  o_sdram_dqm_1_ \o_sdram_dqm[1]_I ( .PADDO(o_sdram_dqm_c), 
    .osdramdqm1(o_sdram_dqm[1]));
  o_sdram_dqm_2_ \o_sdram_dqm[2]_I ( .PADDO(GND_net), 
    .osdramdqm2(o_sdram_dqm[2]));
  o_sdram_dqm_3_ \o_sdram_dqm[3]_I ( .PADDO(GND_net), 
    .osdramdqm3(o_sdram_dqm[3]));
  o_sdram_csn o_sdram_csn_I( .PADDO(GND_net), .o_sdram_csn(o_sdram_csn));
  o_sdram_cke o_sdram_cke_I( .IOLDO(o_sdram_cke_c), .o_sdram_cke(o_sdram_cke));
  o_sdram_cke_MGIOL o_sdram_cke_MGIOL( .IOLDO(o_sdram_cke_c), .OPOS(\U0/n541 ), 
    .CE(i_rst_c), .LSR(\U0/n1253 ), .CLK(i_clk_c));
  o_sdram_casn o_sdram_casn_I( .IOLDO(o_sdram_casn_c), 
    .o_sdram_casn(o_sdram_casn));
  o_sdram_casn_MGIOL o_sdram_casn_MGIOL( .IOLDO(o_sdram_casn_c), 
    .OPOS(\U0/n3339 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_blkaddr_0_ \o_sdram_blkaddr[0]_I ( .IOLDO(o_sdram_blkaddr_c), 
    .osdramblkaddr0(o_sdram_blkaddr[0]));
  o_sdram_blkaddr_0__MGIOL \o_sdram_blkaddr[0]_MGIOL ( 
    .IOLDO(o_sdram_blkaddr_c), .OPOS(\U0/n3114 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_blkaddr_1_ \o_sdram_blkaddr[1]_I ( .IOLDO(n887), 
    .osdramblkaddr1(o_sdram_blkaddr[1]));
  o_sdram_blkaddr_1__MGIOL \o_sdram_blkaddr[1]_MGIOL ( .IOLDO(n887), 
    .OPOS(\U0/n3112 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_0_ \o_sdram_addr[0]_I ( .IOLDO(o_sdram_addr_c), 
    .osdramaddr0(o_sdram_addr[0]));
  o_sdram_addr_0__MGIOL \o_sdram_addr[0]_MGIOL ( .IOLDO(o_sdram_addr_c), 
    .OPOS(\U0/n224 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_1_ \o_sdram_addr[1]_I ( .IOLDO(n886), 
    .osdramaddr1(o_sdram_addr[1]));
  o_sdram_addr_1__MGIOL \o_sdram_addr[1]_MGIOL ( .IOLDO(n886), 
    .OPOS(\U0/n1000 ), .CE(i_rst_c), .LSR(\U0/n1253 ), .CLK(i_clk_c));
  o_sdram_addr_2_ \o_sdram_addr[2]_I ( .IOLDO(n885), 
    .osdramaddr2(o_sdram_addr[2]));
  o_sdram_addr_2__MGIOL \o_sdram_addr[2]_MGIOL ( .IOLDO(n885), 
    .OPOS(\U0/n222 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_3_ \o_sdram_addr[3]_I ( .IOLDO(n884), 
    .osdramaddr3(o_sdram_addr[3]));
  o_sdram_addr_3__MGIOL \o_sdram_addr[3]_MGIOL ( .IOLDO(n884), 
    .OPOS(\U0/n221 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_4_ \o_sdram_addr[4]_I ( .IOLDO(n883), 
    .osdramaddr4(o_sdram_addr[4]));
  o_sdram_addr_4__MGIOL \o_sdram_addr[4]_MGIOL ( .IOLDO(n883), 
    .OPOS(\U0/n220 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_5_ \o_sdram_addr[5]_I ( .IOLDO(n3511), 
    .osdramaddr5(o_sdram_addr[5]));
  o_sdram_addr_5__MGIOL \o_sdram_addr[5]_MGIOL ( .IOLDO(n3511), 
    .OPOS(\U0/n1008 ), .CE(i_rst_c), .LSR(\U0/n1253 ), .CLK(i_clk_c));
  o_sdram_addr_6_ \o_sdram_addr[6]_I ( .IOLDO(n881), 
    .osdramaddr6(o_sdram_addr[6]));
  o_sdram_addr_6__MGIOL \o_sdram_addr[6]_MGIOL ( .IOLDO(n881), 
    .OPOS(\U0/n218 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_7_ \o_sdram_addr[7]_I ( .IOLDO(n880), 
    .osdramaddr7(o_sdram_addr[7]));
  o_sdram_addr_7__MGIOL \o_sdram_addr[7]_MGIOL ( .IOLDO(n880), 
    .OPOS(\U0/n3102 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_8_ \o_sdram_addr[8]_I ( .IOLDO(n879), 
    .osdramaddr8(o_sdram_addr[8]));
  o_sdram_addr_8__MGIOL \o_sdram_addr[8]_MGIOL ( .IOLDO(n879), 
    .OPOS(\U0/n3104 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_9_ \o_sdram_addr[9]_I ( .IOLDO(n878), 
    .osdramaddr9(o_sdram_addr[9]));
  o_sdram_addr_9__MGIOL \o_sdram_addr[9]_MGIOL ( .IOLDO(n878), 
    .OPOS(\U0/n3100 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_10_ \o_sdram_addr[10]_I ( .IOLDO(n877), 
    .osdramaddr10(o_sdram_addr[10]));
  o_sdram_addr_10__MGIOL \o_sdram_addr[10]_MGIOL ( .IOLDO(n877), 
    .OPOS(\U0/n3096 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_11_ \o_sdram_addr[11]_I ( .IOLDO(n876), 
    .osdramaddr11(o_sdram_addr[11]));
  o_sdram_addr_11__MGIOL \o_sdram_addr[11]_MGIOL ( .IOLDO(n876), 
    .OPOS(\U0/n213 ), .CE(i_rst_c), .CLK(i_clk_c));
  o_sdram_addr_12_ \o_sdram_addr[12]_I ( .PADDO(GND_net), 
    .osdramaddr12(o_sdram_addr[12]));
  o_ack o_ack_I( .PADDO(o_ack_c), .o_ack(o_ack));
  o_init_done o_init_done_I( .PADDO(o_init_done_c), .o_init_done(o_init_done));
  o_busy o_busy_I( .PADDO(o_busy_c), .o_busy(o_busy));
  o_data_req o_data_req_I( .PADDO(o_data_req_c), .o_data_req(o_data_req));
  o_data_valid o_data_valid_I( .IOLDO(o_data_valid_c), 
    .o_data_valid(o_data_valid));
  o_data_valid_MGIOL o_data_valid_MGIOL( .IOLDO(o_data_valid_c), 
    .OPOS(\U0/n2987 ), .CLK(i_clk_c));
  io_sdram_dq_0_ \io_sdram_dq[0]_I ( .PADDI(io_sdram_dq_out_0), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_0), 
    .iosdramdq0(io_sdram_dq[0]));
  io_sdram_dq_15_ \io_sdram_dq[15]_I ( .PADDI(io_sdram_dq_out_15), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_15), 
    .iosdramdq15(io_sdram_dq[15]));
  io_sdram_dq_9_ \io_sdram_dq[9]_I ( .PADDI(io_sdram_dq_out_9), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_9), 
    .iosdramdq9(io_sdram_dq[9]));
  io_sdram_dq_10_ \io_sdram_dq[10]_I ( .PADDI(io_sdram_dq_out_10), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_10), 
    .iosdramdq10(io_sdram_dq[10]));
  io_sdram_dq_11_ \io_sdram_dq[11]_I ( .PADDI(io_sdram_dq_out_11), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_11), 
    .iosdramdq11(io_sdram_dq[11]));
  io_sdram_dq_1_ \io_sdram_dq[1]_I ( .PADDI(io_sdram_dq_out_1), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_1), 
    .iosdramdq1(io_sdram_dq[1]));
  io_sdram_dq_2_ \io_sdram_dq[2]_I ( .PADDI(io_sdram_dq_out_2), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_2), 
    .iosdramdq2(io_sdram_dq[2]));
  io_sdram_dq_3_ \io_sdram_dq[3]_I ( .PADDI(io_sdram_dq_out_3), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_3), 
    .iosdramdq3(io_sdram_dq[3]));
  io_sdram_dq_4_ \io_sdram_dq[4]_I ( .PADDI(io_sdram_dq_out_4), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_4), 
    .iosdramdq4(io_sdram_dq[4]));
  io_sdram_dq_12_ \io_sdram_dq[12]_I ( .PADDI(io_sdram_dq_out_12), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_12), 
    .iosdramdq12(io_sdram_dq[12]));
  io_sdram_dq_13_ \io_sdram_dq[13]_I ( .PADDI(io_sdram_dq_out_13), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_13), 
    .iosdramdq13(io_sdram_dq[13]));
  io_sdram_dq_14_ \io_sdram_dq[14]_I ( .PADDI(io_sdram_dq_out_14), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_14), 
    .iosdramdq14(io_sdram_dq[14]));
  io_sdram_dq_5_ \io_sdram_dq[5]_I ( .PADDI(io_sdram_dq_out_5), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_5), 
    .iosdramdq5(io_sdram_dq[5]));
  io_sdram_dq_6_ \io_sdram_dq[6]_I ( .PADDI(io_sdram_dq_out_6), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_6), 
    .iosdramdq6(io_sdram_dq[6]));
  io_sdram_dq_7_ \io_sdram_dq[7]_I ( .PADDI(io_sdram_dq_out_7), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_7), 
    .iosdramdq7(io_sdram_dq[7]));
  io_sdram_dq_8_ \io_sdram_dq[8]_I ( .PADDI(io_sdram_dq_out_8), 
    .PADDT(\U0/sdram_dq_en_i ), .PADDO(i_data_c_8), 
    .iosdramdq8(io_sdram_dq[8]));
  o_data_28_ \o_data[28]_I ( .PADDO(GND_net), .odata28(o_data[28]));
  o_data_27_ \o_data[27]_I ( .PADDO(GND_net), .odata27(o_data[27]));
  o_data_26_ \o_data[26]_I ( .PADDO(GND_net), .odata26(o_data[26]));
  o_data_25_ \o_data[25]_I ( .PADDO(GND_net), .odata25(o_data[25]));
  o_data_24_ \o_data[24]_I ( .PADDO(GND_net), .odata24(o_data[24]));
  o_data_23_ \o_data[23]_I ( .PADDO(GND_net), .odata23(o_data[23]));
  o_data_22_ \o_data[22]_I ( .PADDO(GND_net), .odata22(o_data[22]));
  o_data_21_ \o_data[21]_I ( .PADDO(GND_net), .odata21(o_data[21]));
  o_data_20_ \o_data[20]_I ( .PADDO(GND_net), .odata20(o_data[20]));
  o_data_19_ \o_data[19]_I ( .PADDO(GND_net), .odata19(o_data[19]));
  o_data_18_ \o_data[18]_I ( .PADDO(GND_net), .odata18(o_data[18]));
  o_data_17_ \o_data[17]_I ( .PADDO(GND_net), .odata17(o_data[17]));
  o_data_16_ \o_data[16]_I ( .PADDO(GND_net), .odata16(o_data[16]));
  o_data_15_ \o_data[15]_I ( .IOLDO(n892), .odata15(o_data[15]));
  o_data_15__MGIOL \o_data[15]_MGIOL ( .IOLDO(n892), .OPOS(io_sdram_dq_out_15), 
    .CLK(i_clk_c));
  o_data_14_ \o_data[14]_I ( .IOLDO(n893), .odata14(o_data[14]));
  o_data_14__MGIOL \o_data[14]_MGIOL ( .IOLDO(n893), .OPOS(io_sdram_dq_out_14), 
    .CLK(i_clk_c));
  o_data_13_ \o_data[13]_I ( .IOLDO(n894), .odata13(o_data[13]));
  o_data_13__MGIOL \o_data[13]_MGIOL ( .IOLDO(n894), .OPOS(io_sdram_dq_out_13), 
    .CLK(i_clk_c));
  o_data_12_ \o_data[12]_I ( .IOLDO(n895), .odata12(o_data[12]));
  o_data_12__MGIOL \o_data[12]_MGIOL ( .IOLDO(n895), .OPOS(io_sdram_dq_out_12), 
    .CLK(i_clk_c));
  o_data_11_ \o_data[11]_I ( .IOLDO(n896), .odata11(o_data[11]));
  o_data_11__MGIOL \o_data[11]_MGIOL ( .IOLDO(n896), .OPOS(io_sdram_dq_out_11), 
    .CLK(i_clk_c));
  o_data_10_ \o_data[10]_I ( .IOLDO(n897), .odata10(o_data[10]));
  o_data_10__MGIOL \o_data[10]_MGIOL ( .IOLDO(n897), .OPOS(io_sdram_dq_out_10), 
    .CLK(i_clk_c));
  o_data_9_ \o_data[9]_I ( .IOLDO(n898), .odata9(o_data[9]));
  o_data_9__MGIOL \o_data[9]_MGIOL ( .IOLDO(n898), .OPOS(io_sdram_dq_out_9), 
    .CLK(i_clk_c));
  o_data_8_ \o_data[8]_I ( .IOLDO(n899), .odata8(o_data[8]));
  o_data_8__MGIOL \o_data[8]_MGIOL ( .IOLDO(n899), .OPOS(io_sdram_dq_out_8), 
    .CLK(i_clk_c));
  o_data_7_ \o_data[7]_I ( .IOLDO(n900), .odata7(o_data[7]));
  o_data_7__MGIOL \o_data[7]_MGIOL ( .IOLDO(n900), .OPOS(io_sdram_dq_out_7), 
    .CLK(i_clk_c));
  o_data_6_ \o_data[6]_I ( .IOLDO(n901), .odata6(o_data[6]));
  o_data_6__MGIOL \o_data[6]_MGIOL ( .IOLDO(n901), .OPOS(io_sdram_dq_out_6), 
    .CLK(i_clk_c));
  o_data_5_ \o_data[5]_I ( .IOLDO(n902), .odata5(o_data[5]));
  o_data_5__MGIOL \o_data[5]_MGIOL ( .IOLDO(n902), .OPOS(io_sdram_dq_out_5), 
    .CLK(i_clk_c));
  o_data_4_ \o_data[4]_I ( .IOLDO(n903), .odata4(o_data[4]));
  o_data_4__MGIOL \o_data[4]_MGIOL ( .IOLDO(n903), .OPOS(io_sdram_dq_out_4), 
    .CLK(i_clk_c));
  o_data_3_ \o_data[3]_I ( .IOLDO(n3512), .odata3(o_data[3]));
  o_data_3__MGIOL \o_data[3]_MGIOL ( .IOLDO(n3512), .OPOS(io_sdram_dq_out_3), 
    .CLK(i_clk_c));
  o_data_2_ \o_data[2]_I ( .IOLDO(n905), .odata2(o_data[2]));
  o_data_2__MGIOL \o_data[2]_MGIOL ( .IOLDO(n905), .OPOS(io_sdram_dq_out_2), 
    .CLK(i_clk_c));
  o_data_1_ \o_data[1]_I ( .IOLDO(n906), .odata1(o_data[1]));
  o_data_1__MGIOL \o_data[1]_MGIOL ( .IOLDO(n906), .OPOS(io_sdram_dq_out_1), 
    .CLK(i_clk_c));
  o_data_0_ \o_data[0]_I ( .IOLDO(n907), .odata0(o_data[0]));
  o_data_0__MGIOL \o_data[0]_MGIOL ( .IOLDO(n907), .OPOS(io_sdram_dq_out_0), 
    .CLK(i_clk_c));
  i_data_15_ \i_data[15]_I ( .PADDI(i_data_c_15), .idata15(i_data[15]));
  i_data_14_ \i_data[14]_I ( .PADDI(i_data_c_14), .idata14(i_data[14]));
  i_data_13_ \i_data[13]_I ( .PADDI(i_data_c_13), .idata13(i_data[13]));
  i_data_12_ \i_data[12]_I ( .PADDI(i_data_c_12), .idata12(i_data[12]));
  i_data_11_ \i_data[11]_I ( .PADDI(i_data_c_11), .idata11(i_data[11]));
  i_data_10_ \i_data[10]_I ( .PADDI(i_data_c_10), .idata10(i_data[10]));
  i_data_9_ \i_data[9]_I ( .PADDI(i_data_c_9), .idata9(i_data[9]));
  i_data_8_ \i_data[8]_I ( .PADDI(i_data_c_8), .idata8(i_data[8]));
  i_data_7_ \i_data[7]_I ( .PADDI(i_data_c_7), .idata7(i_data[7]));
  i_data_6_ \i_data[6]_I ( .PADDI(i_data_c_6), .idata6(i_data[6]));
  i_data_5_ \i_data[5]_I ( .PADDI(i_data_c_5), .idata5(i_data[5]));
  i_data_4_ \i_data[4]_I ( .PADDI(i_data_c_4), .idata4(i_data[4]));
  i_data_3_ \i_data[3]_I ( .PADDI(i_data_c_3), .idata3(i_data[3]));
  i_data_2_ \i_data[2]_I ( .PADDI(i_data_c_2), .idata2(i_data[2]));
  i_data_1_ \i_data[1]_I ( .PADDI(i_data_c_1), .idata1(i_data[1]));
  i_data_0_ \i_data[0]_I ( .PADDI(i_data_c_0), .idata0(i_data[0]));
  i_addr_21_ \i_addr[21]_I ( .PADDI(i_addr_c_21), .iaddr21(i_addr[21]));
  i_addr_20_ \i_addr[20]_I ( .PADDI(i_addr_c_20), .iaddr20(i_addr[20]));
  i_addr_19_ \i_addr[19]_I ( .PADDI(i_addr_c_19), .iaddr19(i_addr[19]));
  i_addr_18_ \i_addr[18]_I ( .PADDI(i_addr_c_18), .iaddr18(i_addr[18]));
  i_addr_17_ \i_addr[17]_I ( .PADDI(i_addr_c_17), .iaddr17(i_addr[17]));
  i_addr_16_ \i_addr[16]_I ( .PADDI(i_addr_c_16), .iaddr16(i_addr[16]));
  i_addr_15_ \i_addr[15]_I ( .PADDI(i_addr_c_15), .iaddr15(i_addr[15]));
  i_addr_14_ \i_addr[14]_I ( .PADDI(i_addr_c_14), .iaddr14(i_addr[14]));
  i_addr_13_ \i_addr[13]_I ( .PADDI(i_addr_c_13), .iaddr13(i_addr[13]));
  i_addr_12_ \i_addr[12]_I ( .PADDI(i_addr_c_12), .iaddr12(i_addr[12]));
  i_addr_11_ \i_addr[11]_I ( .PADDI(i_addr_c_11), .iaddr11(i_addr[11]));
  i_addr_10_ \i_addr[10]_I ( .PADDI(i_addr_c_10), .iaddr10(i_addr[10]));
  i_addr_9_ \i_addr[9]_I ( .PADDI(i_addr_c_9), .iaddr9(i_addr[9]));
  i_addr_8_ \i_addr[8]_I ( .PADDI(i_addr_c_8), .iaddr8(i_addr[8]));
  i_addr_7_ \i_addr[7]_I ( .PADDI(i_addr_c_7), .iaddr7(i_addr[7]));
  i_addr_6_ \i_addr[6]_I ( .PADDI(i_addr_c_6), .iaddr6(i_addr[6]));
  i_addr_5_ \i_addr[5]_I ( .PADDI(i_addr_c_5), .iaddr5(i_addr[5]));
  i_addr_4_ \i_addr[4]_I ( .PADDI(i_addr_c_4), .iaddr4(i_addr[4]));
  i_addr_3_ \i_addr[3]_I ( .PADDI(i_addr_c_3), .iaddr3(i_addr[3]));
  i_addr_2_ \i_addr[2]_I ( .PADDI(i_addr_c_2), .iaddr2(i_addr[2]));
  i_addr_1_ \i_addr[1]_I ( .PADDI(i_addr_c_1), .iaddr1(i_addr[1]));
  i_addr_0_ \i_addr[0]_I ( .PADDI(i_addr_c_0), .iaddr0(i_addr[0]));
  i_adv i_adv_I( .PADDI(i_adv_c), .i_adv(i_adv));
  i_clk i_clk_I( .PADDI(i_clk_c), .i_clk(i_clk));
  i_rst i_rst_I( .PADDI(i_rst_c), .i_rst(i_rst));
  i_rwn i_rwn_I( .PADDI(i_rwn_c), .i_rwn(i_rwn));
  i_selfrefresh_req i_selfrefresh_req_I( .PADDI(i_selfrefresh_req_c), 
    .i_selfrefresh_req(i_selfrefresh_req));
  i_loadmod_req i_loadmod_req_I( .PADDI(i_loadmod_req_c), 
    .i_loadmod_req(i_loadmod_req));
  i_burststop_req i_burststop_req_I( .PADDI(i_burststop_req_c), 
    .i_burststop_req(i_burststop_req));
  i_disable_active i_disable_active_I( .PADDI(i_disable_active_c), 
    .i_disable_active(i_disable_active));
  i_disable_precharge i_disable_precharge_I( .PADDI(i_disable_precharge_c), 
    .i_disable_precharge(i_disable_precharge));
  i_precharge_req i_precharge_req_I( .PADDI(i_precharge_req_c), 
    .i_precharge_req(i_precharge_req));
  i_power_down i_power_down_I( .PADDI(i_power_down_c), 
    .i_power_down(i_power_down));
  i_power_down_MGIOL i_power_down_MGIOL( .DI(i_power_down_c), .CLK(i_clk_c), 
    .IN(power_down_reg1_i));
  i_disable_autorefresh i_disable_autorefresh_I( 
    .PADDI(i_disable_autorefresh_c), 
    .i_disable_autorefresh(i_disable_autorefresh));
  GSR_INST GSR_INST( .GSRNET(~i_rst_c));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
endmodule

module U0_SLICE_0 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \U0/read_req_cnt_i_i0_i4 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \U0/read_req_cnt_i_i0_i3 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu2 \U0/add_245_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3JY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5aaa;
  defparam inst1.INIT1 = 16'h5aaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module U0_SLICE_1 ( input A1, DI1, CE, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre \U0/read_req_cnt_i_i0_i0 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20001 \U0/add_245_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module U0_SLICE_2 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \U0/read_req_cnt_i_i0_i6 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \U0/read_req_cnt_i_i0_i5 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu2 \U0/add_245_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module U0_SLICE_3 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \U0/read_req_cnt_i_i0_i2 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \U0/read_req_cnt_i_i0_i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu2 \U0/add_245_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module U0_SLICE_4 ( input A0, DI0, CE, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre \U0/read_req_cnt_i_i0_i9 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20002 \U0/add_245_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(), 
    .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5aaa;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module U0_SLICE_5 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \U0/read_req_cnt_i_i0_i8 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \U0/read_req_cnt_i_i0_i7 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu2 \U0/add_245_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module U0_SLICE_6 ( input C1, A1, A0, DI1, DI0, LSR, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut4 \U0/i2650_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40003 \U0/i565_1_lut_rep_56 ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0004 \U0/clk_count_i_535__i1 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \U0/clk_count_i_535__i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5A5A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40003 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0004 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module U0_SLICE_7 ( input D1, C1, B1, A1, D0, C0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40005 \U0/i2664_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40006 \U0/i2657_2_lut_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \U0/clk_count_i_535__i3 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \U0/clk_count_i_535__i2 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40005 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40006 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_8 ( input D1, C1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40007 \U1/U5/i3_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40008 \U1/U5/i2934_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/o_lfsr_256_done_11 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40007 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40008 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0009 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module SLICE_9 ( input DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40010 m1_lut( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0009 \U0/init_fsm_states_i_FSM_i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40010 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_10 ( input C1, A1, D0, C0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40011 \U0/i2940_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40012 \U0/i638_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/init_fsm_states_i_FSM_i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40011 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0505) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40012 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_12 ( input D1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40013 \U0/i2653_2_lut_rep_61 ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40014 \U0/i636_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/init_fsm_states_i_FSM_i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40013 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40014 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEAE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_14 ( input D1, B1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40015 \U0/equal_314_i6_2_lut_rep_64 ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \U0/i634_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/init_fsm_states_i_FSM_i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40015 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF33) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40016 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_16 ( input D1, A1, D0, B0, A0, DI1, DI0, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40017 \U0/i66_2_lut ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \U0/i632_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/init_fsm_states_i_FSM_i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0009 \U0/init_fsm_states_i_FSM_i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40017 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40018 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEECC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_17 ( input D1, C1, B1, A1, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 \U0/i668_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40020 \U0/i629_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i22 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0021 \U0/init_fsm_states_i_FSM_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40019 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFBF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40020 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0021 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module U0_SLICE_18 ( input D1, C1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40012 \U0/i664_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 \U0/i666_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i20 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i21 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40022 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCECC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_19 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40023 \U0/i1_3_lut_adj_9 ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \U0/i662_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i18 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i19 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40023 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDCDC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0EA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_20 ( input D1, C1, A1, D0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40025 \U0/i658_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \U0/i660_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i16 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i17 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_22 ( input D1, C1, A1, D0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40026 \U0/i654_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \U0/i656_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i13 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i14 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_23 ( input C1, B1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40027 \U0/i1_2_lut_adj_13 ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40028 \U0/i652_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i11 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i12 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40027 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8F88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_24 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40029 \U0/i1_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40030 \U0/i1_4_lut_adj_14 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2A00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40030 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_25 ( input C1, B1, A1, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40031 \U0/i62_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 \U0/i648_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40031 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD8D8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_27 ( input D1, C1, B1, A1, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40028 \U0/i646_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40033 \U0/i1_2_lut_adj_17 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40033 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_28 ( input D1, B1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40034 \U0/i1_2_lut_adj_21 ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40035 \U0/i2_3_lut_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40034 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40035 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_29 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40036 \U0/i3_4_lut_adj_3 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40037 \U0/i644_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0021 \U0/cmd_fsm_states_i_FSM_i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0009 \U0/cmd_fsm_states_i_FSM_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFCE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40037 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_30 ( input D1, B1, D0, C0, A0, DI0, M0, LSR, CLK, output OFX0, 
    Q0 );
  wire   GNDI, \U0/SLICE_30/U0/SLICE_30_K1_H1 , 
         \U0/SLICE_30/U0/mux_433_i1/GATE_H0 , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40038 \U0/SLICE_30_K1 ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(\U0/SLICE_30/U0/SLICE_30_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40039 \U0/mux_433_i1/GATE ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\U0/SLICE_30/U0/mux_433_i1/GATE_H0 ));
  vmuxregsre0040 \U0/read_data_req_i_301 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \U0/SLICE_30_K0K1MUX ( .D0(\U0/SLICE_30/U0/mux_433_i1/GATE_H0 ), 
    .D1(\U0/SLICE_30/U0/SLICE_30_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40038 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40039 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0040 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module selmux2 ( input D0, D1, SD, output Z );

  MUX21 INST1( .D0(D0), .D1(D1), .SD(SD), .Z(Z));
endmodule

module U0_SLICE_31 ( input D1, C1, B1, A1, D0, C0, B0, DI0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40041 \U0/i2_3_lut_rep_45_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40042 \U0/i2926_2_lut_3_lut_rep_43 ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0009 \U0/read_done_i_285 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40041 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40042 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0CFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_33 ( input C1, B1, A1, C0, B0, A0, DI0, M1, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40043 \U0/select_384_Select_0_i9_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40044 \U0/i2_3_lut_adj_1 ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0009 \U0/read_done_reg_i_287 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0009 \U0/read_req_cnt_rst_i_300 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40043 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC8C8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40044 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_34 ( input D1, B1, D0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40045 \U0/i1_2_lut_rep_53 ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40046 \U0/i936_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/sdram_dq_en_i_298 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40045 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF22) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_35 ( input C1, A1, D0, C0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40047 \U0/i25_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40048 \U0/i1869_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/write_done_i_284 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40047 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h55F5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U1_U1_SLICE_37 ( input C0, B0, DI0, M1, LSR, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, LSR_dly;

  lut40049 \U1/U1/i605_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0040 \U1/U1/lfsr_reg_i_i1 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0040 \U1/U1/lfsr_reg_i_i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40049 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC3C3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U1_U5_SLICE_40 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, M1, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, M1_dly, LSR_dly;

  lut40050 \U1/U5/i5_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40051 \U1/U5/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0040 \U1/U5/lfsr_reg_i_i1 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0040 \U1/U5/lfsr_reg_i_i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40050 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40051 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9669) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U2_SLICE_44 ( input C0, B0, DI0, M1, CE, LSR, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly, LSR_dly;

  lut40049 \U2/i9_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0040 \U2/lfsr_reg_i_i0_i1 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0040 \U2/lfsr_reg_i_i0_i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_49 ( input M0, CE, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40052 i1( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0040 \U2/lfsr_reg_i_i0_i10 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40052 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U2_SLICE_50 ( input D1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40013 \U2/i1_2_lut ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40053 \U2/i4_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0009 \U2/o_refresh_count_done_12 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40053 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_51 ( input D1, C1, B1, A1, B0, A0, M0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40054 \U0/i6_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40055 \U0/i27_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0009 \U0/o_autoref_ack_291 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_52 ( input C1, A1, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40056 \U0/i2948_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40003 \U0/i15_1_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0040 autorefresh_enable_i_21( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0505) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module SLICE_53 ( input D1, A1, D0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40017 \U2/i1_2_lut_adj_31 ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40057 i2920_2_lut( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0040 latch_ref_req_i_19( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h55FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_54 ( input D1, C1, B1, A1, D0, C0, B0, DI0, M1, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40058 \U1/U1/i4_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40059 \U1/U1/i2929_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0009 \U0/write_done_reg_i_286 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0009 \U1/U1/o_lfsr_64_done_11 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40058 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0003) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_55 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40060 \U0/i2_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40050 \U0/i3_4_lut_adj_4 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/o_ack_292 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40060 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_56 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40061 \U0/i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40062 \U0/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/o_busy_293 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40061 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40062 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE2FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_57 ( input D1, A1, D0, C0, M0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40063 \U2/i2881_2_lut ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40064 i1852_2_lut( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0009 \U0/o_init_done_289 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40063 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40064 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_58 ( input D1, C1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, CE_NOTIN, DI0_dly, CLK_dly, CE_dly;

  lut40065 \U0/i2_3_lut_adj_5 ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \U0/i338_4_lut_rep_42 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0067 \U0/sdram_dqm_i_304 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40065 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40066 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0067 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module SLICE_59 ( input D1, B1, D0, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40068 \U0/i49_2_lut_rep_60 ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40069 \U0/i1_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0040 refresh_req_i_20( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40068 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40069 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0044) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_60 ( input D1, C1, B1, A1, D0, C0, A0, output OFX0, F1 );
  wire   GNDI, \U0/SLICE_60/U0/i3033/GATE_H0 ;

  lut40070 \U0/n3378_bdd_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40071 \U0/i3033/GATE ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\U0/SLICE_60/U0/i3033/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux20072 \U0/SLICE_60_K0K1MUX ( .D0(\U0/SLICE_60/U0/i3033/GATE_H0 ), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40070 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2075) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40071 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module selmux20072 ( input D0, output Z );

  BUFBA INST1( .A(D0), .Z(Z));
endmodule

module U0_SLICE_61 ( input D1, C1, B1, A1, D0, C0, A0, M1, FXB, FXA, output 
    OFX0, F1, OFX1 );
  wire   GNDI, \U0/SLICE_61/U0/i3031/GATE_H0 ;

  lut40073 \U0/n3141_bdd_1_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40074 \U0/i3031/GATE ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\U0/SLICE_61/U0/i3031/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux20072 \U0/SLICE_61_K0K1MUX ( .D0(\U0/SLICE_61/U0/i3031/GATE_H0 ), 
    .Z(OFX0));
  selmux2 \U0/SLICE_61_FXMUX ( .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40073 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40074 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_i33_SLICE_62 ( input D1, B1, A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, \U0/i33/SLICE_62/U0/i33/SLICE_62_K1_H1 , 
         \U0/i33/SLICE_62/U0/i33/GATE_H0 ;

  lut40075 \U0/i33/SLICE_62_K1 ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(\U0/i33/SLICE_62/U0/i33/SLICE_62_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \U0/i33/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\U0/i33/SLICE_62/U0/i33/GATE_H0 ));
  selmux2 \U0/i33/SLICE_62_K0K1MUX ( .D0(\U0/i33/SLICE_62/U0/i33/GATE_H0 ), 
    .D1(\U0/i33/SLICE_62/U0/i33/SLICE_62_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40075 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDD11) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40076 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC5CF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_i60_SLICE_63 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   \U0/i60/SLICE_63/U0/i60/SLICE_63_K1_H1 , 
         \U0/i60/SLICE_63/U0/i60/GATE_H0 ;

  lut40077 \U0/i60/SLICE_63_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\U0/i60/SLICE_63/U0/i60/SLICE_63_K1_H1 ));
  lut40078 \U0/i60/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\U0/i60/SLICE_63/U0/i60/GATE_H0 ));
  selmux2 \U0/i60/SLICE_63_K0K1MUX ( .D0(\U0/i60/SLICE_63/U0/i60/GATE_H0 ), 
    .D1(\U0/i60/SLICE_63/U0/i60/SLICE_63_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40077 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8C80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40078 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF3E2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_i30_SLICE_64 ( input D1, C1, A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, \U0/i30/SLICE_64/U0/i30/SLICE_64_K1_H1 , 
         \U0/i30/SLICE_64/U0/i30/GATE_H0 ;

  lut40079 \U0/i30/SLICE_64_K1 ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(\U0/i30/SLICE_64/U0/i30/SLICE_64_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40080 \U0/i30/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\U0/i30/SLICE_64/U0/i30/GATE_H0 ));
  selmux2 \U0/i30/SLICE_64_K0K1MUX ( .D0(\U0/i30/SLICE_64/U0/i30/GATE_H0 ), 
    .D1(\U0/i30/SLICE_64/U0/i30/SLICE_64_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40079 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40080 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h888B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_i30_adj_28_SLICE_65 ( input D1, C1, A1, D0, C0, B0, A0, M0, output 
    OFX0 );
  wire   GNDI, \U0/i30_adj_28/SLICE_65/U0/i30_adj_28/SLICE_65_K1_H1 , 
         \U0/i30_adj_28/SLICE_65/U0/i30_adj_28/GATE_H0 ;

  lut40081 \U0/i30_adj_28/SLICE_65_K1 ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(\U0/i30_adj_28/SLICE_65/U0/i30_adj_28/SLICE_65_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40082 \U0/i30_adj_28/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\U0/i30_adj_28/SLICE_65/U0/i30_adj_28/GATE_H0 ));
  selmux2 \U0/i30_adj_28/SLICE_65_K0K1MUX ( 
    .D0(\U0/i30_adj_28/SLICE_65/U0/i30_adj_28/GATE_H0 ), 
    .D1(\U0/i30_adj_28/SLICE_65/U0/i30_adj_28/SLICE_65_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40081 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0AF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40082 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0C5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_i30_adj_29_SLICE_66 ( input D1, C1, B1, D0, C0, B0, A0, M0, output 
    OFX0 );
  wire   GNDI, \U0/i30_adj_29/SLICE_66/U0/i30_adj_29/SLICE_66_K1_H1 , 
         \U0/i30_adj_29/SLICE_66/U0/i30_adj_29/GATE_H0 ;

  lut40083 \U0/i30_adj_29/SLICE_66_K1 ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(\U0/i30_adj_29/SLICE_66/U0/i30_adj_29/SLICE_66_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40084 \U0/i30_adj_29/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\U0/i30_adj_29/SLICE_66/U0/i30_adj_29/GATE_H0 ));
  selmux2 \U0/i30_adj_29/SLICE_66_K0K1MUX ( 
    .D0(\U0/i30_adj_29/SLICE_66/U0/i30_adj_29/GATE_H0 ), 
    .D1(\U0/i30_adj_29/SLICE_66/U0/i30_adj_29/SLICE_66_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40083 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0CF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40084 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0A3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_i2982_SLICE_67 ( input D1, C1, B1, D0, B0, A0, M0, output OFX0 );
  wire   GNDI, \U0/i2982/SLICE_67/U0/i2982/SLICE_67_K1_H1 , 
         \U0/i2982/SLICE_67/U0/i2982/GATE_H0 ;

  lut40085 \U0/i2982/SLICE_67_K1 ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(\U0/i2982/SLICE_67/U0/i2982/SLICE_67_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40086 \U0/i2982/GATE ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(\U0/i2982/SLICE_67/U0/i2982/GATE_H0 ));
  selmux2 \U0/i2982/SLICE_67_K0K1MUX ( 
    .D0(\U0/i2982/SLICE_67/U0/i2982/GATE_H0 ), 
    .D1(\U0/i2982/SLICE_67/U0/i2982/SLICE_67_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40085 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0003) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40086 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0011) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_mux_97_i12_SLICE_68 ( input D1, C1, B1, D0, C0, B0, A0, M0, output 
    OFX0 );
  wire   GNDI, \U0/mux_97_i12/SLICE_68/U0/mux_97_i12/SLICE_68_K1_H1 , 
         \U0/mux_97_i12/SLICE_68/U0/mux_97_i12/GATE_H0 ;

  lut40083 \U0/mux_97_i12/SLICE_68_K1 ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(\U0/mux_97_i12/SLICE_68/U0/mux_97_i12/SLICE_68_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40084 \U0/mux_97_i12/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\U0/mux_97_i12/SLICE_68/U0/mux_97_i12/GATE_H0 ));
  selmux2 \U0/mux_97_i12/SLICE_68_K0K1MUX ( 
    .D0(\U0/mux_97_i12/SLICE_68/U0/mux_97_i12/GATE_H0 ), 
    .D1(\U0/mux_97_i12/SLICE_68/U0/mux_97_i12/SLICE_68_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module U0_i2992_SLICE_69 ( input D1, C1, B1, A1, C0, B0, M0, output OFX0 );
  wire   \U0/i2992/SLICE_69/U0/i2992/SLICE_69_K1_H1 , GNDI, 
         \U0/i2992/SLICE_69/U0/i2992/GATE_H0 ;

  lut40087 \U0/i2992/SLICE_69_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\U0/i2992/SLICE_69/U0/i2992/SLICE_69_K1_H1 ));
  lut40088 \U0/i2992/GATE ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(\U0/i2992/SLICE_69/U0/i2992/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \U0/i2992/SLICE_69_K0K1MUX ( 
    .D0(\U0/i2992/SLICE_69/U0/i2992/GATE_H0 ), 
    .D1(\U0/i2992/SLICE_69/U0/i2992/SLICE_69_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40087 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40088 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0303) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_70 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40089 \U0/i2_4_lut_adj_26 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40090 \U0/i2_3_lut_4_lut_adj_18 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40089 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40090 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_71 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40091 \U0/i1_2_lut_4_lut_adj_27 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40092 \U0/i616_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40091 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAF2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40092 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8C88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_72 ( input D1, B1, A1, D0, C0, B0, A0, M0, LSR, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40093 \U0/mux_442_i1_3_lut_3_lut ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40094 \U0/mux_460_i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0040 \U0/init_fsm_states_i_FSM_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40093 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h55DD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40094 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0B1) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_73 ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, LSR, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40095 \U2/i2885_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40096 \U2/i3_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0040 \U0/init_fsm_states_i_FSM_i8 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0040 \U0/init_fsm_states_i_FSM_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40095 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40096 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_74 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40097 \U0/i1_2_lut_3_lut_4_lut_adj_8 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40098 \U0/i23_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40097 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAAB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40098 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h085D) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_75 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, LSR, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40099 \U0/i1866_2_lut_rep_54 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40100 \U0/i1_4_lut_adj_2 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0040 \U2/lfsr_reg_i_i0_i7 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0040 \U2/lfsr_reg_i_i0_i6 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40099 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40100 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hABAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_76 ( input D1, C1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40101 \U0/i1_2_lut_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40102 \U0/i700_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40101 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40102 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEF23) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_77 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40103 \U0/i1_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40104 \U0/i1_3_lut_rep_46_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0040 \U2/lfsr_reg_i_i0_i3 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0040 \U2/lfsr_reg_i_i0_i2 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40103 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40104 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C4C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_78 ( input D1, C1, B1, A1, D0, A0, M0, LSR, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, LSR_NOTIN, M0_dly, CLK_dly, LSR_dly;

  lut40105 \U0/mux_462_i1_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40106 \U0/i1_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0040 \U0/cmd_fsm_states_i_FSM_i7 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40105 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h33AF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40106 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_79 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40107 \U0/i23_4_lut_adj_12 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40108 \U0/i1_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0040 \U1/U1/lfsr_reg_i_i3 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0040 \U1/U1/lfsr_reg_i_i2 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40107 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h083B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40108 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAAB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_80 ( input D1, C1, B1, A1, C0, A0, M1, M0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40109 \U0/i388_1_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40110 \U0/i1_2_lut_adj_6 ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0040 \U1/U5/lfsr_reg_i_i5 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0040 \U1/U5/lfsr_reg_i_i4 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40109 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0535) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40110 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_81 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40099 \U0/equal_317_i6_2_lut_rep_62 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40111 \U0/i82_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40111 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_82 ( input D1, C1, A1, D0, C0, B0, A0, M1, M0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40112 \U0/mux_97_i1_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40113 \U0/i1_4_lut_adj_15 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0040 \U2/lfsr_reg_i_i0_i5 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0040 \U2/lfsr_reg_i_i0_i4 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40112 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF055) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40113 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCFC5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_83 ( input D1, C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40114 \U0/mux_97_i3_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40115 \U0/i694_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40114 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0F3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40115 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE4F5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_84 ( input D1, C1, B1, A1, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40116 \U0/i3_4_lut_adj_25 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40117 \U0/i452_2_lut_rep_50 ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40116 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40117 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_85 ( input D1, C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40114 \U0/mux_97_i4_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40118 \U0/i696_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40118 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hACAF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_86 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40119 \U0/i1_2_lut_3_lut_4_lut_adj_23 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40120 \U0/i3_4_lut_adj_19 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40119 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40120 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_87 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40121 \U0/i2_3_lut_rep_52_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40122 \U0/i1_4_lut_adj_20 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0040 \U2/lfsr_reg_i_i0_i9 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0040 \U2/lfsr_reg_i_i0_i8 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40121 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40122 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCE0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_88 ( input D1, C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40114 \U0/mux_97_i5_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40115 \U0/i698_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module U0_SLICE_89 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40123 \U0/n3141_bdd_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40124 \U0/i1_4_lut_adj_22 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40123 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3202) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40124 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_90 ( input D1, C1, B1, A1, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40125 \U0/i2951_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40126 \U0/i2_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40125 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40126 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_91 ( input D1, C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40114 \U0/mux_97_i7_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40127 \U0/i702_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40127 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCACF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_92 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40128 \U0/i1915_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40095 \U0/i2_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40128 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFE10) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_93 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40129 \U0/i1_2_lut_rep_49_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40130 \U0/i1_2_lut_3_lut_rep_48_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0040 \U1/U1/lfsr_reg_i_i5 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0040 \U1/U1/lfsr_reg_i_i4 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40129 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40130 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFDF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_94 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40131 \U0/i1_2_lut_3_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40132 \U0/i1_2_lut_rep_65 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0040 \U1/U5/lfsr_reg_i_i7 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0040 \U1/U5/lfsr_reg_i_i6 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40131 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40132 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF7FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_95 ( input C1, B1, A1, D0, C0, B0, A0, M1, M0, LSR, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40133 \U0/i1_3_lut_rep_44 ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40134 \U0/i1_2_lut_4_lut_adj_24 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0040 \U1/U5/lfsr_reg_i_i3 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0040 \U1/U5/lfsr_reg_i_i2 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40133 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3232) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40134 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_96 ( input C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40135 \U0/i1_2_lut_rep_47_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40136 \U0/i2887_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40135 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40136 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA8A8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_97 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40099 \U0/i524_2_lut_rep_55 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40137 \U0/i2937_2_lut_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40137 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_98 ( input C1, B1, D0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40027 \U0/i1_2_lut_2_lut ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40138 \U0/i2_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40138 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_99 ( input D1, C1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40139 \U0/i2931_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40127 \U0/i692_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40139 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_100 ( input D1, C1, B1, A1, D0, A0, output F0, F1 );
  wire   GNDI;

  lut40140 \U0/i1892_2_lut_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40141 \U0/i2945_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40140 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40141 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_101 ( input C1, A1, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40142 \U0/i1_2_lut_rep_59 ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40143 \U0/i245_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40142 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40143 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module U0_SLICE_102 ( input D1, C1, B1, A1, C0, B0, M0, LSR, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, LSR_NOTIN, M0_dly, CLK_dly, LSR_dly;

  lut40144 \U0/i2_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40143 \U0/i1856_2_lut_rep_63 ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0040 \U0/cmd_fsm_states_i_FSM_i15 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40144 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5D0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module o_data_30_ ( input PADDO, output odata30 );
  wire   GNDI;

  xo2iobuf o_data_pad_30( .I(PADDO), .T(GNDI), .PAD(odata30));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata30) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module o_data_31_ ( input PADDO, output odata31 );
  wire   GNDI;

  xo2iobuf o_data_pad_31( .I(PADDO), .T(GNDI), .PAD(odata31));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata31) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_read_done ( input PADDO, output o_read_done );
  wire   GNDI;

  xo2iobuf o_read_done_pad( .I(PADDO), .T(GNDI), .PAD(o_read_done));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => o_read_done) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_29_ ( input PADDO, output odata29 );
  wire   GNDI;

  xo2iobuf o_data_pad_29( .I(PADDO), .T(GNDI), .PAD(odata29));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata29) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_write_done ( input PADDO, output o_write_done );
  wire   GNDI;

  xo2iobuf o_write_done_pad( .I(PADDO), .T(GNDI), .PAD(o_write_done));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => o_write_done) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_clk ( input PADDO, output o_sdram_clk );
  wire   GNDI;

  xo2iobuf o_sdram_clk_pad( .I(PADDO), .T(GNDI), .PAD(o_sdram_clk));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => o_sdram_clk) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_wen ( input IOLDO, output o_sdram_wen );
  wire   GNDI;

  xo2iobuf o_sdram_wen_pad( .I(IOLDO), .T(GNDI), .PAD(o_sdram_wen));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => o_sdram_wen) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_wen_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0/o_sdram_wen_305 ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre ( input D0, SP, CK, LSR, output Q );

  FD1P3DX INST01( .D(D0), .SP(SP), .CK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module o_sdram_rasn ( input IOLDO, output o_sdram_rasn );
  wire   GNDI;

  xo2iobuf o_sdram_rasn_pad( .I(IOLDO), .T(GNDI), .PAD(o_sdram_rasn));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => o_sdram_rasn) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_rasn_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0/o_sdram_rasn_307 ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_dqm_0_ ( input PADDO, output osdramdqm0 );
  wire   GNDI;

  xo2iobuf o_sdram_dqm_pad_0( .I(PADDO), .T(GNDI), .PAD(osdramdqm0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => osdramdqm0) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_dqm_1_ ( input PADDO, output osdramdqm1 );
  wire   GNDI;

  xo2iobuf o_sdram_dqm_pad_1( .I(PADDO), .T(GNDI), .PAD(osdramdqm1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => osdramdqm1) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_dqm_2_ ( input PADDO, output osdramdqm2 );
  wire   VCCI;

  xo2iobuf0145 o_sdram_dqm_pad_2( .I(PADDO), .T(VCCI), .PAD(osdramdqm2));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => osdramdqm2) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0145 ( input I, T, output PAD );

  OBZ INST5( .I(I), .T(T), .O(PAD));
endmodule

module o_sdram_dqm_3_ ( input PADDO, output osdramdqm3 );
  wire   VCCI;

  xo2iobuf0145 o_sdram_dqm_pad_3( .I(PADDO), .T(VCCI), .PAD(osdramdqm3));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => osdramdqm3) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_csn ( input PADDO, output o_sdram_csn );
  wire   GNDI;

  xo2iobuf o_sdram_csn_pad( .I(PADDO), .T(GNDI), .PAD(o_sdram_csn));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => o_sdram_csn) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_cke ( input IOLDO, output o_sdram_cke );
  wire   GNDI;

  xo2iobuf o_sdram_cke_pad( .I(IOLDO), .T(GNDI), .PAD(o_sdram_cke));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => o_sdram_cke) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_cke_MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   CE_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0146 \U0/o_sdram_cke_309 ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre0146 ( input D0, SP, CK, LSR, output Q );

  FD1P3JX INST01( .D(D0), .SP(SP), .CK(CK), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module o_sdram_casn ( input IOLDO, output o_sdram_casn );
  wire   GNDI;

  xo2iobuf o_sdram_casn_pad( .I(IOLDO), .T(GNDI), .PAD(o_sdram_casn));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => o_sdram_casn) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_casn_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0/o_sdram_casn_306 ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_blkaddr_0_ ( input IOLDO, output osdramblkaddr0 );
  wire   GNDI;

  xo2iobuf o_sdram_blkaddr_pad_0( .I(IOLDO), .T(GNDI), .PAD(osdramblkaddr0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramblkaddr0) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_blkaddr_0__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0/o_sdram_blkaddr_i0_i0 ( .D0(OPOS_dly), .SP(CE_NOTIN), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_blkaddr_1_ ( input IOLDO, output osdramblkaddr1 );
  wire   GNDI;

  xo2iobuf o_sdram_blkaddr_pad_1( .I(IOLDO), .T(GNDI), .PAD(osdramblkaddr1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramblkaddr1) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_blkaddr_1__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0/o_sdram_blkaddr_i0_i1 ( .D0(OPOS_dly), .SP(CE_NOTIN), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_0_ ( input IOLDO, output osdramaddr0 );
  wire   GNDI;

  xo2iobuf o_sdram_addr_pad_0( .I(IOLDO), .T(GNDI), .PAD(osdramaddr0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr0) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_0__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0/o_sdram_addr__i1 ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_1_ ( input IOLDO, output osdramaddr1 );
  wire   GNDI;

  xo2iobuf o_sdram_addr_pad_1( .I(IOLDO), .T(GNDI), .PAD(osdramaddr1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr1) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_1__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   CE_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0146 \U0/o_sdram_addr__i2 ( .D0(OPOS_dly), .SP(CE_NOTIN), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_2_ ( input IOLDO, output osdramaddr2 );
  wire   GNDI;

  xo2iobuf o_sdram_addr_pad_2( .I(IOLDO), .T(GNDI), .PAD(osdramaddr2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr2) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_2__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0/o_sdram_addr__i3 ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_3_ ( input IOLDO, output osdramaddr3 );
  wire   GNDI;

  xo2iobuf o_sdram_addr_pad_3( .I(IOLDO), .T(GNDI), .PAD(osdramaddr3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr3) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_3__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0/o_sdram_addr__i4 ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_4_ ( input IOLDO, output osdramaddr4 );
  wire   GNDI;

  xo2iobuf o_sdram_addr_pad_4( .I(IOLDO), .T(GNDI), .PAD(osdramaddr4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr4) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_4__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0/o_sdram_addr__i5 ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_5_ ( input IOLDO, output osdramaddr5 );
  wire   GNDI;

  xo2iobuf o_sdram_addr_pad_5( .I(IOLDO), .T(GNDI), .PAD(osdramaddr5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr5) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_5__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   CE_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0146 \U0/o_sdram_addr__i6 ( .D0(OPOS_dly), .SP(CE_NOTIN), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_6_ ( input IOLDO, output osdramaddr6 );
  wire   GNDI;

  xo2iobuf o_sdram_addr_pad_6( .I(IOLDO), .T(GNDI), .PAD(osdramaddr6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr6) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_6__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0/o_sdram_addr__i7 ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_7_ ( input IOLDO, output osdramaddr7 );
  wire   GNDI;

  xo2iobuf o_sdram_addr_pad_7( .I(IOLDO), .T(GNDI), .PAD(osdramaddr7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr7) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_7__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0/o_sdram_addr__i8 ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_8_ ( input IOLDO, output osdramaddr8 );
  wire   GNDI;

  xo2iobuf o_sdram_addr_pad_8( .I(IOLDO), .T(GNDI), .PAD(osdramaddr8));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr8) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_8__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0/o_sdram_addr__i9 ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_9_ ( input IOLDO, output osdramaddr9 );
  wire   GNDI;

  xo2iobuf o_sdram_addr_pad_9( .I(IOLDO), .T(GNDI), .PAD(osdramaddr9));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr9) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_9__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0/o_sdram_addr__i10 ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_10_ ( input IOLDO, output osdramaddr10 );
  wire   GNDI;

  xo2iobuf o_sdram_addr_pad_10( .I(IOLDO), .T(GNDI), .PAD(osdramaddr10));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr10) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_10__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0/o_sdram_addr__i11 ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_11_ ( input IOLDO, output osdramaddr11 );
  wire   GNDI;

  xo2iobuf o_sdram_addr_pad_11( .I(IOLDO), .T(GNDI), .PAD(osdramaddr11));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => osdramaddr11) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_sdram_addr_11__MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \U0/o_sdram_addr__i12 ( .D0(OPOS_dly), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_sdram_addr_12_ ( input PADDO, output osdramaddr12 );
  wire   VCCI;

  xo2iobuf0145 o_sdram_addr_pad_12( .I(PADDO), .T(VCCI), .PAD(osdramaddr12));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => osdramaddr12) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_ack ( input PADDO, output o_ack );
  wire   GNDI;

  xo2iobuf o_ack_pad( .I(PADDO), .T(GNDI), .PAD(o_ack));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => o_ack) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_init_done ( input PADDO, output o_init_done );
  wire   GNDI;

  xo2iobuf o_init_done_pad( .I(PADDO), .T(GNDI), .PAD(o_init_done));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => o_init_done) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_busy ( input PADDO, output o_busy );
  wire   GNDI;

  xo2iobuf o_busy_pad( .I(PADDO), .T(GNDI), .PAD(o_busy));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => o_busy) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_req ( input PADDO, output o_data_req );
  wire   GNDI;

  xo2iobuf o_data_req_pad( .I(PADDO), .T(GNDI), .PAD(o_data_req));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => o_data_req) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_valid ( input IOLDO, output o_data_valid );
  wire   GNDI;

  xo2iobuf o_data_valid_pad( .I(IOLDO), .T(GNDI), .PAD(o_data_valid));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => o_data_valid) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_valid_MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre0147 \U0/cpu_den_i_296 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre0147 ( input D0, SP, CK, LSR, output Q );

  FD1P3DX INST01( .D(D0), .SP(SP), .CK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module io_sdram_dq_0_ ( output PADDI, input PADDT, PADDO, inout iosdramdq0 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_0( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq0), .PADI(iosdramdq0));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq0) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq0) = (0:0:0,0:0:0);
    (iosdramdq0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq0, 0:0:0);
    $width (negedge iosdramdq0, 0:0:0);
  endspecify

endmodule

module xo2iobuf0148 ( input I, T, output Z, PAD, input PADI );

  IBPD INST1( .I(PADI), .O(Z));
  OBZPD INST2( .I(I), .T(T), .O(PAD));
endmodule

module io_sdram_dq_15_ ( output PADDI, input PADDT, PADDO, inout iosdramdq15 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_15( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq15), .PADI(iosdramdq15));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq15) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq15) = (0:0:0,0:0:0);
    (iosdramdq15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq15, 0:0:0);
    $width (negedge iosdramdq15, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_9_ ( output PADDI, input PADDT, PADDO, inout iosdramdq9 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_9( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq9), .PADI(iosdramdq9));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq9) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq9) = (0:0:0,0:0:0);
    (iosdramdq9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq9, 0:0:0);
    $width (negedge iosdramdq9, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_10_ ( output PADDI, input PADDT, PADDO, inout iosdramdq10 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_10( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq10), .PADI(iosdramdq10));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq10) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq10) = (0:0:0,0:0:0);
    (iosdramdq10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq10, 0:0:0);
    $width (negedge iosdramdq10, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_11_ ( output PADDI, input PADDT, PADDO, inout iosdramdq11 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_11( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq11), .PADI(iosdramdq11));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq11) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq11) = (0:0:0,0:0:0);
    (iosdramdq11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq11, 0:0:0);
    $width (negedge iosdramdq11, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_1_ ( output PADDI, input PADDT, PADDO, inout iosdramdq1 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_1( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq1), .PADI(iosdramdq1));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq1) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq1) = (0:0:0,0:0:0);
    (iosdramdq1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq1, 0:0:0);
    $width (negedge iosdramdq1, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_2_ ( output PADDI, input PADDT, PADDO, inout iosdramdq2 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_2( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq2), .PADI(iosdramdq2));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq2) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq2) = (0:0:0,0:0:0);
    (iosdramdq2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq2, 0:0:0);
    $width (negedge iosdramdq2, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_3_ ( output PADDI, input PADDT, PADDO, inout iosdramdq3 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_3( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq3), .PADI(iosdramdq3));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq3) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq3) = (0:0:0,0:0:0);
    (iosdramdq3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq3, 0:0:0);
    $width (negedge iosdramdq3, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_4_ ( output PADDI, input PADDT, PADDO, inout iosdramdq4 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_4( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq4), .PADI(iosdramdq4));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq4) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq4) = (0:0:0,0:0:0);
    (iosdramdq4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq4, 0:0:0);
    $width (negedge iosdramdq4, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_12_ ( output PADDI, input PADDT, PADDO, inout iosdramdq12 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_12( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq12), .PADI(iosdramdq12));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq12) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq12) = (0:0:0,0:0:0);
    (iosdramdq12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq12, 0:0:0);
    $width (negedge iosdramdq12, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_13_ ( output PADDI, input PADDT, PADDO, inout iosdramdq13 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_13( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq13), .PADI(iosdramdq13));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq13) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq13) = (0:0:0,0:0:0);
    (iosdramdq13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq13, 0:0:0);
    $width (negedge iosdramdq13, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_14_ ( output PADDI, input PADDT, PADDO, inout iosdramdq14 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_14( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq14), .PADI(iosdramdq14));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq14) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq14) = (0:0:0,0:0:0);
    (iosdramdq14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq14, 0:0:0);
    $width (negedge iosdramdq14, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_5_ ( output PADDI, input PADDT, PADDO, inout iosdramdq5 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_5( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq5), .PADI(iosdramdq5));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq5) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq5) = (0:0:0,0:0:0);
    (iosdramdq5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq5, 0:0:0);
    $width (negedge iosdramdq5, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_6_ ( output PADDI, input PADDT, PADDO, inout iosdramdq6 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_6( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq6), .PADI(iosdramdq6));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq6) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq6) = (0:0:0,0:0:0);
    (iosdramdq6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq6, 0:0:0);
    $width (negedge iosdramdq6, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_7_ ( output PADDI, input PADDT, PADDO, inout iosdramdq7 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_7( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq7), .PADI(iosdramdq7));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq7) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq7) = (0:0:0,0:0:0);
    (iosdramdq7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq7, 0:0:0);
    $width (negedge iosdramdq7, 0:0:0);
  endspecify

endmodule

module io_sdram_dq_8_ ( output PADDI, input PADDT, PADDO, inout iosdramdq8 );
  wire   PADDT_NOTIN;

  xo2iobuf0148 io_sdram_dq_pad_8( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(iosdramdq8), .PADI(iosdramdq8));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => iosdramdq8) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => iosdramdq8) = (0:0:0,0:0:0);
    (iosdramdq8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iosdramdq8, 0:0:0);
    $width (negedge iosdramdq8, 0:0:0);
  endspecify

endmodule

module o_data_28_ ( input PADDO, output odata28 );
  wire   GNDI;

  xo2iobuf o_data_pad_28( .I(PADDO), .T(GNDI), .PAD(odata28));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata28) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_27_ ( input PADDO, output odata27 );
  wire   GNDI;

  xo2iobuf o_data_pad_27( .I(PADDO), .T(GNDI), .PAD(odata27));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata27) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_26_ ( input PADDO, output odata26 );
  wire   GNDI;

  xo2iobuf o_data_pad_26( .I(PADDO), .T(GNDI), .PAD(odata26));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata26) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_25_ ( input PADDO, output odata25 );
  wire   GNDI;

  xo2iobuf o_data_pad_25( .I(PADDO), .T(GNDI), .PAD(odata25));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata25) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_24_ ( input PADDO, output odata24 );
  wire   GNDI;

  xo2iobuf o_data_pad_24( .I(PADDO), .T(GNDI), .PAD(odata24));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata24) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_23_ ( input PADDO, output odata23 );
  wire   GNDI;

  xo2iobuf o_data_pad_23( .I(PADDO), .T(GNDI), .PAD(odata23));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata23) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_22_ ( input PADDO, output odata22 );
  wire   GNDI;

  xo2iobuf o_data_pad_22( .I(PADDO), .T(GNDI), .PAD(odata22));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata22) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_21_ ( input PADDO, output odata21 );
  wire   GNDI;

  xo2iobuf o_data_pad_21( .I(PADDO), .T(GNDI), .PAD(odata21));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata21) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_20_ ( input PADDO, output odata20 );
  wire   GNDI;

  xo2iobuf o_data_pad_20( .I(PADDO), .T(GNDI), .PAD(odata20));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata20) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_19_ ( input PADDO, output odata19 );
  wire   GNDI;

  xo2iobuf o_data_pad_19( .I(PADDO), .T(GNDI), .PAD(odata19));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata19) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_18_ ( input PADDO, output odata18 );
  wire   GNDI;

  xo2iobuf o_data_pad_18( .I(PADDO), .T(GNDI), .PAD(odata18));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata18) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_17_ ( input PADDO, output odata17 );
  wire   GNDI;

  xo2iobuf o_data_pad_17( .I(PADDO), .T(GNDI), .PAD(odata17));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata17) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_16_ ( input PADDO, output odata16 );
  wire   GNDI;

  xo2iobuf o_data_pad_16( .I(PADDO), .T(GNDI), .PAD(odata16));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => odata16) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_15_ ( input IOLDO, output odata15 );
  wire   GNDI;

  xo2iobuf o_data_pad_15( .I(IOLDO), .T(GNDI), .PAD(odata15));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata15) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_15__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i16 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_14_ ( input IOLDO, output odata14 );
  wire   GNDI;

  xo2iobuf o_data_pad_14( .I(IOLDO), .T(GNDI), .PAD(odata14));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata14) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_14__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i15 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_13_ ( input IOLDO, output odata13 );
  wire   GNDI;

  xo2iobuf o_data_pad_13( .I(IOLDO), .T(GNDI), .PAD(odata13));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata13) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_13__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i14 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_12_ ( input IOLDO, output odata12 );
  wire   GNDI;

  xo2iobuf o_data_pad_12( .I(IOLDO), .T(GNDI), .PAD(odata12));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata12) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_12__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i13 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_11_ ( input IOLDO, output odata11 );
  wire   GNDI;

  xo2iobuf o_data_pad_11( .I(IOLDO), .T(GNDI), .PAD(odata11));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata11) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_11__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i12 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_10_ ( input IOLDO, output odata10 );
  wire   GNDI;

  xo2iobuf o_data_pad_10( .I(IOLDO), .T(GNDI), .PAD(odata10));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata10) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_10__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i11 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_9_ ( input IOLDO, output odata9 );
  wire   GNDI;

  xo2iobuf o_data_pad_9( .I(IOLDO), .T(GNDI), .PAD(odata9));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata9) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_9__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i10 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_8_ ( input IOLDO, output odata8 );
  wire   GNDI;

  xo2iobuf o_data_pad_8( .I(IOLDO), .T(GNDI), .PAD(odata8));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata8) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_8__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i9 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_7_ ( input IOLDO, output odata7 );
  wire   GNDI;

  xo2iobuf o_data_pad_7( .I(IOLDO), .T(GNDI), .PAD(odata7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata7) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_7__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i8 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_6_ ( input IOLDO, output odata6 );
  wire   GNDI;

  xo2iobuf o_data_pad_6( .I(IOLDO), .T(GNDI), .PAD(odata6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata6) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_6__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i7 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_5_ ( input IOLDO, output odata5 );
  wire   GNDI;

  xo2iobuf o_data_pad_5( .I(IOLDO), .T(GNDI), .PAD(odata5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata5) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_5__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i6 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_4_ ( input IOLDO, output odata4 );
  wire   GNDI;

  xo2iobuf o_data_pad_4( .I(IOLDO), .T(GNDI), .PAD(odata4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata4) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_4__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i5 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_3_ ( input IOLDO, output odata3 );
  wire   GNDI;

  xo2iobuf o_data_pad_3( .I(IOLDO), .T(GNDI), .PAD(odata3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata3) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_3__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i4 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_2_ ( input IOLDO, output odata2 );
  wire   GNDI;

  xo2iobuf o_data_pad_2( .I(IOLDO), .T(GNDI), .PAD(odata2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata2) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_2__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i3 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_1_ ( input IOLDO, output odata1 );
  wire   GNDI;

  xo2iobuf o_data_pad_1( .I(IOLDO), .T(GNDI), .PAD(odata1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata1) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_1__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i2 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module o_data_0_ ( input IOLDO, output odata0 );
  wire   GNDI;

  xo2iobuf o_data_pad_0( .I(IOLDO), .T(GNDI), .PAD(odata0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => odata0) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_data_0__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre \U0/sdram_dq_reg_i_i1 ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i_data_15_ ( output PADDI, input idata15 );

  xo2iobuf0149 i_data_pad_15( .Z(PADDI), .PAD(idata15));

  specify
    (idata15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata15, 0:0:0);
    $width (negedge idata15, 0:0:0);
  endspecify

endmodule

module xo2iobuf0149 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module i_data_14_ ( output PADDI, input idata14 );

  xo2iobuf0149 i_data_pad_14( .Z(PADDI), .PAD(idata14));

  specify
    (idata14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata14, 0:0:0);
    $width (negedge idata14, 0:0:0);
  endspecify

endmodule

module i_data_13_ ( output PADDI, input idata13 );

  xo2iobuf0149 i_data_pad_13( .Z(PADDI), .PAD(idata13));

  specify
    (idata13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata13, 0:0:0);
    $width (negedge idata13, 0:0:0);
  endspecify

endmodule

module i_data_12_ ( output PADDI, input idata12 );

  xo2iobuf0149 i_data_pad_12( .Z(PADDI), .PAD(idata12));

  specify
    (idata12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata12, 0:0:0);
    $width (negedge idata12, 0:0:0);
  endspecify

endmodule

module i_data_11_ ( output PADDI, input idata11 );

  xo2iobuf0149 i_data_pad_11( .Z(PADDI), .PAD(idata11));

  specify
    (idata11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata11, 0:0:0);
    $width (negedge idata11, 0:0:0);
  endspecify

endmodule

module i_data_10_ ( output PADDI, input idata10 );

  xo2iobuf0149 i_data_pad_10( .Z(PADDI), .PAD(idata10));

  specify
    (idata10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata10, 0:0:0);
    $width (negedge idata10, 0:0:0);
  endspecify

endmodule

module i_data_9_ ( output PADDI, input idata9 );

  xo2iobuf0149 i_data_pad_9( .Z(PADDI), .PAD(idata9));

  specify
    (idata9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata9, 0:0:0);
    $width (negedge idata9, 0:0:0);
  endspecify

endmodule

module i_data_8_ ( output PADDI, input idata8 );

  xo2iobuf0149 i_data_pad_8( .Z(PADDI), .PAD(idata8));

  specify
    (idata8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata8, 0:0:0);
    $width (negedge idata8, 0:0:0);
  endspecify

endmodule

module i_data_7_ ( output PADDI, input idata7 );

  xo2iobuf0149 i_data_pad_7( .Z(PADDI), .PAD(idata7));

  specify
    (idata7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata7, 0:0:0);
    $width (negedge idata7, 0:0:0);
  endspecify

endmodule

module i_data_6_ ( output PADDI, input idata6 );

  xo2iobuf0149 i_data_pad_6( .Z(PADDI), .PAD(idata6));

  specify
    (idata6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata6, 0:0:0);
    $width (negedge idata6, 0:0:0);
  endspecify

endmodule

module i_data_5_ ( output PADDI, input idata5 );

  xo2iobuf0149 i_data_pad_5( .Z(PADDI), .PAD(idata5));

  specify
    (idata5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata5, 0:0:0);
    $width (negedge idata5, 0:0:0);
  endspecify

endmodule

module i_data_4_ ( output PADDI, input idata4 );

  xo2iobuf0149 i_data_pad_4( .Z(PADDI), .PAD(idata4));

  specify
    (idata4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata4, 0:0:0);
    $width (negedge idata4, 0:0:0);
  endspecify

endmodule

module i_data_3_ ( output PADDI, input idata3 );

  xo2iobuf0149 i_data_pad_3( .Z(PADDI), .PAD(idata3));

  specify
    (idata3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata3, 0:0:0);
    $width (negedge idata3, 0:0:0);
  endspecify

endmodule

module i_data_2_ ( output PADDI, input idata2 );

  xo2iobuf0149 i_data_pad_2( .Z(PADDI), .PAD(idata2));

  specify
    (idata2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata2, 0:0:0);
    $width (negedge idata2, 0:0:0);
  endspecify

endmodule

module i_data_1_ ( output PADDI, input idata1 );

  xo2iobuf0149 i_data_pad_1( .Z(PADDI), .PAD(idata1));

  specify
    (idata1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata1, 0:0:0);
    $width (negedge idata1, 0:0:0);
  endspecify

endmodule

module i_data_0_ ( output PADDI, input idata0 );

  xo2iobuf0149 i_data_pad_0( .Z(PADDI), .PAD(idata0));

  specify
    (idata0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge idata0, 0:0:0);
    $width (negedge idata0, 0:0:0);
  endspecify

endmodule

module i_addr_21_ ( output PADDI, input iaddr21 );

  xo2iobuf0149 i_addr_pad_21( .Z(PADDI), .PAD(iaddr21));

  specify
    (iaddr21 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr21, 0:0:0);
    $width (negedge iaddr21, 0:0:0);
  endspecify

endmodule

module i_addr_20_ ( output PADDI, input iaddr20 );

  xo2iobuf0149 i_addr_pad_20( .Z(PADDI), .PAD(iaddr20));

  specify
    (iaddr20 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr20, 0:0:0);
    $width (negedge iaddr20, 0:0:0);
  endspecify

endmodule

module i_addr_19_ ( output PADDI, input iaddr19 );

  xo2iobuf0149 i_addr_pad_19( .Z(PADDI), .PAD(iaddr19));

  specify
    (iaddr19 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr19, 0:0:0);
    $width (negedge iaddr19, 0:0:0);
  endspecify

endmodule

module i_addr_18_ ( output PADDI, input iaddr18 );

  xo2iobuf0149 i_addr_pad_18( .Z(PADDI), .PAD(iaddr18));

  specify
    (iaddr18 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr18, 0:0:0);
    $width (negedge iaddr18, 0:0:0);
  endspecify

endmodule

module i_addr_17_ ( output PADDI, input iaddr17 );

  xo2iobuf0149 i_addr_pad_17( .Z(PADDI), .PAD(iaddr17));

  specify
    (iaddr17 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr17, 0:0:0);
    $width (negedge iaddr17, 0:0:0);
  endspecify

endmodule

module i_addr_16_ ( output PADDI, input iaddr16 );

  xo2iobuf0149 i_addr_pad_16( .Z(PADDI), .PAD(iaddr16));

  specify
    (iaddr16 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr16, 0:0:0);
    $width (negedge iaddr16, 0:0:0);
  endspecify

endmodule

module i_addr_15_ ( output PADDI, input iaddr15 );

  xo2iobuf0149 i_addr_pad_15( .Z(PADDI), .PAD(iaddr15));

  specify
    (iaddr15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr15, 0:0:0);
    $width (negedge iaddr15, 0:0:0);
  endspecify

endmodule

module i_addr_14_ ( output PADDI, input iaddr14 );

  xo2iobuf0149 i_addr_pad_14( .Z(PADDI), .PAD(iaddr14));

  specify
    (iaddr14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr14, 0:0:0);
    $width (negedge iaddr14, 0:0:0);
  endspecify

endmodule

module i_addr_13_ ( output PADDI, input iaddr13 );

  xo2iobuf0149 i_addr_pad_13( .Z(PADDI), .PAD(iaddr13));

  specify
    (iaddr13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr13, 0:0:0);
    $width (negedge iaddr13, 0:0:0);
  endspecify

endmodule

module i_addr_12_ ( output PADDI, input iaddr12 );

  xo2iobuf0149 i_addr_pad_12( .Z(PADDI), .PAD(iaddr12));

  specify
    (iaddr12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr12, 0:0:0);
    $width (negedge iaddr12, 0:0:0);
  endspecify

endmodule

module i_addr_11_ ( output PADDI, input iaddr11 );

  xo2iobuf0149 i_addr_pad_11( .Z(PADDI), .PAD(iaddr11));

  specify
    (iaddr11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr11, 0:0:0);
    $width (negedge iaddr11, 0:0:0);
  endspecify

endmodule

module i_addr_10_ ( output PADDI, input iaddr10 );

  xo2iobuf0149 i_addr_pad_10( .Z(PADDI), .PAD(iaddr10));

  specify
    (iaddr10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr10, 0:0:0);
    $width (negedge iaddr10, 0:0:0);
  endspecify

endmodule

module i_addr_9_ ( output PADDI, input iaddr9 );

  xo2iobuf0149 i_addr_pad_9( .Z(PADDI), .PAD(iaddr9));

  specify
    (iaddr9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr9, 0:0:0);
    $width (negedge iaddr9, 0:0:0);
  endspecify

endmodule

module i_addr_8_ ( output PADDI, input iaddr8 );

  xo2iobuf0149 i_addr_pad_8( .Z(PADDI), .PAD(iaddr8));

  specify
    (iaddr8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr8, 0:0:0);
    $width (negedge iaddr8, 0:0:0);
  endspecify

endmodule

module i_addr_7_ ( output PADDI, input iaddr7 );

  xo2iobuf0149 i_addr_pad_7( .Z(PADDI), .PAD(iaddr7));

  specify
    (iaddr7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr7, 0:0:0);
    $width (negedge iaddr7, 0:0:0);
  endspecify

endmodule

module i_addr_6_ ( output PADDI, input iaddr6 );

  xo2iobuf0149 i_addr_pad_6( .Z(PADDI), .PAD(iaddr6));

  specify
    (iaddr6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr6, 0:0:0);
    $width (negedge iaddr6, 0:0:0);
  endspecify

endmodule

module i_addr_5_ ( output PADDI, input iaddr5 );

  xo2iobuf0149 i_addr_pad_5( .Z(PADDI), .PAD(iaddr5));

  specify
    (iaddr5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr5, 0:0:0);
    $width (negedge iaddr5, 0:0:0);
  endspecify

endmodule

module i_addr_4_ ( output PADDI, input iaddr4 );

  xo2iobuf0149 i_addr_pad_4( .Z(PADDI), .PAD(iaddr4));

  specify
    (iaddr4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr4, 0:0:0);
    $width (negedge iaddr4, 0:0:0);
  endspecify

endmodule

module i_addr_3_ ( output PADDI, input iaddr3 );

  xo2iobuf0149 i_addr_pad_3( .Z(PADDI), .PAD(iaddr3));

  specify
    (iaddr3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr3, 0:0:0);
    $width (negedge iaddr3, 0:0:0);
  endspecify

endmodule

module i_addr_2_ ( output PADDI, input iaddr2 );

  xo2iobuf0149 i_addr_pad_2( .Z(PADDI), .PAD(iaddr2));

  specify
    (iaddr2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr2, 0:0:0);
    $width (negedge iaddr2, 0:0:0);
  endspecify

endmodule

module i_addr_1_ ( output PADDI, input iaddr1 );

  xo2iobuf0149 i_addr_pad_1( .Z(PADDI), .PAD(iaddr1));

  specify
    (iaddr1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr1, 0:0:0);
    $width (negedge iaddr1, 0:0:0);
  endspecify

endmodule

module i_addr_0_ ( output PADDI, input iaddr0 );

  xo2iobuf0149 i_addr_pad_0( .Z(PADDI), .PAD(iaddr0));

  specify
    (iaddr0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge iaddr0, 0:0:0);
    $width (negedge iaddr0, 0:0:0);
  endspecify

endmodule

module i_adv ( output PADDI, input i_adv );

  xo2iobuf0149 i_adv_pad( .Z(PADDI), .PAD(i_adv));

  specify
    (i_adv => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_adv, 0:0:0);
    $width (negedge i_adv, 0:0:0);
  endspecify

endmodule

module i_clk ( output PADDI, input i_clk );

  xo2iobuf0149 i_clk_pad( .Z(PADDI), .PAD(i_clk));

  specify
    (i_clk => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_clk, 0:0:0);
    $width (negedge i_clk, 0:0:0);
  endspecify

endmodule

module i_rst ( output PADDI, input i_rst );

  xo2iobuf0149 i_rst_pad( .Z(PADDI), .PAD(i_rst));

  specify
    (i_rst => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_rst, 0:0:0);
    $width (negedge i_rst, 0:0:0);
  endspecify

endmodule

module i_rwn ( output PADDI, input i_rwn );

  xo2iobuf0149 i_rwn_pad( .Z(PADDI), .PAD(i_rwn));

  specify
    (i_rwn => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_rwn, 0:0:0);
    $width (negedge i_rwn, 0:0:0);
  endspecify

endmodule

module i_selfrefresh_req ( output PADDI, input i_selfrefresh_req );

  xo2iobuf0149 i_selfrefresh_req_pad( .Z(PADDI), .PAD(i_selfrefresh_req));

  specify
    (i_selfrefresh_req => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_selfrefresh_req, 0:0:0);
    $width (negedge i_selfrefresh_req, 0:0:0);
  endspecify

endmodule

module i_loadmod_req ( output PADDI, input i_loadmod_req );

  xo2iobuf0149 i_loadmod_req_pad( .Z(PADDI), .PAD(i_loadmod_req));

  specify
    (i_loadmod_req => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_loadmod_req, 0:0:0);
    $width (negedge i_loadmod_req, 0:0:0);
  endspecify

endmodule

module i_burststop_req ( output PADDI, input i_burststop_req );

  xo2iobuf0149 i_burststop_req_pad( .Z(PADDI), .PAD(i_burststop_req));

  specify
    (i_burststop_req => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_burststop_req, 0:0:0);
    $width (negedge i_burststop_req, 0:0:0);
  endspecify

endmodule

module i_disable_active ( output PADDI, input i_disable_active );

  xo2iobuf0149 i_disable_active_pad( .Z(PADDI), .PAD(i_disable_active));

  specify
    (i_disable_active => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_disable_active, 0:0:0);
    $width (negedge i_disable_active, 0:0:0);
  endspecify

endmodule

module i_disable_precharge ( output PADDI, input i_disable_precharge );

  xo2iobuf0149 i_disable_precharge_pad( .Z(PADDI), .PAD(i_disable_precharge));

  specify
    (i_disable_precharge => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_disable_precharge, 0:0:0);
    $width (negedge i_disable_precharge, 0:0:0);
  endspecify

endmodule

module i_precharge_req ( output PADDI, input i_precharge_req );

  xo2iobuf0149 i_precharge_req_pad( .Z(PADDI), .PAD(i_precharge_req));

  specify
    (i_precharge_req => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_precharge_req, 0:0:0);
    $width (negedge i_precharge_req, 0:0:0);
  endspecify

endmodule

module i_power_down ( output PADDI, input i_power_down );

  xo2iobuf0149 i_power_down_pad( .Z(PADDI), .PAD(i_power_down));

  specify
    (i_power_down => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_power_down, 0:0:0);
    $width (negedge i_power_down, 0:0:0);
  endspecify

endmodule

module i_power_down_MGIOL ( input DI, CLK, output IN );
  wire   VCCI, GNDI, DI_dly, CLK_dly;

  smuxlregsre power_down_reg1_i_18( .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module smuxlregsre ( input D0, SP, CK, LSR, output Q );

  IFS1P3DX INST01( .D(D0), .SP(SP), .SCLK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module i_disable_autorefresh ( output PADDI, input i_disable_autorefresh );

  xo2iobuf0149 i_disable_autorefresh_pad( .Z(PADDI), 
    .PAD(i_disable_autorefresh));

  specify
    (i_disable_autorefresh => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_disable_autorefresh, 0:0:0);
    $width (negedge i_disable_autorefresh, 0:0:0);
  endspecify

endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  INV INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
